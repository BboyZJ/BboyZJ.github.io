<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张建的博客</title>
  <icon>https://www.gravatar.com/avatar/134cc2bfaf649e446f661778f4112fca</icon>
  <subtitle>成功的道路上只有荆棘，没有坦途</subtitle>
  <link href="https://www.bboyzj.cn/atom.xml" rel="self"/>
  
  <link href="https://www.bboyzj.cn/"/>
  <updated>2023-03-04T15:55:05.157Z</updated>
  <id>https://www.bboyzj.cn/</id>
  
  <author>
    <name>小J</name>
    <email>13718004742@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OC组件化06：Github-Desktop管理工具使用</title>
    <link href="https://www.bboyzj.cn/2023/03/04/OC%E7%BB%84%E4%BB%B6%E5%8C%9606%EF%BC%9AGithub-Desktop%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.bboyzj.cn/2023/03/04/OC%E7%BB%84%E4%BB%B6%E5%8C%9606%EF%BC%9AGithub-Desktop%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</id>
    <published>2023-03-04T15:47:00.000Z</published>
    <updated>2023-03-04T15:55:05.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>GitHub Desktop 简单说就是 <code>图形界面</code> 版的 <code>Git</code>，不需要命令行的操作</p><p>通过 <a class="link"   href="https://desktop.github.com/" >GitHub官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 可以下载、安装使用</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li><p>注册你的 <code>GitHub</code> 账号，已注册 <code>GitHub</code> 账号的，跳过</p></li><li><p>在 <code>GitHub Desktop</code> 登录你的账号</p></li></ul><h1 id="创建仓库：File-gt-new-repository"><a href="#创建仓库：File-gt-new-repository" class="headerlink" title="创建仓库：File -&gt; new repository"></a>创建仓库：File -&gt; new repository</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042347662.png"                                     ></p><h1 id="创建分支：branch-gt-new-branch"><a href="#创建分支：branch-gt-new-branch" class="headerlink" title="创建分支：branch -&gt; new branch"></a>创建分支：branch -&gt; new branch</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042347152.png"                                     ></p><ul><li>创建一个开发的分支 <code>zj_feature</code></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042348162.png"                                     ></p><h1 id="克隆仓库到-GitHub-Desktop"><a href="#克隆仓库到-GitHub-Desktop" class="headerlink" title="克隆仓库到 GitHub Desktop"></a>克隆仓库到 GitHub Desktop</h1><ul><li>File -&gt; Clone Repository</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042348676.png"                                     ></p><ul><li>切换分支</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042348034.png"                                     ></p><h1 id="修改工程代码，将-0-2-0-版本代码完成，并提交到新分支-zj-feature"><a href="#修改工程代码，将-0-2-0-版本代码完成，并提交到新分支-zj-feature" class="headerlink" title="修改工程代码，将 0.2.0 版本代码完成，并提交到新分支 zj_feature"></a>修改工程代码，将 0.2.0 版本代码完成，并提交到新分支 zj_feature</h1><ul><li><p>Summary：必填 0.2.0</p></li><li><p>Description：描述 0.2.0 版本的内容</p></li><li><p>Commit to zj_feature</p></li><li><p>push origin</p></li></ul><h1 id="合并分支："><a href="#合并分支：" class="headerlink" title="合并分支："></a>合并分支：</h1><ul><li>先切换到 <code>main</code> 主分支</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042348854.png"                                     ></p><ul><li>合并分支：branch菜单 -&gt; merge into current branch</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042348376.png"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042349579.png"                                     ></p><h1 id="提交-main-分支"><a href="#提交-main-分支" class="headerlink" title="提交 main 分支"></a>提交 main 分支</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042349550.png"                                     ></p><h1 id="删除分支：菜单branch-gt-delete-删除分支"><a href="#删除分支：菜单branch-gt-delete-删除分支" class="headerlink" title="删除分支：菜单branch -&gt; delete 删除分支"></a>删除分支：菜单branch -&gt; delete 删除分支</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042349616.png"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042350674.png"                                     ></p><h1 id="版本回滚"><a href="#版本回滚" class="headerlink" title="版本回滚"></a>版本回滚</h1><ul><li><p>还未提交代码：文件右键 -&gt; <code>Discard Changes</code> 放弃更改</p></li><li><p>已经提交代码：文件右键选择 -&gt; <code>Revert This Commit</code> 恢复到当前提交</p></li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ul><li>打开项目代码：Show in Finder</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042351545.png"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042351468.png"                                     ></p><ul><li>所有 <code>新增代码</code> 可以在工程项目中实时修改，并可以运行查看效果</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042351431.png"                                     ></p><ul><li>在 GitHub Desktop 上可以看到实时的修改</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042352356.png"                                     ></p><ul><li>修改完记得修改一下版本号</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042353544.png"                                     ></p><ul><li>提交代码到 <code>本地mian</code> 分支</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042353044.png"                                     ></p><ul><li>提交代码到 <code>远程main</code> 分支</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042354437.png"                                     ></p><h1 id="终端搜索-ZJWeakProxy-库"><a href="#终端搜索-ZJWeakProxy-库" class="headerlink" title="终端搜索 ZJWeakProxy 库"></a>终端搜索 ZJWeakProxy 库</h1><p><code>mac@bogon ~ % pod search ZJWeakProxy</code></p><p>【问题：】未搜索到自己创建的组件库</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042353662.png"                                     ></p><p>解决方法：更新本地Pod的索引文件</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mac@bogon ~ % rm ~/Library/Caches/CocoaPods/search_index.json</span><br><span class="line">mac@bogon ~ % pod repo update</span><br></pre></td></tr></table></figure></div><p>如果还是搜索不到：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mac@bogon ~ % sudo gem install -n /usr/local/bin cocoapods --pre </span><br><span class="line">mac@bogon ~ % pod setup</span><br></pre></td></tr></table></figure></div><ul><li>再次搜索</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;GitHub Desktop 简单说就是 &lt;code&gt;图形界面&lt;/code&gt; 版的 &lt;code&gt;Git&lt;/code&gt;，不需要命令行的操作&lt;/</summary>
      
    
    
    
    <category term="Component" scheme="https://www.bboyzj.cn/categories/Component/"/>
    
    
    <category term="组件化开发" scheme="https://www.bboyzj.cn/tags/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>OC组件化05：【方案二】cocoapods组件化</title>
    <link href="https://www.bboyzj.cn/2023/03/04/OC%E7%BB%84%E4%BB%B6%E5%8C%9605%EF%BC%9A%E3%80%90%E6%96%B9%E6%A1%88%E4%BA%8C%E3%80%91cocoapods%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    <id>https://www.bboyzj.cn/2023/03/04/OC%E7%BB%84%E4%BB%B6%E5%8C%9605%EF%BC%9A%E3%80%90%E6%96%B9%E6%A1%88%E4%BA%8C%E3%80%91cocoapods%E7%BB%84%E4%BB%B6%E5%8C%96/</id>
    <published>2023-03-04T15:30:55.000Z</published>
    <updated>2023-03-04T15:45:45.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul><li>随着公司业务的不断发展，应用的代码体积将会越来越大，业务代码耦合也越来越多，代码量也是急剧增加</li><li>如果仅仅完成代码拆分还不足以解决业务之间的代码耦合，而组件化是一种能够解决代码耦合、业务工程能够独立运行的技术</li><li>这篇文章主要介绍远程私有库的创建和管理以及本地索引库的使用</li></ul><p>本文以创建 <code>公有库</code> 为例</p><h1 id="查看本地索引库"><a href="#查看本地索引库" class="headerlink" title="查看本地索引库"></a>查看本地索引库</h1><ul><li>我们用 <code>cocoaPods</code> 的时候，默认使用的是cocoaPods自带的索引库<br>终端中使用命令 <code>$ pod repo</code></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cocoapods</span><br><span class="line">- Type: git (remotes/origin/master)</span><br><span class="line">- URL:  https://github.com/CocoaPods/Specs.git</span><br><span class="line">- Path: /Users/mac/.cocoapods/repos/cocoapods</span><br><span class="line"></span><br><span class="line">trunk</span><br><span class="line">- Type: CDN</span><br><span class="line">- URL:  https://cdn.cocoapods.org/</span><br><span class="line">- Path: /Users/mac/.cocoapods/repos/trunk</span><br><span class="line"></span><br><span class="line">2 repos</span><br></pre></td></tr></table></figure></div><h1 id="组件化分类"><a href="#组件化分类" class="headerlink" title="组件化分类"></a>组件化分类</h1><ul><li><p>公有库：所有人都能使用</p></li><li><p>私有库：公司内部拥有特殊权限才能使用</p></li><li><p>framework：公私都有，动态库静态库。只能看到.h文件。</p></li></ul><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li><p><code>GitHub</code> 账号一个：上传组件工程用</p></li><li><p>安装 <code>CocoaPods</code>：创建并验证 <code>pod</code> 用</p></li><li><p>安装 <code>Git</code> 命令行 ：首次上传组件工程用</p></li><li><p>安装 <code>Github Desktop</code> 或者 <code>SourceTree</code>：后续更新组件用的，Git命令使用熟练者忽略此项</p></li></ul><h1 id="创建公有库"><a href="#创建公有库" class="headerlink" title="创建公有库"></a>创建公有库</h1><ul><li>首先在 <code>Github</code> 创建一个新的 <code>Repository</code>，你的 <code>pods</code> 最终要托管在 <code>Github</code> 平台上的，所以在 <code>Github</code> 上创建一个空的 <code>Repository</code></li></ul><p>注意：<code>库名 = 项目前缀 + 组件名称 </code> ，如 ZJWeakProxy &#x3D; 解决循环引用组件库</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042335079.png"                                     ></p><ul><li>创建完成后的信息如下：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042335792.png"                                     ></p><h1 id="注册-cocoapods-账户"><a href="#注册-cocoapods-账户" class="headerlink" title="注册 cocoapods 账户"></a>注册 cocoapods 账户</h1><ul><li><p>先安装 <code>cocoapods</code>，这个很简单，可以百度搜索自行安装</p></li><li><p>想要创建一个开源 <code>pod</code> 库，首先我们需要注册 <code>cocoapods账户</code>，基于 <code>cocoapods</code> 已经安装好的前提下，这里直接使用 <code>trunk</code> 去注册 <code>cocopods账户</code>，在终端执行：</p></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pod trunk register 邮箱地址 &#x27;用户名&#x27; --verbose</span><br><span class="line">mac@bogon ~ % pod trunk register 13718004742@163.com &#x27;BboyZJ&#x27; --verbose</span><br></pre></td></tr></table></figure></div><p>邮箱地址：一般会使用 GitHub邮箱<br>用户名：随便</p><ul><li>注册之后，在邮箱会受到确认邮件</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042335229.png"                                     ></p><ul><li>注册成功之后可以在终端 <code>验证是否注册成功</code>：</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 验证是否注册成功</span><br><span class="line">mac@bogon ~ % pod trunk me</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ul><li>查看注册信息，以后可以使用该开源pod库发布工具，也可以通过此方式查看已经发布过的pods：</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mac@bogon ~ % pod trunk me</span><br><span class="line">  - Name:     BboyZJ</span><br><span class="line">  - Email:    13718004742@163.com</span><br><span class="line">  - Since:    October 20th, 2021 19:20</span><br><span class="line">  - Pods:</span><br><span class="line">    - ZJSDKDemo</span><br><span class="line">    - ZJSDK_iOS</span><br><span class="line">  - Sessions:</span><br><span class="line">    - October 20th, 2021 19:20 - March 31st, 2022 04:01. IP: 114.253.15.66 </span><br><span class="line">    Description: imac</span><br><span class="line">    - February 27th, 02:33     -        July 5th, 02:37. IP:</span><br><span class="line">    114.252.233.188</span><br></pre></td></tr></table></figure></div><h1 id="在本地创建pod库"><a href="#在本地创建pod库" class="headerlink" title="在本地创建pod库"></a>在本地创建pod库</h1><ul><li>利用pod命令创建名为 <code>ZJWeakProxy</code> 的 <code>pod</code> 库</li></ul><p>注：这个名字要和 <code>GitHub</code> 创建的 <code>Repository</code> 名一致</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># cd 到桌面文件夹(组件文件夹)ZJComponent目录下，这个不强制随意</span><br><span class="line">mac@bogon ~ % cd ZJComponent </span><br><span class="line"># 执行 pod lib create ZJWeakProxy</span><br><span class="line">mac@bogon ~ % pod lib create ZJWeakProxy</span><br></pre></td></tr></table></figure></div><ul><li>出现 fatal: unable to access ‘<a class="link"   href="https://github.com/CocoaPods/pod-template.git/" >https://github.com/CocoaPods/pod-template.git/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>‘: HTTP&#x2F;2 stream 1 was not closed cleanly before end of the underlying stream 报错</li></ul><p>原因分析：一般这是因为服务器的 <code>SSL</code> 证书没有经过第三方机构的签署，所以才报错</p><p>解决办法：解除 <code>SSL</code> 验证，再次执行</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mac@bogon ZJComponent % git config --global http.sslVerify false</span><br></pre></td></tr></table></figure></div><ul><li>执行完上述命令后，会问你几个问题，按需求填写即可</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 你想使用哪个平台？</span><br><span class="line">1、What platform do you want to use?? [ iOS / macOS ]</span><br><span class="line">iOS</span><br><span class="line"># 库语言选择？</span><br><span class="line">2、What language do you want to use?? [ Swift / ObjC ]</span><br><span class="line">ObjC</span><br><span class="line"># 是否需要一个demo工程，用于调试Pod？</span><br><span class="line">3、Would you like include a demo application with your library? [ Yes / No ]</span><br><span class="line">Yes</span><br><span class="line"># 你要使用哪个测试框架？</span><br><span class="line">4、Which testing frameworks will you use? [ Specta / Kiwi / None ]</span><br><span class="line">None</span><br><span class="line"># 是否要UI测试？</span><br><span class="line">5、Would you like to do view based testing? [ Yes / No ]</span><br><span class="line">NO</span><br><span class="line"># 类名前缀？</span><br><span class="line">6、What is your class prefix?</span><br><span class="line">ZJ</span><br></pre></td></tr></table></figure></div><ul><li>到这里 <code>pod</code> 库就创建完成了，它会自己打开刚才创建的pod库</li></ul><h1 id="工程目录介绍"><a href="#工程目录介绍" class="headerlink" title="工程目录介绍"></a>工程目录介绍</h1><ul><li>目录结构如下：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042336465.png"                                     ></p><p>【第1部分】：主要是用来编辑pod相关配置元数据区<br>【第2部分】：主要是用来验证pod效果区<br>【第3部分】：主要是用来 提供给别人使用暴露出来的pod，ReplaceMe空的可以删除，是提示我们可以添加自己的类</p><ul><li>配置 <code>podspec</code> 本地索引文件</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Pod::Spec.new do |s|</span><br><span class="line">  # 库名称</span><br><span class="line">  s.name             = &#x27;ZJWeakProxy&#x27;</span><br><span class="line">  # 版本号</span><br><span class="line">  s.version          = &#x27;0.1.0&#x27;</span><br><span class="line">  # 库简短介绍</span><br><span class="line">  s.summary          = &#x27;A short description of ZJWeakProxy.&#x27;</span><br><span class="line"></span><br><span class="line"># This description is used to generate tags and improve search results.</span><br><span class="line">#   * Think: What does it do? Why did you write it? What is the focus?</span><br><span class="line">#   * Try to keep it short, snappy and to the point.</span><br><span class="line">#   * Write the description between the DESC delimiters below.</span><br><span class="line">#   * Finally, don&#x27;t worry about the indent, CocoaPods strips it!</span><br><span class="line"></span><br><span class="line">  # 开源库描述</span><br><span class="line">  s.description      = &lt;&lt;-DESC</span><br><span class="line">TODO: Add long description of the pod here.</span><br><span class="line">                       DESC</span><br><span class="line">  # 开源库地址，或者是博客、社交地址等</span><br><span class="line">  s.homepage         = &#x27;https://github.com/BboyZJ/ZJWeakProxy&#x27;</span><br><span class="line">  # s.screenshots     = &#x27;www.example.com/screenshots_1&#x27;, &#x27;www.example.com/screenshots_2&#x27;</span><br><span class="line">  # 开源协议</span><br><span class="line">  s.license          = &#123; :type =&gt; &#x27;MIT&#x27;, :file =&gt; &#x27;LICENSE&#x27; &#125;</span><br><span class="line">  # 开源库作者</span><br><span class="line">  s.author           = &#123; &#x27;BboyZJ&#x27; =&gt; &#x27;13718004742@163.com&#x27; &#125;</span><br><span class="line">  # 开源库资源文件</span><br><span class="line">  s.source           = &#123; :git =&gt; &#x27;https://github.com/BBoyZJ/ZJWeakProxy.git&#x27;, :tag =&gt; s.version.to_s &#125;</span><br><span class="line">  # 社交网址</span><br><span class="line">  # s.social_media_url = &#x27;https://twitter.com/&lt;TWITTER_USERNAME&gt;&#x27;</span><br><span class="line">  # 开源库最低支持</span><br><span class="line">  s.ios.deployment_target = &#x27;10.0&#x27;</span><br><span class="line">  # 开源库源文件</span><br><span class="line">  s.source_files = &#x27;ZJWeakProxy/Classes/**/*&#x27;</span><br><span class="line">  # 添加图片等资源文件</span><br><span class="line">  # s.resource_bundles = &#123;</span><br><span class="line">  #   &#x27;ZJWeakProxy&#x27; =&gt; [&#x27;ZJWeakProxy/Assets/*.png&#x27;]</span><br><span class="line">  # &#125;</span><br><span class="line">  </span><br><span class="line">  # s.public_header_files = &#x27;Pod/Classes/**/*.h&#x27;</span><br><span class="line">  # 依赖系统库 多个用逗号隔开</span><br><span class="line">  # s.frameworks = &#x27;UIKit&#x27;, &#x27;MapKit&#x27;</span><br><span class="line">  # 引入第三方依赖库</span><br><span class="line">  # s.dependency &#x27;AFNetworking&#x27;, &#x27;~&gt; 2.3&#x27;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></div><p>【s.dependency】：设置依赖三方库或其他组件，多个库可以分开写多次</p><ul><li>需要注意如图：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/BboyZJ.github.io/assets/16779442070174.jpg"                                     ></p><ul><li><code>Readme</code> 主要是介绍这个组件的用途和使用，可以随时编辑。目前就确认一下自己的名字和邮箱就可以了</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042336844.png"                                     ></p><ul><li>协议文件，也是确认一下自己的名字和邮箱就可以了</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042337356.png"                                     ></p><h1 id="添加自己的类"><a href="#添加自己的类" class="headerlink" title="添加自己的类"></a>添加自己的类</h1><ul><li>打开pod库目录，删除ReplaceMe</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042337055.png"                                     ></p><ul><li>创建 <code>ZJWeakProxy</code> 简单类，声明一个打印函数，方便后续测试</li></ul><p><strong>注：创建类文件一定要放到 Classes 目录下</strong></p><p>.h 文件下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;ZJWeakProxy.h&quot;</span><br><span class="line"></span><br><span class="line">@interface ZJWeakProxy : NSProxy</span><br><span class="line">- (void)printZJWeakProxy;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></div><p>.m 文件下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;ZJWeakProxy.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation ZJWeakProxy</span><br><span class="line">- (void)printZJWeakProxy&#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;,__func__);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042338285.png"                                     ></p><ul><li>此时 <code>cd</code> 到 <code>Example</code> 路径下执行 <code>pod install</code> 命令，看看是否能将刚刚添加的库文件引入到工程中</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mac@bogon ~ % cd /Users/mac/Desktop/ZJComponent/ZJWeakProxy/Example </span><br><span class="line">mac@bogon Example % pod install</span><br></pre></td></tr></table></figure></div><p>如果成功会在Pods中看到：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042338860.png"                                     ></p><ul><li>可以到项目中导入头文件简单使用一下</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042343398.png"                                     ></p><p>证明是可用的</p><p>【注】：<code>CocoaPods</code> 工具的另外一个优点就是，多个组件依赖同一个组件时，它会自动帮你检测安装，而 <code>不会重复导入</code>。</p><h1 id="项目上传与发布"><a href="#项目上传与发布" class="headerlink" title="项目上传与发布"></a>项目上传与发布</h1><ul><li>cd到你的项目路径下，将项目上传到GitHub中（即刚刚创建的ZJWeakProxy公有库中），依次使用下列命令行，不要遗漏</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># cd 到 组件ZJWeakProxy路径下</span><br><span class="line">mac@bogon Example % cd /Users/mac/Desktop/ZJComponent/ZJWeakProxy</span><br><span class="line"># 添加github项目路径</span><br><span class="line">mac@bogon ZJWeakProxy % git remote add origin https://github.com/BboyZ/ZJWeakProxy.git</span><br><span class="line"># 添加文件</span><br><span class="line">mac@bogon ZJWeakProxy % git add .</span><br><span class="line"># 将暂存区里的改动提交到本地的版本库</span><br><span class="line">mac@bogon ZJWeakProxy % git commit -m &quot;first commit&quot;</span><br><span class="line"># 创建分支main</span><br><span class="line">mac@bogon ZJWeakProxy % git branch -M main</span><br><span class="line"># 提交版本号并push到main分支</span><br><span class="line">mac@bogon ZJWeakProxy % git push -u origin main</span><br></pre></td></tr></table></figure></div><ul><li>在执行 <code>git push -u origin main</code> 时，如果遇到需要输入用户名和密码：</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Username for &#x27;https://github.com&#x27;: BboyZJ</span><br><span class="line">Password for &#x27;https://BboyZJ@github.com&#x27;:</span><br></pre></td></tr></table></figure></div><p><strong>【注意】</strong>：这个 <code>密码</code> 不是你 <code>GitHub</code> 的登录密码，而是需要生成一个 <code>access tokens</code></p><ul><li>生成 <code>access token</code></li></ul><p>需要在 <code>GitHub</code> 个人设置页 -&gt; Settings -&gt; Developer Settings -&gt; Personal access tokens 中创建一个 <code>token</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042343972.png"                                     ></p><ul><li><p>Generate new token 生成新的 <code>token</code></p><ul><li>设置 <code>token</code> 的有效期 按需设置，访问权限等</li></ul><p>  <img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042344432.png"                                     ></p><ul><li><p>选择要授予令牌token的范围或权限</p></li><li><p>要使用token从命令行访问仓库，请选择repo</p></li></ul><p>  <img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042344063.png"                                     ></p><ul><li>要使用token从命令行删除仓库，请选择delete_repo</li></ul><p> <img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042344513.png"                                     ></p><ul><li>其他根据需要进行勾选</li></ul></li><li><p>点击 <code>Generate token</code> 生成 <code>token</code></p></li></ul><p><code>ghp_VcqgAmF...ZPJ2IGxu0</code></p><p>【注】：记得把这个 <code>token</code> 保存下来，因为下次再刷新这个页面的时候，你会看不到了</p><ul><li>在命令行输入完 <code>token</code> 密码</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Username for &#x27;https://github.com&#x27;: BboyZJ</span><br><span class="line">Password for &#x27;https://BboyZJ@github.com&#x27;: </span><br><span class="line">Enumerating objects: 91, done.</span><br><span class="line">Counting objects: 100% (91/91), done.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (83/83), done.</span><br><span class="line">Writing objects: 100% (91/91), 29.35 KiB | 2.45 MiB/s, done.</span><br><span class="line">Total 91 (delta 23), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (23/23), done.</span><br><span class="line">To https://github.com/BboyZJ/ZJWeakProxy.git</span><br><span class="line"> * [new branch]      main -&gt; main</span><br><span class="line">branch &#x27;main&#x27; set up to track &#x27;origin/main&#x27;.</span><br></pre></td></tr></table></figure></div><p>由上面看代表上传成功了</p><ul><li>打开浏览器 <a class="link"   href="https://github.com/BboyZJ/ZJWeakProxy" >https://github.com/BboyZJ/ZJWeakProxy <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> ，就可以看到你的pod库已经push上去了</li></ul><h1 id="打-tag-并发布到-Cocoapods"><a href="#打-tag-并发布到-Cocoapods" class="headerlink" title="打 tag 并发布到 Cocoapods"></a>打 tag 并发布到 Cocoapods</h1><p>至此，我们已经成功将本地的仓库关联并推送到远程仓库，现在我们需要发布一个可用的组件</p><ul><li>首先我们要给当前项目打一个 tag 版本号，在 podspec 中：</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.version           = &#x27;0.1.0&#x27;</span><br></pre></td></tr></table></figure></div><p>指定的版本号是 0.1.0 ，那么我们就同样打个 0.1.0 的 tag</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 打 tag </span><br><span class="line">mac@bogon ZJWeakProxy % git tag 0.1.0</span><br><span class="line">// 推送到远程</span><br><span class="line">mac@bogon ZJWeakProxy % git push --tags</span><br></pre></td></tr></table></figure></div><p>打 <code>tag</code> 默认在当前分支上，这里只有 <code>master</code> ，所以不用切换分支</p><h1 id="发布到-cocoapods"><a href="#发布到-cocoapods" class="headerlink" title="发布到 cocoapods"></a>发布到 cocoapods</h1><ul><li>我们创建的项目以及标签版本号都是沿用了 <code>podspec</code> 文件中的信息，因此可以直接验证 <code>podspec</code> 文件信息是否可以通过验证，<code>podspec</code> 文件的版本号一定要和 <code>tag</code> 保持一致</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mac@bogon ZJWeakProxy % pod spec link</span><br></pre></td></tr></table></figure></div><p>如果通过验证，那么你会看到类似下面的提示，绿色的 <code>passed validation</code></p><ul><li>首先要通过 <code>trunk</code> 注册生成一条会话：</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// pod trunk register 邮箱 用户名 描述</span><br><span class="line">mac@bogon ZJWeakProxy % pod trunk register 13718004742@163.com BboyZJ --description=ZJWeakProxy组件 </span><br></pre></td></tr></table></figure></div><p>然后去邮箱进行验证，验证成功会出现下面页面：</p><ul><li>现在，就可以将 podspec 提交给 CocoaPods 了。这个文件将是别人搜索你的组件的索引。</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mac@bogon ZJWeakProxy % pod trunk push ZJWeakProxy.podspec --allow-warnings</span><br></pre></td></tr></table></figure></div><ul><li>pod search 组件名</li></ul><p>上传完成之后，接可以通过 pod search ZJWeakProxy 搜索到自己的组件了，如果搜索不到，删除本地的搜索文件，命令 ：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mac@bogon ZJWeakProxy % rm ~/Library/Caches/CocoaPods/search_index.json</span><br></pre></td></tr></table></figure></div><p>重新 <code>search</code> 产生新的搜索文件，发布新版本则需要打新的 <code>tag</code>，重新编辑 <code>podspec</code> 文件，然后再次提交给 <code>CocoaPods</code>。</p><h1 id="集成到宿主工程"><a href="#集成到宿主工程" class="headerlink" title="集成到宿主工程"></a>集成到宿主工程</h1><p>经过上面的操作我们已经完成了组件的创建和发布，也支持了 Cocoapods 的集成。现在我们需要将该组件集成到宿主工程中去，使用方式和集成三方库是一样的。</p><ul><li>新建个带 <code>pod</code> 的项目 <code>Demo</code>，把我们做好的 <code>ZJWeakProxy</code> 加入 <code>podfile</code> 文件</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Uncomment the next line to define a global platform for your project</span><br><span class="line">platform :ios, &#x27;10.0&#x27;</span><br><span class="line"></span><br><span class="line">target &#x27;ZJWeakProxy-Demo&#x27; do</span><br><span class="line">  # Comment the next line if you don&#x27;t want to use dynamic frameworks</span><br><span class="line">  use_frameworks!</span><br><span class="line"></span><br><span class="line">  # ZJWeakProxy</span><br><span class="line">  pod &#x27;ZJWeakProxy&#x27;,:git =&gt;&quot;https://github.com/BboyZJ/ZJWeakProxy.git&quot;</span><br><span class="line">  </span><br><span class="line">  # Pods for ZJWeakProxy-Demo</span><br><span class="line"></span><br><span class="line">end </span><br></pre></td></tr></table></figure></div><ul><li>执行 pod install</li></ul><p><code>mac@bogon ZJWeakProxy-Demo % pod install</code></p><p>【问题1】安装报错：[!] Unable to find a specification for <code>ZJWeakProxy</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042344858.png"                                     ></p><p>解决办法：</p><p><code>mac@bogon ZJWeakProxy-Demo % pod repo update --verbose</code></p><p>【问题2】：HTTP&#x2F;2 stream 1 was not closed cleanly before end of the underlying stream</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042345578.png"                                     ></p><p>解决办法：更改默认通信协议</p><p><code>mac@bogon ZJWeakProxy-Demo % git config --global http.version HTTP/1.1</code></p><ul><li>引入头文件并打印结果</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042345740.png"                                     ></p><h1 id="版本更新与维护"><a href="#版本更新与维护" class="headerlink" title="版本更新与维护"></a>版本更新与维护</h1><ul><li><p>现在的 <code>ZJWeakProxy</code> 库已经在GitHub上托管了，以后维护这个项目就可以了（开始本地创建的ZJWeakProxy项目就可以删除了），管理GitHub仓库，有两种方案：</p><ul><li><p>可以使用命令行 git clone <a class="link"   href="https://github.com/BboyZJ/ZJWeakProxy" >https://github.com/BboyZJ/ZJWeakProxy <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></li><li><p>也可以使用 GitHub Desktop</p><ul><li>下载 <a class="link"   href="https://desktop.github.com/" >GitHub Desktop <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 登录你的用户名和密码，<code>File -&gt; Responsitory</code></li></ul></li></ul></li><li><p>其实 <code>GitHub Desktop</code> 更加可视化一些，上面History就是刚才git命令行的记录</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>终于写完了，哇哦😮！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;随着公司业务的不断发展，应用的代码体积将会越来越大，业务代码耦合也越来越多，代码量也是急剧增加&lt;/li&gt;
&lt;li&gt;如果仅仅完成代</summary>
      
    
    
    
    <category term="Component" scheme="https://www.bboyzj.cn/categories/Component/"/>
    
    
    <category term="组件化开发" scheme="https://www.bboyzj.cn/tags/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>OC组件化04：【方案一】本地组件化</title>
    <link href="https://www.bboyzj.cn/2023/03/04/OC%E7%BB%84%E4%BB%B6%E5%8C%9604%EF%BC%9A%E3%80%90%E6%96%B9%E6%A1%88%E4%B8%80%E3%80%91%E6%9C%AC%E5%9C%B0%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    <id>https://www.bboyzj.cn/2023/03/04/OC%E7%BB%84%E4%BB%B6%E5%8C%9604%EF%BC%9A%E3%80%90%E6%96%B9%E6%A1%88%E4%B8%80%E3%80%91%E6%9C%AC%E5%9C%B0%E7%BB%84%E4%BB%B6%E5%8C%96/</id>
    <published>2023-03-04T15:27:35.000Z</published>
    <updated>2023-03-04T15:31:43.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><code>本地组件化</code>：主要是通过在 <code>工程中创建library</code>，利用 <code>cocoapods</code> 的 <code>workspec</code> 进行本地管理，不需要将项目上传git，而是直接在本项目中以 <code>framework</code> 的方法进行调用</li></ul><h1 id="创建主工程"><a href="#创建主工程" class="headerlink" title="创建主工程"></a>创建主工程</h1><ul><li>首先创建一个名为 <code>Modularization</code> 的工程</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://user-images.githubusercontent.com/25925248/162391343-e72a3235-b07f-41da-9fbf-cca1a55c4e8b.jpg"                                     ></p><ul><li>集成 cocoapods，进行本地管理</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zhangjian@zhangjiandeMBP ~ % cd /Users/zhangjian/Desktop/Modularization </span><br><span class="line">zhangjian@zhangjiandeMBP Modularization % pod init</span><br><span class="line">Ignoring ffi-1.13.1 because its extensions are not built. Try: gem pristine ffi --version 1.13.1</span><br><span class="line">zhangjian@zhangjiandeMBP Modularization % pod install</span><br></pre></td></tr></table></figure></div><h1 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h1><p>假设有以下几个模块</p><ul><li><p><code>主工程</code>：承载主要的表层业务代码</p></li><li><p><code>Core</code>：独立存在，应用加密、接口请求等敏感代码</p></li><li><p><code>Base</code>：基类封装，拓展，基本的数据处理</p></li><li><p><code>Service</code>：服务层，封装业务工具类，例如网络层服务、持久化服务等</p></li><li><p><code>Pods</code>：三方依赖</p></li></ul><p>其中，各个模块间的关系如下图</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://user-images.githubusercontent.com/25925248/162391360-04089910-c38d-4859-b4f2-dfc4de229332.jpg"                                     ></p><p>下面，我们来进行模块的创建，以 <code>Core</code> 模块为例：</p><ul><li>选择  <code>File -&gt; new -&gt; project -&gt; iOS -&gt; Framework</code>，新建一个 <code>ZJCore</code> 模块</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://user-images.githubusercontent.com/25925248/162391370-c14294a9-e941-4a20-ad6d-edaa12a76afc.jpg"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://user-images.githubusercontent.com/25925248/162391384-d4ee6235-4b4c-49fb-b448-2416822359df.jpg"                                     ></p><ul><li>选择正确的 <code>Group</code> 和 <code>WorkSpace</code>（这里注意：创建的 <code>library</code> 最好放在 <code>主工程根目录下</code>，否则后续的 <code>podfile</code> 执行 <code>pod install</code> 会报错）</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://user-images.githubusercontent.com/25925248/162391398-93ed8a4d-7f60-48c5-af68-8db35d74d8c0.jpg"                                     ></p><p>创建成功后，看到的结果如下：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://user-images.githubusercontent.com/25925248/162392357-ddca5e46-b788-4d08-9af5-7e48c475bd1f.jpg"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://user-images.githubusercontent.com/25925248/162391438-632eac8a-b78a-4901-995f-f997caeea671.jpg"                                     ></p><ul><li>将创建的 <code>library</code> 的 <code>Build Settings -&gt; Mach-O Type</code> 修改为静态库 <code>Static Library</code></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://user-images.githubusercontent.com/25925248/162391454-6eb6908f-7e29-4e00-afb5-cad186bcc1c0.jpg"                                     ></p><h1 id="主工程调用Library"><a href="#主工程调用Library" class="headerlink" title="主工程调用Library"></a>主工程调用Library</h1><ul><li>在 <code>ZJCore</code> 中新建一个文件，并添加如下代码</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@interface ZJCoreSetting : NSObject</span><br><span class="line">// 声明属性</span><br><span class="line">@property (nonatomic,copy)NSString * name;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ZJCoreSetting</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></div><ul><li>在 <code>Build Phases -&gt; Headers -&gt; Public</code> 中将新建的文件拖拽到 <code>Puclic</code> 中，这样主工程才能访问该文件</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://user-images.githubusercontent.com/25925248/162391477-33f10151-72cd-48ae-9b9c-0ef6e22a1e4f.jpg"                                     ></p><ul><li>在ZJCore文件中添加引用</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://user-images.githubusercontent.com/25925248/162392415-896bf8dd-d51d-4d63-b548-babfc3101fc8.jpg"                                     ></p><ul><li>在主工程中，选择 <code>target -&gt; Frameworks,Libraries,and Embedded Content -&gt; + 号 -&gt; 添加 ZJCore</code>，只需要build主工程，library能够自动联编</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://user-images.githubusercontent.com/25925248/162392476-8813bdd9-e9e9-4508-80e5-40b5bd8101be.jpg"                                     ></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>首先 <code>#import &lt;ZJCore/ZJCoreSetting.h&gt;</code>，然后使用</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://user-images.githubusercontent.com/25925248/162392563-05712fc4-c7b3-4fde-ae68-05291475888b.jpg"                                     ></p><p>这里需要注意的是，子library之间的互相调用，与主工程调用library类似，主需要添加依赖、暴露header即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;本地组件化&lt;/code&gt;：主要是通过在 &lt;code&gt;工程中创建library&lt;/code&gt;，利用 &lt;code&gt;coc</summary>
      
    
    
    
    <category term="Component" scheme="https://www.bboyzj.cn/categories/Component/"/>
    
    
    <category term="组件化开发" scheme="https://www.bboyzj.cn/tags/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>OC组件化03：面向协议Protocol Class的使用</title>
    <link href="https://www.bboyzj.cn/2023/03/04/OC%E7%BB%84%E4%BB%B6%E5%8C%9603%EF%BC%9A%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AEProtocol-Class%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.bboyzj.cn/2023/03/04/OC%E7%BB%84%E4%BB%B6%E5%8C%9603%EF%BC%9A%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AEProtocol-Class%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2023-03-04T08:16:42.000Z</published>
    <updated>2023-03-04T14:56:27.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向协议-Protocol-Class"><a href="#面向协议-Protocol-Class" class="headerlink" title="面向协议 Protocol Class"></a>面向协议 Protocol Class</h1><ul><li><p>在 <code>URL Scheme路由</code> 和 <code>target-action</code> 方案中，都存在 硬编码、参数不明确问题：URL 、Target_ 、 Action_ 的硬编码，参数都是通过字典的形式传递，类型不明确。</p></li><li><p><code>面向接口</code> 的方式能够很好的解决这两个问题。</p></li></ul><h1 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h1><ul><li><p>中间件先注册 <code>Protocol</code> 和 <code>Class</code> 对应关系，将 <code>protocol</code> 和 <code>对应的类</code> 进行 <code>字典</code> 匹配</p></li><li><p>中间件返回 <code>Protocol</code> 对应的 <code>Class</code>，然后动态创建实例</p></li></ul><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ul><li>面向协议编程</li><li>安全性高</li><li>模块解耦</li></ul><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ul><li>无法多端通用</li><li>需要进行协议的注册</li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><ul><li>创建 <code>ZJProtocol.h</code> 协议类文件</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 将各个模块的协议统一放在一个文件中 ，在各个模块中依赖这个文件，实现其协议</span><br><span class="line">@protocol OneMoudleProtocol &lt;NSObject&gt;</span><br><span class="line">@required // 返回模块one</span><br><span class="line">+ (UIViewController *)oneMoudleVC;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@protocol OneDetailMoudleProtocol &lt;NSObject&gt;</span><br><span class="line">@required</span><br><span class="line">+ (UIViewController *)oneDetailMoudleVCWithParas:(NSDictionary *)paras;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></div><ul><li>创建 <code>ZJMediator</code> 协议管理类</li></ul><p>ZJMediator.h 文件下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@interface ZJMediator : NSObject</span><br><span class="line">// 单例</span><br><span class="line">+ (instancetype)shareManager;</span><br><span class="line">// 注册绑定</span><br><span class="line">- (void)registerProtocol:(Protocol *)protocol class:(Class)cls;</span><br><span class="line">// 获取类</span><br><span class="line">- (Class)classFromProtocol:(Protocol *)protocol;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></div><p>ZJMediator.m 文件下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;ZJMediator.h&quot;</span><br><span class="line">@interface ZJMediator ()</span><br><span class="line">@property (nonatomic,strong)NSMutableDictionary * protocolCache;</span><br><span class="line">@end</span><br><span class="line">@implementation ZJMediator</span><br><span class="line">+ (instancetype)shareManager&#123;</span><br><span class="line">    static ZJMediator * mediator;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        mediator = [[ZJMediator alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    return mediator;</span><br><span class="line">&#125;</span><br><span class="line">// 注册绑定</span><br><span class="line">- (void)registerProtocol:(Protocol *)protocol class:(Class)cls&#123;</span><br><span class="line">    if (protocol &amp;&amp; cls) &#123;</span><br><span class="line">        [self.protocolCache setObject:cls forKey:NSStringFromProtocol(protocol)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 获取类</span><br><span class="line">- (Class)classFromProtocol:(Protocol *)protocol&#123;</span><br><span class="line">    return  [self.protocolCache objectForKey:NSStringFromProtocol(protocol)];</span><br><span class="line">&#125;</span><br><span class="line">// 懒加载</span><br><span class="line">- (NSMutableDictionary *)protocolCache&#123;</span><br><span class="line">    if (!_protocolCache) &#123;</span><br><span class="line">        _protocolCache = @&#123;&#125;.mutableCopy;</span><br><span class="line">    &#125;</span><br><span class="line">    return _protocolCache;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ul><li>创建 <code>OneDetailMoudleEntry</code> 模块</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;OneDetailMoudleEntry.h&quot;</span><br><span class="line">#import &quot;ZJOneDetailViewController.h&quot;</span><br><span class="line"></span><br><span class="line">@interface OneDetailMoudleEntry ()&lt;OneDetailMoudleProtocol&gt;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line">@implementation OneDetailMoudleEntry</span><br><span class="line">+ (void)load&#123;</span><br><span class="line">    [[ZJMediator shareManager] registerProtocol:@protocol(OneDetailMoudleProtocol) class:[self class]];</span><br><span class="line">&#125;</span><br><span class="line">// 继承</span><br><span class="line">+ (UIViewController *)WithParas:(NSDictionary *)paras&#123;</span><br><span class="line">    ZJOneDetailViewController * detailVC = [[ZJOneDetailViewController alloc] init];</span><br><span class="line">    detailVC.name = paras[@&quot;name&quot;];</span><br><span class="line">    detailVC.age = params[@&quot;age&quot;];</span><br><span class="line">    return detailVC;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></div><ul><li>在任何地方调用</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//下一页的点击事件</span><br><span class="line">- (void)next:(UIButton *)sender&#123;</span><br><span class="line">    </span><br><span class="line">    Class cls = [[ZJMediator shareManager] classFromProtocol:@protocol(OneDetailMoudleProtocol)];</span><br><span class="line">    UIViewController * detailVC = [cls oneDetailMoudleVCWithParas:@&#123;@&quot;name&quot;:@&quot;ZJ&quot;,@&quot;age&quot;:30&#125;];</span><br><span class="line">    [self.navigationController pushViewController:detailVC animated:YES];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面向协议-Protocol-Class&quot;&gt;&lt;a href=&quot;#面向协议-Protocol-Class&quot; class=&quot;headerlink&quot; title=&quot;面向协议 Protocol Class&quot;&gt;&lt;/a&gt;面向协议 Protocol Class&lt;/h1&gt;&lt;ul&gt;
</summary>
      
    
    
    
    <category term="Component" scheme="https://www.bboyzj.cn/categories/Component/"/>
    
    
    <category term="组件化开发" scheme="https://www.bboyzj.cn/tags/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>OC组件化03：基于RuntTime的target-action的使用</title>
    <link href="https://www.bboyzj.cn/2023/03/04/OC%E7%BB%84%E4%BB%B6%E5%8C%9603%EF%BC%9A%E5%9F%BA%E4%BA%8ERuntTime%E7%9A%84target-action%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.bboyzj.cn/2023/03/04/OC%E7%BB%84%E4%BB%B6%E5%8C%9603%EF%BC%9A%E5%9F%BA%E4%BA%8ERuntTime%E7%9A%84target-action%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2023-03-04T08:16:13.000Z</published>
    <updated>2023-03-04T15:12:11.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>target action 是利用 <code>Runtime</code> 的 <code>performSelector:withObject:</code> 方法调用，无需注册</p><h1 id="优缺"><a href="#优缺" class="headerlink" title="优缺"></a>优缺</h1><ul><li>优点：<code>无需注册路由</code>，避免了load里注册影响启动速度</li><li>不用维护全局路由表，避免了查找对应路由</li><li>统一了路由入口</li><li>进行了一定的安全处理</li></ul><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ul><li>缺点：不能多端使用同一套路由H5，Android</li><li>增加了文件，同时在获取target，sel时存在一定的硬编码</li></ul><h1 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;target action 是利用 &lt;code&gt;Runtime&lt;/code&gt; 的 &lt;code&gt;performSelector:withObj</summary>
      
    
    
    
    <category term="Component" scheme="https://www.bboyzj.cn/categories/Component/"/>
    
    
    <category term="组件化开发" scheme="https://www.bboyzj.cn/tags/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>OC组件化02：基于URL Scheme的使用</title>
    <link href="https://www.bboyzj.cn/2023/03/04/OC%E7%BB%84%E4%BB%B6%E5%8C%9602%EF%BC%9A%E5%9F%BA%E4%BA%8EURL-Scheme%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.bboyzj.cn/2023/03/04/OC%E7%BB%84%E4%BB%B6%E5%8C%9602%EF%BC%9A%E5%9F%BA%E4%BA%8EURL-Scheme%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2023-03-04T08:15:30.000Z</published>
    <updated>2023-03-04T15:02:44.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="URL-Scheme-路由"><a href="#URL-Scheme-路由" class="headerlink" title="URL Scheme 路由"></a>URL Scheme 路由</h1><ul><li>使 <code>URL Scheme</code> 处理本地的跳转</li><li>通过中间层进行注册 <code>&amp;</code> 调用（load方法里面把被调用者注册到中间层）</li></ul><h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//协议://主机名[:端口]/路径/[?参数]#fragment</span><br><span class="line">@&quot;lstest://lsapp:11111/china/ls.com?a=1&amp;b=2&quot;</span><br></pre></td></tr></table></figure></div><ul><li>lstest：协议名</li><li>lsapp：主机名，为了区分 不同的app</li><li>端口号：可以将端口号作为 模块ID</li><li>china&#x2F;ls.com：路径，可以是跳转到模块的 指定页面</li><li>a&#x3D;1&amp;b&#x3D;2：参数，跳转的参数</li></ul><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303042254171.png"                                     ></p><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><ul><li><p>优点：实现简单</p></li><li><p>缺点：存在硬编码问题，参数都是通过字典的形式传递，类型不明确</p></li></ul><h1 id="URL-Scheme-路由示例"><a href="#URL-Scheme-路由示例" class="headerlink" title="URL Scheme 路由示例"></a>URL Scheme 路由示例</h1><p>思路：B组件使用URL将Block注册给路由，路由以URL为key，将Block存储起来。<br>     A组件通过URL调用路由的方法，找到对应的Block，完成对A的调用</p><ul><li>创建路由</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;ZJRouter.h&quot;</span><br><span class="line"></span><br><span class="line">@interface ZJRouter ()</span><br><span class="line">@property (strong,nonatomic)NSMutableDictionary * blockDic;</span><br><span class="line">@end</span><br><span class="line">@implementation ZJRouter</span><br><span class="line">// 参数 @&#123;@&quot;&quot;:...&#125;</span><br><span class="line">+ (instancetype)shareInstance&#123;</span><br><span class="line">    static ZJRouter * router = nil;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        router = [[self alloc] init];</span><br><span class="line">        router.blockDic = @&#123;&#125;.mutableCopy;</span><br><span class="line">    &#125;);</span><br><span class="line">    return router;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 注册</span><br><span class="line">- (void)registerUrl:(NSString *)url block:(ZJRouterBlock)block&#123;</span><br><span class="line">    if (!url || !block) return;</span><br><span class="line">    if (block) &#123;</span><br><span class="line">        self.blockDic[url] = [block copy];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 执行</span><br><span class="line">- (void)excuteBlockWithUrl:(NSString *)key params:(NSDictionary *)params&#123;</span><br><span class="line">    if (!key) return;</span><br><span class="line">    ZJRouterBlock block = self.blockDic[key];</span><br><span class="line">    if (!block) return;</span><br><span class="line">    block(params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></div><ul><li>B 组件中注册</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ (void)load &#123;</span><br><span class="line">    [[ZJRouter shareInstance] registerUrl:@&quot;A:aTestAction&quot; block:^(NSDictionary * _Nonnull dic) &#123;</span><br><span class="line">        NSLog(@&quot;dic:%@&quot;,dic);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>A 组件中调用</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ZJRouter shareInstance] excuteBlockWithUrl:@&quot;A:aTestAction&quot; params:@&#123;@&quot;text&quot;:@&quot;文字&quot;&#125;];</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;URL-Scheme-路由&quot;&gt;&lt;a href=&quot;#URL-Scheme-路由&quot; class=&quot;headerlink&quot; title=&quot;URL Scheme 路由&quot;&gt;&lt;/a&gt;URL Scheme 路由&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使 &lt;code&gt;URL Scheme&lt;/</summary>
      
    
    
    
    <category term="Component" scheme="https://www.bboyzj.cn/categories/Component/"/>
    
    
    <category term="组件化开发" scheme="https://www.bboyzj.cn/tags/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>OC组件化01：组件化介绍</title>
    <link href="https://www.bboyzj.cn/2023/03/04/OC%E7%BB%84%E4%BB%B6%E5%8C%9601%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%8C%96%E4%BB%8B%E7%BB%8D/"/>
    <id>https://www.bboyzj.cn/2023/03/04/OC%E7%BB%84%E4%BB%B6%E5%8C%9601%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%8C%96%E4%BB%8B%E7%BB%8D/</id>
    <published>2023-03-04T06:05:40.000Z</published>
    <updated>2023-03-04T15:26:25.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么组件化"><a href="#什么组件化" class="headerlink" title="什么组件化"></a>什么组件化</h1><ul><li><p>组件化其实就是 <code>将模块单独抽离、分层</code>，并指定模块间的 <code>通讯</code> 方式，从而实现 <code>解耦</code> 的一种方式，主要运用与团队开发</p></li><li><p>组件化开发就是将一个臃肿的、单一的项目，根据 <code>功能/业务/技术</code> 等进行拆分，形成一个个独立的功能组件，然后借助 <code>Cocoapods</code> 管理工具将其任意组合，集成一个完整的项目。</p></li><li><p>你可以将 <code>AFNetworking、SDWebImage、Bugly、MLeaksFinder</code> 等三方库理解为工程的一部分，属于 <code>基础组件模块</code>，我们要做的就是将项目划分多个独立功能模块，再集成一个完整的项目。</p></li></ul><h1 id="为什么要组件化？"><a href="#为什么要组件化？" class="headerlink" title="为什么要组件化？"></a>为什么要组件化？</h1><p>主要有以下四个原因</p><ul><li><p>模块间解耦</p></li><li><p>模块重用</p></li><li><p>提高团队协作开发效率</p></li><li><p>单元测试</p></li></ul><p>当项目因为各种需求，模块越来越多时，如果此时的各个模块之间是互相调用的，即 <code>你中有我，我中有你</code> 这种情况时，会造成 <code>高耦合</code> 的情况，一旦我们需要对某一模块代码进行 <code>修改</code> 时，就会 <code>牵一发而动全身</code>，导致项目难以维护</p><p><strong>其问题主要体现在以下几个方面：</strong></p><ul><li><p>修改某个功能时，同时需要修改其他模块的代码，因为在其他模块中有该模块的引用，可以理解为 <code>高耦合导致代码修改困难</code></p></li><li><p>模块对外接口不明确，甚至暴露了本不该暴露的私有接口，修改时费时费力。可以理解为 <code>接口不固定导致的接口混乱</code></p></li><li><p>高耦合代码产生的后果就是会影响团队其他成员的开发，产生 <code>代码冲突</code></p></li><li><p>当模块需要重用到其他项目时，<code>难以单独抽离</code></p></li><li><p>模块间耦合的忌口导致接口和依赖关系混乱，<code>无法进行单元测试</code></p></li></ul><p>所以为了解决以上问题，我们需要采用更规范的方式来 <code>降低模块</code> 间的 <code>耦合度</code>，这就是 <code>组件化</code>，也可以理解为 <code>模块化</code></p><p>但是，这里还需要说明一点，因为组件化也是需要一定成本的，需要花费时间设计接口、分离代码等，所以并不是所有的项目都需要组件化。如果你的项目有以下这些特征就 <code>不需要组件化</code>：</p><ul><li><p>项目较小，模块间交互简单，耦合少</p></li><li><p>项目没有被多个外部模块引用，只是一个单独的小模块</p></li><li><p>模块不需要重用，代码也很少被修改</p></li><li><p>团队规模很小</p></li><li><p>不需要编写单元测试</p></li></ul><p>如果你的有以下特性，说明你就必须要 <code>考虑进行组件化</code> 了：</p><ul><li><p>模块逻辑复杂，多个模块之间频繁互相引用</p></li><li><p>项目规模逐渐变大，修改代码变的越来越困难（这里可以理解为：修改一处代码，需要同时修改其他多个地方）</p></li><li><p>团队人数变多，提交代码经常和其他成员冲突</p></li><li><p>项目编译耗时较大</p></li><li><p>模块的单元测试经常由于其他模块的修改而失败</p></li></ul><h1 id="组件化方案"><a href="#组件化方案" class="headerlink" title="组件化方案"></a>组件化方案</h1><p>组件化方案的8条指标：</p><p>一个项目经过组件化后如何来评判，主要有以下几个 <code>标准</code>：</p><ul><li><p>模块之间没有耦合，模块内部的修改不会影响其他模块</p></li><li><p>模块可以单独编译</p></li><li><p>模块间数据传递明确</p></li><li><p>模块对外接口清晰且易维护</p></li><li><p>当模块接口改变时，此模块的外部代码能够被高效重构</p></li><li><p>尽量用最少的修改和代码，让现有项目实现模块化</p></li><li><p>支持OC和Swift，以及混编</p></li></ul><p>前4条主要用于 <code>衡量一个模块是否真正解耦</code>，后4条主要用于衡量在项目中 <code>实践中的易用程序</code></p><p><strong>组件化原则</strong></p><p>一个项目主要分为3层：<code>业务层、通用层</code> 以及 <code>基础层</code>，在进行组件化时，有以下几点说明</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/20230304232513.png"                                     ></p><ul><li><p>只能上层对下层依赖，不能下层对上层依赖，因为下层是对上层的抽象</p></li><li><p>项目公共代码资源下沉</p></li><li><p>横向的依赖尽量减少，最好下层至通用模块，或者基础模块</p></li></ul><h1 id="组件化和非组件化区别"><a href="#组件化和非组件化区别" class="headerlink" title="组件化和非组件化区别"></a>组件化和非组件化区别</h1><p>组件化能够帮助我们将大部分项目拆解成数个小组件，开发者只需要关注组件所依赖的其他组件，而无需关心完整项目的其他部分，每个组件可以自己采取所习惯的架构模式：MVC、MVVM等，就行开发一款个人独立的App那样自由</p><p>非组件化：</p><ul><li>代码高耦合度、高依赖</li><li>项目复杂、臃肿、编译时间过长（影响调试）</li><li>难以融合、集成其他产品</li><li>…</li></ul><p>组件化：</p><ul><li>代码复用性提高，可方便集成到其他项目</li><li>项目可配置，方便集成和功能回退</li><li>方便组件并行开发</li><li>可方便单元测试</li><li>…</li></ul><h1 id="组件化分层"><a href="#组件化分层" class="headerlink" title="组件化分层"></a>组件化分层</h1><p>项目组件化，最难的就是 <code>粒度</code> 问题，需要开发者根据自己的经验把控。这里给出个人认为的层次划分：</p><p>【基础组件】：宏定义&#x2F;常量&#x2F;自定义工具类，如常用的自定义分类<br>【功能组件】：项目中常用的功能，如地图&#x2F;消息推送&#x2F;分享&#x2F;登录等<br>【业务组件】：项目中的模块&#x2F;业务，如文章详情&#x2F;个人中心等<br>【中间组件】：负责项目中的路由&#x2F;消息通知&#x2F;传参&#x2F;回调等<br>【宿主工程】：项目容器，用来集成组件，调整各个组件之间的消息传递容器</p><h1 id="中间层几种方案"><a href="#中间层几种方案" class="headerlink" title="中间层几种方案"></a>中间层几种方案</h1><p>在组件化中，中间层是各个组件的通信桥梁，中间层在组件化过程中扮演着非常重要的角色。</p><p>中间层的三种方式：</p><ul><li><p>基于 <code>URL Scheme</code> 的 <code>路由</code></p></li><li><p>基于 <code>Runtime</code> 的 <code>target-action</code></p></li><li><p>面向接口 的 <code>Protocol - Class</code></p></li></ul><h1 id="基于-URL-Scheme-的三方库"><a href="#基于-URL-Scheme-的三方库" class="headerlink" title="基于 URL Scheme 的三方库"></a>基于 URL Scheme 的三方库</h1><p><code>iOS</code> 中支持的 <code>URL Scheme</code> 让我们能够在 <code>应用之间、应用内部传递消息</code>。</p><ul><li><p><a class="link"   href="https://github.com/joeldev/JLRoutes" >JLRoutes <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></li><li><p><a class="link"   href="https://github.com/clayallsopp/routable-ios" >routable-ios <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></li><li><p><a class="link"   href="https://github.com/lightory/HHRouter" >HHRouter <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></li></ul><p>具体怎么使用，可以自行去探索</p><h1 id="基于-Runtime-的-target-action"><a href="#基于-Runtime-的-target-action" class="headerlink" title="基于 Runtime 的 target-action"></a>基于 <code>Runtime</code> 的 <code>target-action</code></h1><p>相比 <code>url scheme</code> 的提前注册、实现服务，<code>CTMediator</code> 借助 <code>OC</code> 运行时的特性，现实组件之间服务的自动发现，无需提前注册即可实现组件间的调用，因此，这种方案的可维护性、可读性、扩展性相对较高。</p><ul><li><a class="link"   href="https://github.com/casatwy/CTMediator" >CTMediator <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul><h1 id="面向接口-Protocol-Class"><a href="#面向接口-Protocol-Class" class="headerlink" title="面向接口 Protocol - Class"></a>面向接口 <code>Protocol - Class</code></h1><ul><li><code>Protocol - Class</code></li></ul><p>面向接口的方案通常由两部分组成，一个是用来管理接口协议的类（ProtocolManager），一个是具体的接口协议（ComponentProtocol）</p><h1 id="组件化的核心工具"><a href="#组件化的核心工具" class="headerlink" title="组件化的核心工具"></a>组件化的核心工具</h1><ul><li><p>组件化工程，需要一个宿主工程，负责集成所有的组件。每个组件都是一个单独的工程，通过 <code>Git</code> 私有仓库来管理。</p></li><li><p>所有组件都上传到 <code>Git</code> 仓库并支持 <code>cocoapods</code> 集成。主工程通过配置 <code>Podfile</code> 文件，然后一键 <code>pod update</code> 即可。使用 <code>Cocoapods</code> 来管理组件主要因为其本身功能强大，方便的集成整个项目，解放对依赖库的管理。使用组件化的集成方式，可以很好的避免传统项目中的代码冲突问题。</p></li><li><p>组件化的核心工具就是 <code>CocoaPods</code> ，我们要做的就是将组件项目上传到 <code>Gitee码云</code> 或者 <code>Gitlab极狐</code>，编写项目的 <code>podSpec</code> 文件让组件支持 <code>CocoaPods</code> 集成即可。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么组件化&quot;&gt;&lt;a href=&quot;#什么组件化&quot; class=&quot;headerlink&quot; title=&quot;什么组件化&quot;&gt;&lt;/a&gt;什么组件化&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;组件化其实就是 &lt;code&gt;将模块单独抽离、分层&lt;/code&gt;，并指定模块间的 &lt;code&gt;通讯&lt;</summary>
      
    
    
    
    <category term="Component" scheme="https://www.bboyzj.cn/categories/Component/"/>
    
    
    <category term="组件化开发" scheme="https://www.bboyzj.cn/tags/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Swift学习36：对象</title>
    <link href="https://www.bboyzj.cn/2023/03/04/Swift%E5%AD%A6%E4%B9%A036%EF%BC%9A%E5%AF%B9%E8%B1%A1/"/>
    <id>https://www.bboyzj.cn/2023/03/04/Swift%E5%AD%A6%E4%B9%A036%EF%BC%9A%E5%AF%B9%E8%B1%A1/</id>
    <published>2023-03-03T16:37:01.000Z</published>
    <updated>2023-03-03T16:37:01.597Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Swift学习35：函数式编程</title>
    <link href="https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A035%EF%BC%9A%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A035%EF%BC%9A%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</id>
    <published>2023-03-03T14:56:24.000Z</published>
    <updated>2023-03-03T14:56:24.662Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Swift学习34：闭包</title>
    <link href="https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A034%EF%BC%9A%E9%97%AD%E5%8C%85/"/>
    <id>https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A034%EF%BC%9A%E9%97%AD%E5%8C%85/</id>
    <published>2023-03-03T14:56:01.000Z</published>
    <updated>2023-03-03T16:29:27.954Z</updated>
    
    
    
    
    <category term="Swift" scheme="https://www.bboyzj.cn/categories/Swift/"/>
    
    
    <category term="Swift-学习篇" scheme="https://www.bboyzj.cn/tags/Swift-%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>Swift学习33：函数</title>
    <link href="https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A033%EF%BC%9A%E5%87%BD%E6%95%B0/"/>
    <id>https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A033%EF%BC%9A%E5%87%BD%E6%95%B0/</id>
    <published>2023-03-03T14:54:55.000Z</published>
    <updated>2023-03-03T17:08:35.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swift中如何定义和使用函数"><a href="#Swift中如何定义和使用函数" class="headerlink" title="Swift中如何定义和使用函数"></a>Swift中如何定义和使用函数</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p><code>函数是一个独立的代码块，用来执行特定的任务</code>。通过给函数一个名字来定义它的功能，并且在需要的时候，通过这个名字来 <code>调用</code> 函数执行它的任务</p></li><li><p><code>Swift统一的函数语法十分灵活</code>。可以从简单的无形式参数到复杂的每个形式参数都带有局部和外部形式参数名。形式参数提供一个默认值来简化函数的调用，可被当做输入输出形式参数被传递，在函数执行完成时修改传递进来的变量。</p></li><li><p><code>Swift中每一个函数都有类型，由函数的形式参数类型和返回类型组成</code> 。可以像swift中其它类型来使用它。可以将函数当一个形式参数传递到另外一个函数中。也可以在一个函数中返回另一个函数。同时也可以写在其他函数内部在内嵌范围封装有用的功能。</p></li><li><p>函数是 <code>引用类型</code> 的，不是值类型的</p></li></ul><h2 id="定义和调用函数"><a href="#定义和调用函数" class="headerlink" title="定义和调用函数"></a>定义和调用函数</h2><ul><li><p>当你定义一个函数时，可以 选择定义一个或多个形式参数类型，也可以定义返回类型</p></li><li><p>每个函数都有函数名，藐视执行的任务。</p></li><li><p>使用函数可通过 <code>函数名</code> 并且 <code>传入</code> 函数的 <code>实际参数</code> （即形式参数类型的输入值 ）来 <code>调用函数</code>。</p></li><li><p>实际参数顺序必须符合形式参数的列表顺序</p></li></ul><h2 id="无形式参数的函数"><a href="#无形式参数的函数" class="headerlink" title="无形式参数的函数"></a>无形式参数的函数</h2><ul><li><p>函数不要求必须传入一个参数，可以没有形式参数</p></li><li><p>函数定义需要在名字的后面加一个圆括号，即使没有形式参数也得加</p></li><li><p>调用函数的时候也要在函数的名字后面加一个圆括号</p></li></ul><h2 id="多形式参数的函数"><a href="#多形式参数的函数" class="headerlink" title="多形式参数的函数"></a>多形式参数的函数</h2><ul><li>函数可以输入多个形式参数，写在圆括号内，用逗号分割</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func manyPara(a:Int,b:Int) &#123;</span><br><span class="line">    pring(&quot;\(a) \(b)&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="无返回值的函数"><a href="#无返回值的函数" class="headerlink" title="无返回值的函数"></a>无返回值的函数</h2><ul><li><p>函数定义可以没有返回类型，即没有返回箭头 -&gt; 或返回类型</p></li><li><p>严格上，函数还是有一个返回类型的，尽管没有定义返回值，实际上返回一个特殊的类型 <code>void</code>。它是一个空的元组，作用相当于没有元素的元组，写作()</p></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func manyTuple() -&gt; void &#123;</span><br><span class="line">    return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="多返回值的函数"><a href="#多返回值的函数" class="headerlink" title="多返回值的函数"></a>多返回值的函数</h2><ul><li>可以让函数返回多个值作为一个复合的返回值，你可以使用元组类型作为返回类型</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func manyTuple() -&gt; (a:Int,b:String) &#123;</span><br><span class="line">    return (1,&quot;aaa&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="可选元组返回类型"><a href="#可选元组返回类型" class="headerlink" title="可选元组返回类型"></a>可选元组返回类型</h2><ul><li><p>如果在函数返回类型中元组可能 <code>没有值</code>，可以用可选元组说明元组可能是 <code>nil</code></p></li><li><p>写法是可选元组圆括号后面加一个问号 <code>？</code>，例如 (Int,Int)? 或 (String,Int,Bool)?</p></li></ul><p>示例：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 返回元组</span><br><span class="line">func minMax(arr: [Int]) -&gt; (min:Int,max:Int)? &#123;</span><br><span class="line">    if arr.isEmpty &#123;</span><br><span class="line">        return nil</span><br><span class="line">    &#125;</span><br><span class="line">    var minValue = arr[0]</span><br><span class="line">    var maxValue = arr[0]</span><br><span class="line">    for value in arr &#123;</span><br><span class="line">        if value &lt; minValue &#123;</span><br><span class="line">            minValue = value</span><br><span class="line">        &#125;</span><br><span class="line">        if value &gt; maxValue &#123;</span><br><span class="line">            maxValue = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return (minValue,maxValue)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 绑定</span><br><span class="line">if let minMaxValue = minMax(arr: [1,3,4,2,5]) &#123;</span><br><span class="line">    print(&quot;min is \(minMaxValue.min),max is \(minMaxValue.max)&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>编译运行，查看打印结果：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">min is 1,max is 5</span><br></pre></td></tr></table></figure></div><h2 id="隐士返回函数"><a href="#隐士返回函数" class="headerlink" title="隐士返回函数"></a>隐士返回函数</h2><ul><li>如果整个函数体是一个单一的表达式，那么函数隐士返回这个表达式</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func greet(person: String) -&gt; String&#123;</span><br><span class="line">    &quot;Hello,&quot; + person + &quot;!&quot;</span><br><span class="line">&#125;</span><br><span class="line">print(&quot;\(greet(person: &quot;World&quot;))&quot;)</span><br></pre></td></tr></table></figure></div><p>打印结果</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello,World!</span><br></pre></td></tr></table></figure></div><h1 id="Swift形式参数和返回值"><a href="#Swift形式参数和返回值" class="headerlink" title="Swift形式参数和返回值"></a>Swift形式参数和返回值</h1><h2 id="实参标签和形参名"><a href="#实参标签和形参名" class="headerlink" title="实参标签和形参名"></a>实参标签和形参名</h2><ul><li><p>每一个函数的形式参数都包含实际参数标签和形式参数名。</p></li><li><p>形式参数必须有唯一的名字，有助于代码易读</p></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func someFunc(firstParamName:Int,secondParamName:Int)&#123;</span><br><span class="line">    // 形式参数 firstParamName secondParamName</span><br><span class="line">&#125;</span><br><span class="line">someFunc(firstParamName: 1, secondParamName: 2)</span><br></pre></td></tr></table></figure></div><h2 id="指定实际参数标签"><a href="#指定实际参数标签" class="headerlink" title="指定实际参数标签"></a>指定实际参数标签</h2><ul><li><p>形式参数名之前写实际参数标签，用 <code>空格</code> 分割</p></li><li><p>如果你为 <code>形式参数</code> 定义了 <code>实际参数标签</code>，那么在调用函数的时候必须使用 <code>实际参数标签</code></p></li><li><p>实际参数标签能够让函数的调用更加明确，更像自然语言，更可读，更清晰表达你的意图</p></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 实际参数标签 home</span><br><span class="line">func greet(person: String, from home: String) -&gt; String &#123;</span><br><span class="line">    return &quot;Hello \(person)! my home is \(home)&quot;</span><br><span class="line">&#125;</span><br><span class="line">print(greet(person: &quot;ZJ&quot;,from: &quot;BeiJing&quot;))</span><br></pre></td></tr></table></figure></div><p>打印结果：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello ZJ! my home is BeiJing</span><br></pre></td></tr></table></figure></div><h2 id="省略实际参数标签"><a href="#省略实际参数标签" class="headerlink" title="省略实际参数标签"></a>省略实际参数标签</h2><ul><li>可以利用下划线 <code>_</code> 替代显示的实际参数标签</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func greet(_ person: String, _ home: String) -&gt; String &#123;</span><br><span class="line">    return &quot;Hello \(person)! my home is \(home)&quot;</span><br><span class="line">&#125;</span><br><span class="line">print(greet(person: &quot;ZJ&quot;,from: &quot;BeiJing&quot;))</span><br></pre></td></tr></table></figure></div><h2 id="默认形式参数值"><a href="#默认形式参数值" class="headerlink" title="默认形式参数值"></a>默认形式参数值</h2><ul><li><p>可以在形式参数类型后，给类型定义一个默认值</p></li><li><p>如果定义了默认值，你就可以在调用的时候省略这个形式参数</p></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func someFunc(paramDefault: Int = 10) &#123;</span><br><span class="line">    print(&quot;\(paramDefault)&quot;)</span><br><span class="line">&#125;</span><br><span class="line">someFunc(paramDefault: 6)</span><br><span class="line">someFunc()</span><br><span class="line"></span><br><span class="line">===========</span><br><span class="line">6</span><br><span class="line">10</span><br></pre></td></tr></table></figure></div><h2 id="可变形式参数"><a href="#可变形式参数" class="headerlink" title="可变形式参数"></a>可变形式参数</h2><ul><li><p>一个可变的形式参数可以接受零或多个特定类型的值。</p></li><li><p>通过在形式参数类型名后插入三个点符号 <code>...</code> 来书写可变形式参数。</p></li><li><p>传入到可变参数中的值在函数的主体中被当做是对应类型的 <code>数组</code>。</p></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func changeFunc(_ numbers: Double...) -&gt; Double &#123;</span><br><span class="line">    var total: Double = 0</span><br><span class="line">    for number in numbers &#123;</span><br><span class="line">        total += number</span><br><span class="line">    &#125;</span><br><span class="line">    return total / Double(numbers.count)</span><br><span class="line">&#125;</span><br><span class="line">changeFunc(1,2,3,4,5)</span><br><span class="line"></span><br><span class="line">=============</span><br><span class="line">3</span><br></pre></td></tr></table></figure></div><h2 id="输入输出形式参数"><a href="#输入输出形式参数" class="headerlink" title="输入输出形式参数"></a>输入输出形式参数</h2><ul><li><p>可变形式参数只能在函数的内部做改变。如果你想函数能修改一个形式参数的值，而且这些改变在函数结束之后依然生效，那么就需要将形式参数定义为输入输出形式参数</p></li><li><p>输入输出形式参数：在形式参数前边加 <code>inout</code> 关键字。</p></li><li><p>只能把 <code>变量</code> 作为输入输出形式参数的 <code>实际参数</code>，在将变量作为实际参数传入给输入输出形式参数时，在它前边添加一个符号 <code>&amp;</code> 来明确可以被函数修改</p></li><li><p>输入输出形式参数不能有默认值，可变形式参数不能被标记为 <code>inout</code></p></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 输入输出形式参数</span><br><span class="line">func swapTwoInt(_ a: inout Int, _ b: inout Int) &#123;</span><br><span class="line">    let temp = a</span><br><span class="line">    a = b</span><br><span class="line">    b = temp</span><br><span class="line">&#125;</span><br><span class="line">var one = 10</span><br><span class="line">var two = 20</span><br><span class="line">swapTwoInt(&amp;one,&amp;two)</span><br><span class="line">print(&quot;\(one) \(two)&quot;)</span><br><span class="line"></span><br><span class="line">=========</span><br><span class="line">20 10</span><br></pre></td></tr></table></figure></div><h1 id="函数类型和内嵌函数"><a href="#函数类型和内嵌函数" class="headerlink" title="函数类型和内嵌函数"></a>函数类型和内嵌函数</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Swift中如何定义和使用函数&quot;&gt;&lt;a href=&quot;#Swift中如何定义和使用函数&quot; class=&quot;headerlink&quot; title=&quot;Swift中如何定义和使用函数&quot;&gt;&lt;/a&gt;Swift中如何定义和使用函数&lt;/h1&gt;&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="Swift" scheme="https://www.bboyzj.cn/categories/Swift/"/>
    
    
    <category term="Swift-学习篇" scheme="https://www.bboyzj.cn/tags/Swift-%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>Swift学习32：Dictionary字典底层实现探索</title>
    <link href="https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A032%EF%BC%9ADictionary%E5%AD%97%E5%85%B8%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E6%8E%A2%E7%B4%A2/"/>
    <id>https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A032%EF%BC%9ADictionary%E5%AD%97%E5%85%B8%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E6%8E%A2%E7%B4%A2/</id>
    <published>2023-03-03T14:54:19.000Z</published>
    <updated>2023-03-03T14:54:19.622Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Swift学习32：Dictionary字典</title>
    <link href="https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A032%EF%BC%9ADictionary%E5%AD%97%E5%85%B8/"/>
    <id>https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A032%EF%BC%9ADictionary%E5%AD%97%E5%85%B8/</id>
    <published>2023-03-03T14:54:00.000Z</published>
    <updated>2023-03-03T14:54:00.489Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Swift学习31：Set底层实现探究</title>
    <link href="https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A031%EF%BC%9ASet%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E6%8E%A2%E7%A9%B6/"/>
    <id>https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A031%EF%BC%9ASet%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E6%8E%A2%E7%A9%B6/</id>
    <published>2023-03-03T14:53:34.000Z</published>
    <updated>2023-03-03T14:53:34.196Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Swift学习30：Set集合</title>
    <link href="https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A030%EF%BC%9ASet%E9%9B%86%E5%90%88/"/>
    <id>https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A030%EF%BC%9ASet%E9%9B%86%E5%90%88/</id>
    <published>2023-03-03T14:52:43.000Z</published>
    <updated>2023-03-03T14:52:43.195Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Swift学习29：如何用数组来实现栈和队列</title>
    <link href="https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A029%EF%BC%9A%E5%A6%82%E4%BD%95%E7%94%A8%E6%95%B0%E7%BB%84%E6%9D%A5%E5%AE%9E%E7%8E%B0%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <id>https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A029%EF%BC%9A%E5%A6%82%E4%BD%95%E7%94%A8%E6%95%B0%E7%BB%84%E6%9D%A5%E5%AE%9E%E7%8E%B0%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</id>
    <published>2023-03-03T14:51:03.000Z</published>
    <updated>2023-03-03T14:51:03.634Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Swift学习28：数组的底层实现</title>
    <link href="https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A028%EF%BC%9A%E6%95%B0%E7%BB%84%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/"/>
    <id>https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A028%EF%BC%9A%E6%95%B0%E7%BB%84%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-03-03T14:50:24.000Z</published>
    <updated>2023-03-03T14:50:24.173Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Swift学习27：访问和操作数组</title>
    <link href="https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A027%EF%BC%9A%E8%AE%BF%E9%97%AE%E5%92%8C%E6%93%8D%E4%BD%9C%E6%95%B0%E7%BB%84/"/>
    <id>https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A027%EF%BC%9A%E8%AE%BF%E9%97%AE%E5%92%8C%E6%93%8D%E4%BD%9C%E6%95%B0%E7%BB%84/</id>
    <published>2023-03-03T14:49:55.000Z</published>
    <updated>2023-03-03T14:49:55.779Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Swift学习26：创建数组的几种方式</title>
    <link href="https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A026%EF%BC%9A%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A026%EF%BC%9A%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2023-03-03T14:49:30.000Z</published>
    <updated>2023-03-03T14:49:30.624Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>OC三方框架01：bugly搜集Crash</title>
    <link href="https://www.bboyzj.cn/2023/03/03/OC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B601%EF%BC%9Abugly%E6%90%9C%E9%9B%86Crash/"/>
    <id>https://www.bboyzj.cn/2023/03/03/OC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B601%EF%BC%9Abugly%E6%90%9C%E9%9B%86Crash/</id>
    <published>2023-03-03T08:17:48.000Z</published>
    <updated>2023-03-03T12:11:09.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bugly-介绍"><a href="#Bugly-介绍" class="headerlink" title="Bugly 介绍"></a>Bugly 介绍</h1><p>为了能够快速并准确的定位用户 <code>App</code> 发生 <code>Crash</code> 的代码位置，<code>Bugly</code> 使用 <code>符号表文件</code> 对发生 <code>Crash</code> 的程序 <code>堆栈</code> 进行 <code>解析和还原</code></p><p>举例：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303031701073.png"                                     ></p><h1 id="Bugly-上传方式"><a href="#Bugly-上传方式" class="headerlink" title="Bugly 上传方式"></a>Bugly 上传方式</h1><ul><li><p><code>Bugly</code> 已不再支持直接上传dSYM文件，需要 <code>下载工具包手动上传</code></p></li><li><p>本文主要介绍 <code>下载工具包手动上传</code></p></li></ul><h1 id="安装java运行环境"><a href="#安装java运行环境" class="headerlink" title="安装java运行环境"></a>安装java运行环境</h1><ul><li>终端查看是否已安装</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zhangjian@zhangjiandeMBP ~ % java -version</span><br><span class="line">java version &quot;1.8.0_291&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_291-b10)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.291-b10, mixed mode)</span><br></pre></td></tr></table></figure></div><p>上面的显示表示已安装</p><ul><li>未安装的情况如下：</li></ul><p>到 <a class="link"   href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" >Java官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 下载 <code>jdk</code>，如下图：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303031621953.png"                                     ></p><p>下载完成之后打开 <code>dmg</code>，安装、一路下一步即可安装成功。</p><p>在终端输入 <code>java -version</code> 可以查看 <code>java</code> 版本，如果输出信息和上面类似，表示安装成功</p><h1 id="获取-dSYM-文件"><a href="#获取-dSYM-文件" class="headerlink" title="获取 dSYM 文件"></a>获取 <code>dSYM</code> 文件</h1><ul><li><p>什么是 <code>dSYM</code> 文件？</p><ul><li><p>在 <code>iOS</code> 平台中，dSYM文件是指 <code>具有调试信息的目标文件</code>，文件名通常为 <code>xxx.app.dSYM</code></p></li><li><p>【注】：为了方便找回 <code>Crash</code> 对应的 <code>dSYM文件</code> 和 <code>还原堆栈</code>，建议每次 <code>构建或发布App版本</code> 时，备份好 <code>dSYM文件</code></p></li></ul></li><li><p>获取 <code>dSYM</code> 方式</p></li></ul><p>我们可以配置 <code>Edit Scheme -&gt; Archives</code> 打包 <code>Debug</code> 和 <code>Release</code> 两种环境，去获取 <code>dSYM文件</code>，本文以 <code>Release</code> 发布环境为例</p><ul><li>配置打包环境 <code>Release</code></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303031812947.png"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303031812648.png"                                     ></p><ul><li>Show in Finder -&gt; 显示包内容，找到 <code>dSYM文件</code></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/BboyZJ.github.io/assets/16778361825767.jpg"                                     ></p><ul><li>最后，在桌面或任意位置，新建一个文件夹如 <code>appdSYM</code> ，将 <code>xxx.app.dSYM</code> 拷贝进来</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303031739055.png"                                     ></p><p>至此，获取 <code>dSYM文件</code> 完成</p><h1 id="工具手动上传符号表"><a href="#工具手动上传符号表" class="headerlink" title="工具手动上传符号表"></a>工具手动上传符号表</h1><ul><li>下载 <code>Bugly</code>  iOS <a class="link"   href="https://bugly.qq.com/v2/downloads" >符号表 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 上传工具，如下图：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303031923224.png"                                     ></p><ul><li>我们需要用到的是 <code>buglySymboliOS.jar</code> 文件，单独放在一个新建的空文件夹如 <code>buglySymboliOS</code> 里面</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303031813454.png"                                     ></p><ul><li>下载后得到 <code>buglyqq-upload-symbol</code> 文件，解压里面 <code>jar包</code>，得到 <code>buglySymboliOS.jar 包</code></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/BboyZJ.github.io/assets/16778418003131.jpg"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/BboyZJ.github.io/assets/16778418971136.jpg"                                     ></p><ul><li>通过终端命令行上传</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar buglyqq-upload-symbol.jar -appid c4f4e4dc67 -appkey cb791b15-dbe1-44d9-bd33-b3fe558b773b -bundleid cn.epod.srsf -version 1.6.2 -platform IOS -inputSymbol /Users/mac/Desktop/appdSYM/中图云书房.app.dSYM</span><br></pre></td></tr></table></figure></div><p>【参数说明】：</p><p>-addid ：在 bugly 上对应的 appid     c4f4e4dc67<br>-appkey ：在 bugly 上对应的 appkey<br>-bundleid ： iOS平台的 bundle id    cn.epod.srsf<br>-version ：版本号  1.6.2<br>-platform ：平台（注意大小写）IOS Android<br>-inputSymbol ：dSYM调试文件 &#x2F;Users&#x2F;mac&#x2F;Desktop&#x2F;appdSYM&#x2F;中图云书房.app.dSYM</p><h1 id="项目中使用"><a href="#项目中使用" class="headerlink" title="项目中使用"></a>项目中使用</h1><ul><li>项目需要集成cocoapods三方依赖管理工具，用cocoapods集成 <code>Bugly</code> SDK</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">platform :ios, &#x27;9.0&#x27;</span><br><span class="line"></span><br><span class="line"># 忽略所有警告</span><br><span class="line">inhibit_all_warnings!</span><br><span class="line"></span><br><span class="line">target &#x27;SRSF&#x27; do</span><br><span class="line">  # Comment the next line if you don&#x27;t want to use dynamic frameworks</span><br><span class="line">  use_frameworks!</span><br><span class="line"></span><br><span class="line">  # Pods for SRSF</span><br><span class="line">  # 官方提示：三方动态库最好最多是6个</span><br><span class="line">  </span><br><span class="line">  # Bugly</span><br><span class="line">  pod &#x27;Bugly&#x27;</span><br><span class="line">  </span><br><span class="line">  target &#x27;SRSFTests&#x27; do</span><br><span class="line">    inherit! :search_paths</span><br><span class="line">    # Pods for testing</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  target &#x27;SRSFUITests&#x27; do</span><br><span class="line">    # Pods for testing</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure></div><ul><li>使用</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark -Bugly</span><br><span class="line">- (void)startBugly&#123;</span><br><span class="line">    BuglyConfig * config = [[BuglyConfig alloc] init];</span><br><span class="line">    config.debugMode = YES; // Debug信息开关</span><br><span class="line">    config.reportLogLevel = BuglyLogLevelWarn; // 设置为BuglyLogLevelWarn，则在崩溃时会上报Warn、Error接口打印的日志</span><br><span class="line">    [Bugly startWithAppId:@&quot;AppId&quot; config:config];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Bugly-介绍&quot;&gt;&lt;a href=&quot;#Bugly-介绍&quot; class=&quot;headerlink&quot; title=&quot;Bugly 介绍&quot;&gt;&lt;/a&gt;Bugly 介绍&lt;/h1&gt;&lt;p&gt;为了能够快速并准确的定位用户 &lt;code&gt;App&lt;/code&gt; 发生 &lt;code&gt;Crash</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="OC-三方框架" scheme="https://www.bboyzj.cn/tags/OC-%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
</feed>
