<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张建的博客</title>
  <icon>https://www.gravatar.com/avatar/134cc2bfaf649e446f661778f4112fca</icon>
  <subtitle>成功的道路上只有荆棘，没有坦途</subtitle>
  <link href="https://www.bboyzj.cn/atom.xml" rel="self"/>
  
  <link href="https://www.bboyzj.cn/"/>
  <updated>2023-05-29T11:41:11.600Z</updated>
  <id>https://www.bboyzj.cn/</id>
  
  <author>
    <name>小J</name>
    <email>13718004742@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>性能优化04：Energy 耗电</title>
    <link href="https://www.bboyzj.cn/2023/09/10/OC%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9604%EF%BC%9AEnergy%20%E8%80%97%E7%94%B5/"/>
    <id>https://www.bboyzj.cn/2023/09/10/OC%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9604%EF%BC%9AEnergy%20%E8%80%97%E7%94%B5/</id>
    <published>2023-09-10T04:13:29.000Z</published>
    <updated>2023-05-29T11:41:11.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>所有应用程序在执行网络操作、更新用户界面或在CPU上运行代码时都会消耗能量。随着用户越来越多地依赖电池电量，以及应用程序的激增，能效已成为用户体验中不可或缺的一部分。</p><h1 id="电池寿命"><a href="#电池寿命" class="headerlink" title="电池寿命"></a>电池寿命</h1><p>随着能源效率的下降，<code>电池</code> 的寿命也会下降。同时消耗过多的资源会导致界面滞后，对用户输入的响应会很慢。随着越来越多的应用程序使用越来越多的资源，系统工作起来越来越努力，速度也越来越快，设备的物理温度也在逐渐升高。当这种情况发生时，系统会采取措施将温度降低到更容易接受的水平。</p><h1 id="能量消耗的因素"><a href="#能量消耗的因素" class="headerlink" title="能量消耗的因素"></a>能量消耗的因素</h1><ol><li><p>CPU: CPU是能源的主要消耗者。高CPU使用周期会迅速耗尽用户的电池。 CPU使用率超过20%就会快速耗干电池电量——建议只在必要时通过 <code>批处理、调度和优先级排序</code> 来完成工作。</p></li><li><p>GPU: 图形处理器(显卡的处理器)，乱使用GPU会导致交互差，并且降低电池寿命。</p></li><li><p>Network：大多数iOS应用程序执行网络操作。当联网发生时，蜂窝无线电和Wi-Fi等组件就会启动并消耗能量。通过 <code>批量处理和减少事务、压缩数据和适当处理错误</code>，您的应用程序可以为节能做出重大贡献。</p></li><li><p>Location: 许多应用程序发出位置请求是为了记录用户的物理活动或提供基于环境的警报。能量消耗随着精确度的提高和位置请求的延长而增加。你的应用应该尽可能减少定位活动的准确性和持续时间。当不再需要时停止位置请求。</p></li><li><p>Background: <code>后台</code> 状态App仍会消耗电量，App要按需执行后台操作，并使用延迟APNS来保证系统运算高效执行。另外，在app进入后台状态是，立即减少动作，并且通知系统一次这些动作已经完成</p></li><li><p>Bluetooth: 长时间的 <code>蓝牙</code> 活动会耗尽iOS设备和蓝牙设备的电池。只要可能，批处理和缓冲蓝牙活动，并减少对数据的轮询。</p></li><li><p>Device wakes：iOS设备依靠睡眠来延长电池寿命。无论设备何时唤醒，都会有很高的开销成本，因为必须为屏幕和其他资源提供电源。你的应用程序，尤其是在后台操作时，应该尽可能空闲，除非绝对必要，避免用推送通知或其他活动唤醒设备</p></li></ol><h1 id="分析工具"><a href="#分析工具" class="headerlink" title="分析工具"></a>分析工具</h1><ol><li><p>Time Profile：时间分析器分析模板。使用此模板对正在运行的进程执行低开销的基于时间的采样。Time Profiler 监视应用程序中正在运行的线程，并定期采样。为每个样本收集完整的回溯，允许您深入查看样本，以准确找到代码中花费大量时间的位置。</p></li><li><p>Animation Hitches：核心动画分析模板。使用此模板可以测量图形性能和CPU使用率。启用模板 Core Animation 的 <code>Flash Updated Regions</code> 设置，以查看应用中发生的每个屏幕更新，并观察不必要或意外的更新。</p></li><li><p>Activity Monitor: 活动监视器分析模板。使用此模板可以监视整体CPU，磁盘I&#x2F;O和网络使用情况。</p></li></ol><h1 id="Energy-log调试和演示"><a href="#Energy-log调试和演示" class="headerlink" title="Energy log调试和演示"></a>Energy log调试和演示</h1><ol><li>检查第一步，是通过xcode开发工具的 <code>energy impact</code> 来整体查看app的耗电情况。</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303231852146.png"                                     ></p><p>Overhead：表示开销，包括CPU的唤起，无线电模组(蓝牙&amp;WiFi)，和其他系统资源的调用等。</p><ol start="2"><li>检查第二步：通过instrument工具的 <code>energy log</code> 来检测具体的耗电模块。</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303231853126.png"                                     ></p><h1 id="耗电优化"><a href="#耗电优化" class="headerlink" title="耗电优化"></a>耗电优化</h1><ol><li>cpu层面的优化</li></ol><ul><li>尽量降低CPU</li><li>少使用定时器</li><li>优化I&#x2F;O操作<ul><li>写入数据最好一次性写入</li><li>读取数据最好使用GCD异步操作</li><li>数据流比较大，建议使用数据库</li></ul></li><li>适当使用多线程，不宜过多，不要阻塞主线程</li><li>优化算法，减少循环次数</li><li>避免庞大的 <code>xib、storyBoard</code>， 尽量使用纯代码开发</li></ul><ol start="2"><li>GPU 层面的优化</li></ol><ul><li>减少视图刷新，按需刷新；</li><li>尽量少使用圆角和透明度；</li></ul><ol start="3"><li>Network 网络请求层面的优化</li></ol><ul><li>减少、压缩网络数据</li><li>如果多次请求的结果是相同的，尽量使用缓存</li><li>使用断点续传，否则网络不稳定时可能多次传输相同的内容</li><li>网络不可用时，不要尝试执行网络请求</li><li>让用户可以取消长时间运行或者速度很慢的网络操作，设置合适的超时时间</li><li>批量传输，比如，下载视频流时，不要传输很小的数据包，直接下载整个文件或者一大块一大块地下载</li></ul><ol start="4"><li>Location 定位层面优化</li></ol><ul><li>如果只是需要快速确定用户位置，最好用CLLocationManager的requestLocation方法。定位完成后，会自动让定位硬件断电</li><li>如果不是导航应用，尽量不要实时更新位置，定位完毕就关掉定位服务</li><li>尽量降低定位精度，比如尽量不要使用精度最高的kCLLocationAccuracyBest</li><li>需要后台定位时，尽量设置pausesLocationUpdatesAutomatically为YES，如果用户不太可能移动的时候系统会自动暂停位置更新</li><li>尽量不要使用startMonitoringSignificantLocationChanges，优先考虑startMonitoringForRegion</li></ul><ol start="5"><li>Bluetooth, Background</li></ol><ul><li>蓝牙按需取用，定位之后要关闭或降低定位频率，进入后台关闭定位，停止定时器运行等</li></ul><ol start="4"><li>硬件检测优化(不常用)</li></ol><ul><li>用户移动、摇晃、倾斜设备时，会产生动作(motion)事件，这些事件由加速度计、陀螺仪、磁力计等硬件检测。在不需要检测的场合，应该及时关闭这些硬件</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;所有应用程序在执行网络操作、更新用户界面或在CPU上运行代码时都会消耗能量。随着用户越来越多地依赖电池电量，以及应用程序的激增，能效已成为用</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="性能优化" scheme="https://www.bboyzj.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>性能优化05：Network 网络</title>
    <link href="https://www.bboyzj.cn/2023/09/10/OC%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9605%EF%BC%9ANetwork%20%E7%BD%91%E7%BB%9C/"/>
    <id>https://www.bboyzj.cn/2023/09/10/OC%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9605%EF%BC%9ANetwork%20%E7%BD%91%E7%BB%9C/</id>
    <published>2023-09-10T04:13:29.000Z</published>
    <updated>2023-05-29T11:41:11.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="弱网优化"><a href="#弱网优化" class="headerlink" title="弱网优化"></a>弱网优化</h1><ul><li><p>所谓弱网络，指在网络不好的情况下使用APP，如 <code>2G、3G网络</code>，用户的网络速度基本在 <code>10k/s~60k/s</code>。</p></li><li><p>考虑海外应用的话，就必须考虑弱网优化的方案了。</p></li><li><p>苹果建议，使用苹果内置的 <code>Network Link Conditioner</code> 来模拟网络环境处理 <code>APP</code> 的体验问题，在Xcode和手机都可以开启</p></li></ul><h1 id="Xcode：系统偏好设置"><a href="#Xcode：系统偏好设置" class="headerlink" title="Xcode：系统偏好设置"></a>Xcode：系统偏好设置</h1><h1 id="iPhone：开发者-gt-Network-Link-Conditioner"><a href="#iPhone：开发者-gt-Network-Link-Conditioner" class="headerlink" title="iPhone：开发者 -&gt; Network Link Conditioner"></a>iPhone：开发者 -&gt; Network Link Conditioner</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;弱网优化&quot;&gt;&lt;a href=&quot;#弱网优化&quot; class=&quot;headerlink&quot; title=&quot;弱网优化&quot;&gt;&lt;/a&gt;弱网优化&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;所谓弱网络，指在网络不好的情况下使用APP，如 &lt;code&gt;2G、3G网络&lt;/code&gt;，用户的网络速度基</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="性能优化" scheme="https://www.bboyzj.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>性能优化06：启动优化</title>
    <link href="https://www.bboyzj.cn/2023/09/10/OC%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9606%EF%BC%9A%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96%202/"/>
    <id>https://www.bboyzj.cn/2023/09/10/OC%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9606%EF%BC%9A%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96%202/</id>
    <published>2023-09-10T04:13:29.000Z</published>
    <updated>2023-03-30T06:10:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>启动优化查看以下三篇文章：</p><p><a href="https://www.bboyzj.cn/2021/05/04/OC%E8%BF%9B%E9%98%B6/OC%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%8632%EF%BC%9A%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/">OC底层原理32：启动优化（一）基本概念</a></p><p><a href="https://www.bboyzj.cn/2021/05/11/OC%E8%BF%9B%E9%98%B6/OC%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%8633%EF%BC%9A%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE/">OC底层原理33：启动优化（二）优化建议</a></p><p><a href="https://www.bboyzj.cn/2021/05/17/OC%E8%BF%9B%E9%98%B6/OC%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%8634%EF%BC%9A%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/">OC底层原理34：启动优化（三）二进制重排</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;启动优化查看以下三篇文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bboyzj.cn/2021/05/04/OC%E8%BF%9B%E9%98%B6/OC%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%8632%EF%BC%9A%E5%</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="性能优化" scheme="https://www.bboyzj.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>性能优化06：启动优化</title>
    <link href="https://www.bboyzj.cn/2023/09/10/OC%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9606%EF%BC%9A%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/"/>
    <id>https://www.bboyzj.cn/2023/09/10/OC%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9606%EF%BC%9A%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/</id>
    <published>2023-09-10T04:13:29.000Z</published>
    <updated>2023-05-29T11:41:11.602Z</updated>
    
    <content type="html"><![CDATA[<p>启动优化查看以下三篇文章：</p><p><a href="https://www.bboyzj.cn/2021/05/04/OC%E8%BF%9B%E9%98%B6/OC%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%8632%EF%BC%9A%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/">OC底层原理32：启动优化（一）基本概念</a></p><p><a href="https://www.bboyzj.cn/2021/05/11/OC%E8%BF%9B%E9%98%B6/OC%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%8633%EF%BC%9A%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE/">OC底层原理33：启动优化（二）优化建议</a></p><p><a href="https://www.bboyzj.cn/2021/05/17/OC%E8%BF%9B%E9%98%B6/OC%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%8634%EF%BC%9A%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/">OC底层原理34：启动优化（三）二进制重排</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;启动优化查看以下三篇文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bboyzj.cn/2021/05/04/OC%E8%BF%9B%E9%98%B6/OC%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%8632%EF%BC%9A%E5%</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="性能优化" scheme="https://www.bboyzj.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>OC学习69：远程推送APNs</title>
    <link href="https://www.bboyzj.cn/2023/08/12/OC/OC%E5%AD%A6%E4%B9%A069%EF%BC%9A%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81APNs/"/>
    <id>https://www.bboyzj.cn/2023/08/12/OC/OC%E5%AD%A6%E4%B9%A069%EF%BC%9A%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81APNs/</id>
    <published>2023-08-12T06:09:31.000Z</published>
    <updated>2023-08-12T06:53:26.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是远程推送通知"><a href="#什么是远程推送通知" class="headerlink" title="什么是远程推送通知"></a>什么是远程推送通知</h1><ul><li>从远程服务器推送给客户端的通知，需要连接网络</li><li>远程推送服务，又称 APNs（Apple Push Notification Server，即苹果推送通知服务）</li></ul><h1 id="APNs"><a href="#APNs" class="headerlink" title="APNs"></a>APNs</h1><ul><li>只要手机联网了，不管App打开还是关闭都能接收到苹果服务器推送的通知</li><li>锁屏苹果设备在联网状态下都会与苹果服务器建立长连接，连接是双向的，苹果设备可以向苹果服务器发送请求，苹果服务器也可以向苹果设备发送请求</li></ul><h1 id="远程通知的过程"><a href="#远程通知的过程" class="headerlink" title="远程通知的过程"></a>远程通知的过程</h1><p>举个例子，微信App：</p><ul><li><p>首先每个联网并打开微信的App都与微信服务器有一个 <code>长连接</code>，当微信 <code>A用户</code> 向 <code>B用户</code> 发送一个消息时，微信 <code>A用户</code> 先将 <code>消息</code> 发送到 <code>微信服务器</code></p></li><li><p>然后微信服务器 <code>判断微信B用户</code> 是否与微信服务器建立了长连接，如果有直接通过 <code>微信B用户</code> 与 微信服务器建立的连接管道直接发送即可，这样微信 <code>B用户</code> 就能收到消息；</p></li><li><p>如果微信 <code>B用户</code> 此时 <code>没有打开微信App</code>，那么微信服务器就 <code>将消息发送给苹果服务器</code>，苹果服务器再将消息发送到某台苹果设备上。苹果是如何知道该发送给哪台设备呢？</p><ul><li><p>用户A发送消息时需要将 <code>用户B的 UDID 和微信App的 Bundle ID 附带在消息上</code> 一块发送给 B用户，这些消息微信服务器又发送给苹果服务器，苹果服务器通过 <code>UDID</code> 就知道发送给哪台设备了，然后通过 <code>Bundle ID</code> 知道发送给哪个App发送了</p></li><li><p>苹果根据 <code>UDID+Bundle ID</code> 生成一个 <code>deviceToken</code>，这样每天微信消息中都加上了 <code>deviceToken</code> 苹果服务器就能 <code>识别设备和App了</code></p></li></ul></li></ul><h1 id="获取-DeviceToken，并发送给-苹果服务器"><a href="#获取-DeviceToken，并发送给-苹果服务器" class="headerlink" title="获取 DeviceToken，并发送给 苹果服务器"></a>获取 DeviceToken，并发送给 苹果服务器</h1><ol><li>注册远程通知</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (void)remoteNotification&#123;</span><br><span class="line">    // 系统版本小于iOS 8.0</span><br><span class="line">    if ([[UIDevice currentDevice].systemVersion floatValue] &lt; 8.0) &#123;</span><br><span class="line">        UIRemoteNotificationType type = UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound;</span><br><span class="line">        [[UIApplication sharedApplication] registerForRemoteNotificationTypes:type];</span><br><span class="line">    &#125;else &#123; // 系统版本大于等于 8.0</span><br><span class="line">        UIUserNotificationType type = UIUserNotificationTypeAlert | UIUserNotificationTypeBadge | UIUserNotificationTypeSound;</span><br><span class="line">        UIUserNotificationSettings * settings = [UIUserNotificationSettings settingsForTypes:type categories:nil];</span><br><span class="line">        [[UIApplication sharedApplication] registerUserNotificationSettings:settings];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="2"><li>联网：注册通知之后，苹果服务器会将 DeviceToken 通过代理方法的形式返回</li></ol><p>这个代理方法会将 <code>手机UDID + App的Bundle ID</code> 发送给苹果服务器，苹果服务器进行某种编码之后再通过代理方法返回</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DeviceToken = (手机的UDID + App的Bundle ID) + 编码</span><br></pre></td></tr></table></figure></div><p>返回的 <code>DeviceToken</code> 是一个 <code>NSData</code> 类型，大概格式如下：&lt;7040f7d5 5a974598 c5cf31b5 3e340b39 68affd25 122f0ce1 3f315226 396c2e5b&gt;</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken&#123;</span><br><span class="line">    NSString * deviceToken_str = [[[[deviceToken description] stringByReplacingOccurrencesOfString:@&quot;&lt;&quot; withString:@&quot;&quot;] stringByReplacingOccurrencesOfString:@&quot;&gt;&quot; withString:@&quot;&quot;] stringByReplacingOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot;];</span><br><span class="line">    NSLog(@&quot;deviceToken_str:%@&quot;,deviceToken_str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ol start="3"><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是远程推送通知&quot;&gt;&lt;a href=&quot;#什么是远程推送通知&quot; class=&quot;headerlink&quot; title=&quot;什么是远程推送通知&quot;&gt;&lt;/a&gt;什么是远程推送通知&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;从远程服务器推送给客户端的通知，需要连接网络&lt;/li&gt;
&lt;li&gt;远程推送</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="OC-学习" scheme="https://www.bboyzj.cn/tags/OC-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>OC学习68：本地通知UserNotifications Framework</title>
    <link href="https://www.bboyzj.cn/2023/08/10/OC/OC%E5%AD%A6%E4%B9%A068%EF%BC%9A%E6%9C%AC%E5%9C%B0%E9%80%9A%E7%9F%A5UserNotifications%20Framework/"/>
    <id>https://www.bboyzj.cn/2023/08/10/OC/OC%E5%AD%A6%E4%B9%A068%EF%BC%9A%E6%9C%AC%E5%9C%B0%E9%80%9A%E7%9F%A5UserNotifications%20Framework/</id>
    <published>2023-08-10T08:35:12.000Z</published>
    <updated>2023-08-12T08:22:08.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>通知和推送</code> 是应用程序中很重要的组成部分。<code>本地通知</code> 可以为应用程序注册一些定时任务，例如闹钟、定时提醒等。<code>远程推送</code> 则更强大，提供了一种通过服务端主动推送消息到客户端的方式，服务端可以更加灵活地控制通知逻辑，例如广告的推送、定时任务的提醒、即时通信类应用离线消息的提醒等。本文先着重着介绍本地通知，由于iOS系统的不断更新，本地通知的API也需要根据设备的系统来进行选择和兼容。</p><ul><li><p>在 <code>iOS10</code> 之前，开发者需要使用 <code>UILocalNotification</code> 类来实现本地通知；</p></li><li><p>在 <code>iOS10</code> 之后，苹果为了加强对通知和推送的统一管理，提高通知界面的高可定制性，引入了<code>UserNotification</code> 框架。</p></li></ul><blockquote><p>注：本地通知不需要连接网络，一般是开发人员在合适的情况下，在App内发送通知。</p></blockquote><h1 id="UILocalNotification"><a href="#UILocalNotification" class="headerlink" title="UILocalNotification"></a>UILocalNotification</h1><ol><li>简介</li></ol><p><code>ULLocalNotification</code> 是 <code>iOS8</code> 中的一个类(In iOS 8.0 and later)，用来实现本地通知功能。通知，实际上是由iOS系统管理的一个功能，比如注册了通知，则系统会在通知被触发时给应用程序发送消息。但是，ULLocalNotification仅能提供开发者去编辑消息，消息推送到app上展示的样式和交互则是固定的，开发者自定制的难度相当大。</p><ol start="2"><li>添加步骤</li></ol><ul><li>创建通知对象</li><li>设置触发时间</li><li>设置通知属性</li><li>执行本地通知</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// 推送本地通知 iOS 10.0 及以下</span><br><span class="line">- (void)pushLocalNotificationIOS10AndBelowWithTime:(int)time</span><br><span class="line">                                             title:(NSString *)title</span><br><span class="line">                                              body:(NSString *)body</span><br><span class="line">                                           repeats:(BOOL)repeats</span><br><span class="line">                                        identifier:(NSString *)identifier&#123;</span><br><span class="line">    // 1.创建通知对象</span><br><span class="line">    UILocalNotification * notification = [[UILocalNotification alloc] init];</span><br><span class="line">     </span><br><span class="line">    // 2.设置触发通知的时间(几秒后发送)</span><br><span class="line">    NSDate * fireDate = [NSDate dateWithTimeIntervalSinceNow:time];</span><br><span class="line">    notification.fireDate = fireDate;</span><br><span class="line">    </span><br><span class="line">    // 3.设置通知属性</span><br><span class="line">    // 通知标题</span><br><span class="line">    notification.alertTitle = title;</span><br><span class="line">    // 通知主体</span><br><span class="line">    notification.alertBody = body;</span><br><span class="line">    // 待机界面开启左滑按钮</span><br><span class="line">    notification.hasAction = YES;</span><br><span class="line">    // 待机界面的滑动按钮提示</span><br><span class="line">    notification.alertAction = @&quot;点击查看消息&quot;;</span><br><span class="line">    // 在收到通知时播放的声音，默认消息声音</span><br><span class="line">    notification.soundName = UILocalNotificationDefaultSoundName;</span><br><span class="line">    // 设置启动屏</span><br><span class="line">//    notification.alertLaunchImage = @&quot;&quot;;</span><br><span class="line">    // 传递的用户数据</span><br><span class="line">//    notification.userInfo = @&#123;&#125;;</span><br><span class="line">    // 图标的消息数</span><br><span class="line">//    notification.applicationIconBadgeNumber = 1;</span><br><span class="line">    // 时区</span><br><span class="line">//     notification.timeZone = [NSTimeZone defaultTimeZone];</span><br><span class="line">    // 设置重复的间隔</span><br><span class="line">//     notification.repeatInterval = kCFCalendarUnitSecond;</span><br><span class="line">    </span><br><span class="line">     // 附加操作</span><br><span class="line">//    notification.category = @&quot;choose&quot;;</span><br><span class="line">    </span><br><span class="line">    // 4.执行本地通知</span><br><span class="line">    [[UIApplication sharedApplication] scheduleLocalNotification:notification];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>立即执行本地通知用：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div><ol start="3"><li>处理逻辑</li></ol><ul><li>申请通知授权</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 本地通知授权</span><br><span class="line">- (void)localNotificationAuthorizationIOS10AndBelow&#123;</span><br><span class="line">    // 如果已经得到授权，就直接添加本地通知，否则申请询问授权</span><br><span class="line">    if ([[UIApplication sharedApplication] currentUserNotificationSettings].types == UIUserNotificationTypeNone) &#123;</span><br><span class="line">        // 开始授权</span><br><span class="line">        UIUserNotificationSettings * notificationSettings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert | UIUserNotificationTypeSound categories:nil];</span><br><span class="line">        [[UIApplication sharedApplication] registerUserNotificationSettings:notificationSettings];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>推送本地通知</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">// 推送本地通知 iOS 10.0 及以下</span><br><span class="line">- (void)pushLocalNotificationIOS10AndBelowWithTime:(int)time</span><br><span class="line">                                             title:(NSString *)title</span><br><span class="line">                                              body:(NSString *)body</span><br><span class="line">                                           repeats:(BOOL)repeats</span><br><span class="line">                                        identifier:(NSString *)identifier&#123;</span><br><span class="line">    if ([[UIApplication sharedApplication] currentUserNotificationSettings].types == UIUserNotificationTypeNone) &#123;</span><br><span class="line">        [SVPManager showWithStatus:@&quot;请您在前往 设置-&gt;通用-&gt;零信任-&gt;通知-&gt;开启允许通知 权限，以便为您提供本地通知服务&quot; time:2];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 1.创建通知对象</span><br><span class="line">    UILocalNotification * notification = [[UILocalNotification alloc] init];</span><br><span class="line">     </span><br><span class="line">    // 2.设置触发通知的时间(几秒后发送)</span><br><span class="line">    NSDate * fireDate = [NSDate dateWithTimeIntervalSinceNow:time];</span><br><span class="line">    notification.fireDate = fireDate;</span><br><span class="line">    </span><br><span class="line">    // 3.设置通知属性</span><br><span class="line">    // 通知标题</span><br><span class="line">    notification.alertTitle = title;</span><br><span class="line">    // 通知主体</span><br><span class="line">    notification.alertBody = body;</span><br><span class="line">    // 待机界面开启左滑按钮</span><br><span class="line">    notification.hasAction = YES;</span><br><span class="line">    // 待机界面的滑动按钮提示</span><br><span class="line">    notification.alertAction = @&quot;点击查看消息&quot;;</span><br><span class="line">    // 在收到通知时播放的声音，默认消息声音</span><br><span class="line">    notification.soundName = UILocalNotificationDefaultSoundName;</span><br><span class="line">    // 设置启动屏</span><br><span class="line">//    notification.alertLaunchImage = @&quot;&quot;;</span><br><span class="line">    // 传递的用户数据</span><br><span class="line">//    notification.userInfo = @&#123;&#125;;</span><br><span class="line">    // 图标的消息数</span><br><span class="line">//    notification.applicationIconBadgeNumber = 1;</span><br><span class="line">    // 时区</span><br><span class="line">//     notification.timeZone = [NSTimeZone defaultTimeZone];</span><br><span class="line">    // 设置重复的间隔</span><br><span class="line">//     notification.repeatInterval = kCFCalendarUnitSecond;</span><br><span class="line">    </span><br><span class="line">    // 附加操作</span><br><span class="line">//    notification.category = @&quot;choose&quot;;</span><br><span class="line">    </span><br><span class="line">    // 4.执行本地通知</span><br><span class="line">    [[UIApplication sharedApplication] scheduleLocalNotification:notification];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>收到本地通知处理</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> App处于kill掉时，点击通知栏进入App，使用该方法接收本地（远程）通知</span><br><span class="line"> */</span><br><span class="line">- (void)receiveLocalNotificationWithLaunchOptions:(NSDictionary *)launchOptions&#123;</span><br><span class="line">    /*</span><br><span class="line">     App被kill掉，通过通知启动App</span><br><span class="line">     1.本地的 key - UIApplicationLaunchOptionsLocalNotificationKey</span><br><span class="line">     2.远程的 key - UIApplicationLaunchOptionsRemoteNotificationKey</span><br><span class="line">     */</span><br><span class="line">    if (launchOptions[UIApplicationLaunchOptionsLocalNotificationKey]) &#123;</span><br><span class="line">        UILocalNotification * notification = [launchOptions objectForKey:UIApplicationLaunchOptionsLocalNotificationKey];</span><br><span class="line">        [self handleLocalNotificationWithWithNotification:notification userInfo:launchOptions[UIApplicationLaunchOptionsLocalNotificationKey]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 处理本地通知</span><br><span class="line">- (void)handleLocalNotificationWithWithNotification:(UILocalNotification *)notification userInfo:(NSDictionary *)userInfo&#123;</span><br><span class="line">    NSLog(@&quot;title:%@ body:%@&quot;,notification.alertTitle,notification.alertBody);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>AppDelegate下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - 接收本地通知</span><br><span class="line">/*</span><br><span class="line"> App处于挂起或运行时，调用该方法接收本地（远程）通知</span><br><span class="line"> 1.当App在前台状态下，点击推送通知，会调用该方法</span><br><span class="line"> 2.当App在后台状态下，点击推送通知，会调用该方法（从锁屏界面点击推送通知也会执行）</span><br><span class="line"> */</span><br><span class="line">- (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification&#123;</span><br><span class="line">    NSLog(@&quot;%@&quot;,notification);</span><br><span class="line">    // 前台点击通知消息</span><br><span class="line">    if (application.applicationState == UIApplicationStateActive) &#123;</span><br><span class="line">        NSLog(@&quot;处理前台接受通知的业务&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    // 后台点击通知消息</span><br><span class="line">    else &#123;</span><br><span class="line">        NSLog(@&quot;处理后台台接受通知的业务&quot;);</span><br><span class="line">        [[LocalNotiManager sharedManager] handleLocalNotificationWithWithNotification:notification userInfo:notification.userInfo];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 当用户点击允许或者不允许时，会执行如下代理方法，我们在其中实现处理逻辑</span><br><span class="line">- (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings&#123;</span><br><span class="line">    NSLog(@&quot;当用户点击允许或者不允许时，会执行如下代理方法&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="4"><li>附加操作</li></ol><p>可以添加附加操作</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// 添加附加操作</span><br><span class="line">- (void)addCategoryAction&#123;</span><br><span class="line">    if ([[UIApplication sharedApplication] respondsToSelector:@selector(registerUserNotificationSettings:)]) &#123;</span><br><span class="line">        /*</span><br><span class="line">         推送通知的附加操作，可以为nil，此时只显示消息</span><br><span class="line">         如果不为nil，可以再推送消息的后面增加几个按钮（如同意、不同意）</span><br><span class="line">         */</span><br><span class="line">        UIMutableUserNotificationCategory * category = [UIMutableUserNotificationCategory new];</span><br><span class="line">        category.identifier = @&quot;choose&quot;;</span><br><span class="line">        </span><br><span class="line">        // 同意</span><br><span class="line">        UIMutableUserNotificationAction * action1 = [UIMutableUserNotificationAction new];</span><br><span class="line">        action1.identifier = @&quot;yes&quot;;</span><br><span class="line">        action1.title = @&quot;同意&quot;;</span><br><span class="line">        // 点击按钮是否进入前台</span><br><span class="line">        action1.activationMode = UIUserNotificationActivationModeForeground;</span><br><span class="line">        action1.authenticationRequired = true;</span><br><span class="line">        action1.destructive = false;</span><br><span class="line">        </span><br><span class="line">        // 不同意</span><br><span class="line">        UIMutableUserNotificationAction * action2 = [UIMutableUserNotificationAction new];</span><br><span class="line">        action2.identifier = @&quot;no&quot;;</span><br><span class="line">        action2.title = @&quot;不同意&quot;;</span><br><span class="line">        // 后台模式</span><br><span class="line">        action2.activationMode = UIUserNotificationActivationModeBackground;</span><br><span class="line">        action2.authenticationRequired = true;</span><br><span class="line">        action2.destructive = true;</span><br><span class="line">        </span><br><span class="line">        if ([[UIDevice currentDevice].systemVersion floatValue] &gt;= 9.0) &#123;</span><br><span class="line">            action2.behavior = UIUserNotificationActionBehaviorTextInput;</span><br><span class="line">            action2.parameters = @&#123;UIUserNotificationTextInputActionButtonTitleKey:@&quot;拒绝原因&quot;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        [category setActions:@[action1,action2] forContext:UIUserNotificationActionContextDefault];</span><br><span class="line">        </span><br><span class="line">        NSSet&lt;UIUserNotificationCategory *&gt; * categorys = [NSSet setWithObjects:category, nil];</span><br><span class="line">        </span><br><span class="line">        UIUserNotificationType type = UIUserNotificationTypeBadge | UIUserNotificationTypeAlert | UIUserNotificationTypeSound;</span><br><span class="line">        UIUserNotificationSettings * settings = [UIUserNotificationSettings settingsForTypes:type categories:categorys];</span><br><span class="line">        [[UIApplication sharedApplication] registerUserNotificationSettings:settings];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308121406320.png"                                     ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308121407871.png"                                     ></p><h1 id="UserNotification"><a href="#UserNotification" class="headerlink" title="UserNotification"></a>UserNotification</h1><ol><li>简介</li></ol><p><code>UserNotification</code> 是iOS10后苹果提出的一个整合的通知和推送框架，对之前的通知和推送功能进行了全面的重构和优化，功能更强大，定制更灵活。表现如下：</p><ul><li>通知处理代码从AppDelegate中剥离</li><li>通知的注册、设置、处理更加结构化，更易于进行模块的开发</li><li>支持自定义通知音效和启动图</li><li>支持向通知内容中添加媒体附件，例如音效、视频</li><li>支持开发者定义多套通知展示模块</li><li>支持完全自定义的通知界面</li><li>支持自定义通知中的用户交互按钮</li><li>通知的触发更加容易管理</li></ul><ol start="2"><li>核心类结构图</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308120907777.png"                                     ></p><ul><li>UNNotificationCenter：通知管理中心单例设计，负责通知的注册、接收通知后的回调处理等，是UserNofitication框架的核心。</li><li>UNNotification：通知对象，其中封装了通知请求</li><li>UNNoticationSettings：通知相关设置</li><li>UNNotificationCategory：通知模板</li><li>UNNotificationAction：用于定义通知模板中的用户交互行为</li><li>UNNotificationRequest：注册通知请求，其中定义了通知的内容和触发方式</li><li>UNNotificationResponse：接收到通知后的回执</li><li>UNNotificationContent：通知的具体内容</li><li>UNNotificationAttachment：通知所携带的附件，为通知内容添加</li><li>UNNotificationSound：定义通知音效, （音频文件必须位于bundle或者Library&#x2F;Sounds目录下）</li><li>UNNotificationTrigger：通知触发器，由其子类具体定义</li><li>UNPushNotificationTrigger：远程推送触发器，UNNotificationTrigger的子类</li><li>UNTimerInrevalNotificationTrigger：计时器触发器，UNNotificationTrigger的子类</li><li>UNCalendarNotificationTrigger：周期日历触发器，UNNotificationTrigger的子类</li><li>UNLocationNotificationTrigger：地域触发器，UNNotificationTrigger的子类</li><li>UNNotificationCenterDelegate：协议，其中方法用于监听通知状态</li></ul><p>注意：</p><ul><li>媒体附件大小</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308120910197.png"                                     ></p><ul><li><p>对于收到的附件通知，可以把消息下拉看到完整的附件内容（见下面的代码示例图所展示的样子）</p></li><li><p>内容附件实例中options配置字典键&#x2F;值作用，本示例代码中options默认置为nil</p></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">extern Nsstring *const UNNotificationAttachmentoptionsTypeHintkey:</span><br><span class="line">配置附件的类型的键，NSString类型的值，如果不设置，则默认从扩展名推断</span><br><span class="line"></span><br><span class="line">extern NSstring *const</span><br><span class="line">UNNotificationAttachmentoptionsThumbnailHiddenkey:</span><br><span class="line">配置是否隐藏缩路图，配置NSNumber类型的值 0或者1</span><br><span class="line"></span><br><span class="line">CGRectCreateDictionaryRepresentation(CGRect）：</span><br><span class="line">创建的矩形引用</span><br><span class="line"></span><br><span class="line">extern NSString *cost UNNotificationAttachmentOptionsThumbnailClippingRectKey:</span><br><span class="line">创建使用一个标准的矩形对缩略图进行裁剪</span><br><span class="line"></span><br><span class="line">extern NSString *const UNNotificationAttachmentoptionsThumbnailTimekey:</span><br><span class="line">使用视频中的某一帧作为缩略图，配置NSNumber类型的时间</span><br></pre></td></tr></table></figure></div><ul><li>附件资源放置位置Bundle目录下</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308120914033.png"                                     ></p><ol start="3"><li>权限申请 和 附件资源包位置(Bundle目录下)</li></ol><ul><li>权限申请</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 本地通知授权</span><br><span class="line">- (void)localNotificationAuthorizationIOS10AndAbove&#123;</span><br><span class="line">    // 使用 UNUserNotificationCenter 来管理通知</span><br><span class="line">    UNUserNotificationCenter * center = [UNUserNotificationCenter currentNotificationCenter];</span><br><span class="line">    // 设置通知中心的代理</span><br><span class="line">    center.delegate = self;</span><br><span class="line">    </span><br><span class="line">    // iOS 10.0使用以下方法注册，才能得到授权</span><br><span class="line">    [center requestAuthorizationWithOptions:(UNAuthorizationOptionAlert + UNAuthorizationOptionSound) completionHandler:^(BOOL granted, NSError * _Nullable error) &#123;</span><br><span class="line">        // 用户是否同意</span><br><span class="line">        if (granted) &#123;</span><br><span class="line">            NSLog(@&quot;用户同意授权&quot;);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            NSLog(@&quot;用户不同意授权&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="4"><li>推送本地通知</li></ol><ul><li>普通通知</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// 推送本地通知 iOS 10.0 及以上</span><br><span class="line">- (void)pushLocalNotificationIOS10AndAboveWithTime:(int)time</span><br><span class="line">                                             title:(NSString *)title</span><br><span class="line">                                              body:(NSString *)body</span><br><span class="line">                                           repeats:(BOOL)repeats</span><br><span class="line">                                        identifier:(NSString *)identifier&#123;</span><br><span class="line">    // 1.创建通知管理类</span><br><span class="line">    UNUserNotificationCenter * center = [UNUserNotificationCenter currentNotificationCenter];</span><br><span class="line">   </span><br><span class="line">    // 2.设置通知内容</span><br><span class="line">    UNMutableNotificationContent * content = [[UNMutableNotificationContent alloc] init];</span><br><span class="line">    // 设置通知请求发送时App图标上显示的数字</span><br><span class="line">//    content.badge = @1;</span><br><span class="line">    // 设置通知的标题</span><br><span class="line">    content.title = [NSString localizedUserNotificationStringForKey:title arguments:nil];</span><br><span class="line">    // 设置通知的副标题</span><br><span class="line">//    content.subtitle = @&quot;&quot;;</span><br><span class="line">    // 设置通知的主体</span><br><span class="line">    content.body = [NSString localizedUserNotificationStringForKey:body arguments:nil];</span><br><span class="line">    // 设置通知的提示音</span><br><span class="line">    content.sound = [UNNotificationSound defaultSound];</span><br><span class="line">    // 设置从通知激活App时的launchImage图片</span><br><span class="line">//    content.launchImageName = @&quot;&quot;;</span><br><span class="line">    </span><br><span class="line">    /* 3.设置触发器: 计时器触发</span><br><span class="line">     1.TimeInterval：时间间隔</span><br><span class="line">     2.repeats：是否重复*/</span><br><span class="line">    UNTimeIntervalNotificationTrigger * trigger = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:time repeats:repeats];</span><br><span class="line">    </span><br><span class="line">    /* 设置触发器: 周期日历触发 */</span><br><span class="line">//    NSDateComponents * components = [[NSDateComponents alloc] init];</span><br><span class="line">//    components.year = 2023;</span><br><span class="line">//    components.month = 11;</span><br><span class="line">//    components.day = 2;</span><br><span class="line">//    UNCalendarNotificationTrigger * trigger = [UNCalendarNotificationTrigger triggerWithDateMatchingComponents:components repeats:repeats];</span><br><span class="line">    </span><br><span class="line">    /* 设置触发器：地域触发 */</span><br><span class="line">//    CLRegion * region = [[CLCircularRegion alloc] initWithCenter:CLLocationCoordinate2DMake(33.0, 11.0) radius:100 identifier:@&quot;region&quot;];</span><br><span class="line">//    UNLocationNotificationTrigger * trigger = [UNLocationNotificationTrigger triggerWithRegion:region repeats:repeats];</span><br><span class="line">    </span><br><span class="line">    /*</span><br><span class="line">     4.设置通知请求</span><br><span class="line">     1.Identifier：通知标识</span><br><span class="line">     2.content：通知内容</span><br><span class="line">     3.trigger：触发器</span><br><span class="line">     */</span><br><span class="line">    UNNotificationRequest * request = [UNNotificationRequest requestWithIdentifier:identifier content:content trigger:trigger];</span><br><span class="line">    </span><br><span class="line">    // 5.添加通知请求</span><br><span class="line">    [center addNotificationRequest:request withCompletionHandler:^(NSError * _Nullable error) &#123;</span><br><span class="line">        if (error) &#123;</span><br><span class="line">            NSLog(@&quot;添加推送通知失败&quot;);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            NSLog(@&quot;添加推送通知成功&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>图片通知</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// 推送本地通知 iOS 10.0 及以上（图片）</span><br><span class="line">- (void)pushLocalNotificationIOS10AndAboveWithTime:(int)time</span><br><span class="line">                                           imgName:(NSString *)imgName</span><br><span class="line">                                             title:(NSString *)title</span><br><span class="line">                                              body:(NSString *)body</span><br><span class="line">                                           repeats:(BOOL)repeats</span><br><span class="line">                                        identifier:(NSString *)identifier&#123;</span><br><span class="line">    // 1.创建通知管理类</span><br><span class="line">    UNUserNotificationCenter * center = [UNUserNotificationCenter currentNotificationCenter];</span><br><span class="line">    </span><br><span class="line">    // 2.通知内容</span><br><span class="line">    UNMutableNotificationContent * content = [UNMutableNotificationContent new];</span><br><span class="line">    </span><br><span class="line">    /* 设置图片附件</span><br><span class="line">     attachments：数组，但系统的通知模板只能展示其中一个附件，设置多个附件也不会有额外的效果</span><br><span class="line">     但是如果开发者自定义通知模板UI，此数组就派上用场了</span><br><span class="line">     */</span><br><span class="line">    NSString * path = [[NSBundle mainBundle] pathForResource:imgName ofType:nil];</span><br><span class="line">    NSURL * url = [NSURL fileURLWithPath:path];</span><br><span class="line">    UNNotificationAttachment * attachment = [UNNotificationAttachment attachmentWithIdentifier:identifier URL:url options:nil error:nil];</span><br><span class="line">    content.attachments = @[attachment];</span><br><span class="line">    </span><br><span class="line">    // 设置通知的标题</span><br><span class="line">    content.title = [NSString localizedUserNotificationStringForKey:title arguments:nil];</span><br><span class="line">    // 设置通知的副标题</span><br><span class="line">//    content.subtitle = @&quot;&quot;;</span><br><span class="line">    // 设置通知请求时发送时App图标上显示的数字</span><br><span class="line">//    content.badge = @1;</span><br><span class="line">    // 设置通知的主体</span><br><span class="line">    content.body = body;</span><br><span class="line">    // 设置通知提示音</span><br><span class="line">    content.sound = [UNNotificationSound defaultSound];</span><br><span class="line">    // 设置从通知激活App时的launchImage图片</span><br><span class="line">//    content.launchImageName = @&quot;&quot;;</span><br><span class="line">    </span><br><span class="line">    /* 4.设置触发器: 计时器触发</span><br><span class="line">     1.TimeInterval：时间间隔</span><br><span class="line">     2.repeats：是否重复*/</span><br><span class="line">    UNTimeIntervalNotificationTrigger * trigger = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:time repeats:repeats];</span><br><span class="line">    </span><br><span class="line">    /*</span><br><span class="line">     4.设置通知请求</span><br><span class="line">     1.Identifier：通知标识</span><br><span class="line">     2.content：通知内容</span><br><span class="line">     3.trigger：触发器</span><br><span class="line">     */</span><br><span class="line">    UNNotificationRequest * request = [UNNotificationRequest requestWithIdentifier:identifier content:content trigger:trigger];</span><br><span class="line">    </span><br><span class="line">    // 5.添加通知请求</span><br><span class="line">    [center addNotificationRequest:request withCompletionHandler:^(NSError * _Nullable error) &#123;</span><br><span class="line">        if (error) &#123;</span><br><span class="line">            NSLog(@&quot;添加推送通知失败&quot;);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            NSLog(@&quot;添加推送通知成功&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>音频通知</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// 推送本地通知 iOS 10.0 及以上（音频）</span><br><span class="line">- (void)pushLocalNotificationIOS10AndAboveWithAudioName:(NSString *)audioName</span><br><span class="line">                                                   time:(int)time</span><br><span class="line">                                                  title:(NSString *)title</span><br><span class="line">                                                   body:(NSString *)body</span><br><span class="line">                                                repeats:(BOOL)repeats</span><br><span class="line">                                             identifier:(NSString *)identifier&#123;</span><br><span class="line">    // 1.创建通知管理类</span><br><span class="line">    UNUserNotificationCenter * center = [UNUserNotificationCenter currentNotificationCenter];</span><br><span class="line">    </span><br><span class="line">    // 2.通知内容</span><br><span class="line">    UNMutableNotificationContent * content = [UNMutableNotificationContent new];</span><br><span class="line">    </span><br><span class="line">    /* 设置音频附件</span><br><span class="line">     attachments：数组，但系统的通知模板只能展示其中一个附件，设置多个附件也不会有额外的效果</span><br><span class="line">     但是如果开发者自定义通知模板UI，此数组就派上用场了</span><br><span class="line">     */</span><br><span class="line">    NSString * path = [[NSBundle mainBundle] pathForResource:audioName ofType:nil];</span><br><span class="line">    NSURL * url = [NSURL fileURLWithPath:path];</span><br><span class="line">    UNNotificationAttachment * attachment = [UNNotificationAttachment attachmentWithIdentifier:identifier URL:url options:nil error:nil];</span><br><span class="line">    content.attachments = @[attachment];</span><br><span class="line">    </span><br><span class="line">    // 设置通知的标题</span><br><span class="line">    content.title = [NSString localizedUserNotificationStringForKey:title arguments:nil];</span><br><span class="line">    // 设置通知的副标题</span><br><span class="line">//    content.subtitle = @&quot;&quot;;</span><br><span class="line">    // 设置通知请求时发送时App图标上显示的数字</span><br><span class="line">//    content.badge = @1;</span><br><span class="line">    // 设置通知的主体</span><br><span class="line">    content.body = body;</span><br><span class="line">    // 设置通知提示音</span><br><span class="line">    content.sound = [UNNotificationSound defaultSound];</span><br><span class="line">    // 设置从通知激活App时的launchImage图片</span><br><span class="line">//    content.launchImageName = @&quot;&quot;;</span><br><span class="line">    </span><br><span class="line">    /* 4.设置触发器: 计时器触发</span><br><span class="line">     1.TimeInterval：时间间隔</span><br><span class="line">     2.repeats：是否重复*/</span><br><span class="line">    UNTimeIntervalNotificationTrigger * trigger = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:time repeats:repeats];</span><br><span class="line">    </span><br><span class="line">    /*</span><br><span class="line">     4.设置通知请求</span><br><span class="line">     1.Identifier：通知标识</span><br><span class="line">     2.content：通知内容</span><br><span class="line">     3.trigger：触发器</span><br><span class="line">     */</span><br><span class="line">    UNNotificationRequest * request = [UNNotificationRequest requestWithIdentifier:identifier content:content trigger:trigger];</span><br><span class="line">    </span><br><span class="line">    // 5.添加通知请求</span><br><span class="line">    [center addNotificationRequest:request withCompletionHandler:^(NSError * _Nullable error) &#123;</span><br><span class="line">        if (error) &#123;</span><br><span class="line">            NSLog(@&quot;添加推送通知失败&quot;);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            NSLog(@&quot;添加推送通知成功&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>视频通知</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// 推送本地通知 iOS 10.0 及以上（视频）</span><br><span class="line">- (void)pushLocalNotificationIOS10AndAboveWithVideoName:(NSString *)videoName</span><br><span class="line">                                                   time:(int)time</span><br><span class="line">                                                  title:(NSString *)title</span><br><span class="line">                                                   body:(NSString *)body</span><br><span class="line">                                                repeats:(BOOL)repeats</span><br><span class="line">                                             identifier:(NSString *)identifier&#123;</span><br><span class="line">    // 1.创建通知管理类</span><br><span class="line">    UNUserNotificationCenter * center = [UNUserNotificationCenter currentNotificationCenter];</span><br><span class="line">    </span><br><span class="line">    // 2.通知内容</span><br><span class="line">    UNMutableNotificationContent * content = [UNMutableNotificationContent new];</span><br><span class="line">    </span><br><span class="line">    /* 设置音频附件</span><br><span class="line">     attachments：数组，但系统的通知模板只能展示其中一个附件，设置多个附件也不会有额外的效果</span><br><span class="line">     但是如果开发者自定义通知模板UI，此数组就派上用场了</span><br><span class="line">     */</span><br><span class="line">    NSString * path = [[NSBundle mainBundle] pathForResource:videoName ofType:nil];</span><br><span class="line">    NSURL * url = [NSURL fileURLWithPath:path];</span><br><span class="line">    UNNotificationAttachment * attachment = [UNNotificationAttachment attachmentWithIdentifier:identifier URL:url options:nil error:nil];</span><br><span class="line">    content.attachments = @[attachment];</span><br><span class="line">    </span><br><span class="line">    // 设置通知的标题</span><br><span class="line">    content.title = [NSString localizedUserNotificationStringForKey:title arguments:nil];</span><br><span class="line">    // 设置通知的副标题</span><br><span class="line">//    content.subtitle = @&quot;&quot;;</span><br><span class="line">    // 设置通知请求时发送时App图标上显示的数字</span><br><span class="line">//    content.badge = @1;</span><br><span class="line">    // 设置通知的主体</span><br><span class="line">    content.body = body;</span><br><span class="line">    // 设置通知提示音</span><br><span class="line">    content.sound = [UNNotificationSound defaultSound];</span><br><span class="line">    // 设置从通知激活App时的launchImage图片</span><br><span class="line">//    content.launchImageName = @&quot;&quot;;</span><br><span class="line">    </span><br><span class="line">    /* 4.设置触发器: 计时器触发</span><br><span class="line">     1.TimeInterval：时间间隔</span><br><span class="line">     2.repeats：是否重复*/</span><br><span class="line">    UNTimeIntervalNotificationTrigger * trigger = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:time repeats:repeats];</span><br><span class="line">    </span><br><span class="line">    /*</span><br><span class="line">     4.设置通知请求</span><br><span class="line">     1.Identifier：通知标识</span><br><span class="line">     2.content：通知内容</span><br><span class="line">     3.trigger：触发器</span><br><span class="line">     */</span><br><span class="line">    UNNotificationRequest * request = [UNNotificationRequest requestWithIdentifier:identifier content:content trigger:trigger];</span><br><span class="line">    </span><br><span class="line">    // 5.添加通知请求</span><br><span class="line">    [center addNotificationRequest:request withCompletionHandler:^(NSError * _Nullable error) &#123;</span><br><span class="line">        if (error) &#123;</span><br><span class="line">            NSLog(@&quot;添加推送通知失败&quot;);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            NSLog(@&quot;添加推送通知成功&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="5"><li>效果</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308120950788.png"                                     ></p><ol start="6"><li>使用模板</li></ol><p>除了上面介绍的强大的附件通知外，我们还可以把 <code>UserNotification</code> 提供的模板功能和用户行为利用起来。在iOS系统中，聊天类软件常常采用后台推送的方式推送消息，用户可以在不进入应用程序的情况下，直接在桌面回复通过通知推送过来的消息，这种功能就是通过 <code>UNNotificationCategory</code> 和 <code>UNNotificationAction</code> 用户行为来实现的。对于文本回复框，<code>UserNotification</code> 框架提供了 <code>UNTextInputNotificationAction</code> 类，也即 <code>UNNotificationAction</code> 的子类。</p><ul><li><code>UNTextInputNotificationAction</code> 创建文本回复框</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">// 在桌面对本地通知进行回复</span><br><span class="line">- (void)replyLocalNotificationAtDesktopWithInputIdentifier:(NSString *)inputIdentifier</span><br><span class="line">                                                inputTitle:(NSString *)inputTitle</span><br><span class="line">                                             inputBtnTitle:(NSString *)inputBtnTitle</span><br><span class="line">                                          inputPlaceholder:(NSString *)inputPlaceholder</span><br><span class="line">                                        categoryIdentifier:(NSString *)categoryIdentifier</span><br><span class="line">                                                     title:(NSString *)title</span><br><span class="line">                                                      body:(NSString *)body</span><br><span class="line">                                                      time:(int)time</span><br><span class="line">                                                   repeats:(BOOL)repeats</span><br><span class="line">                                                inentifier:(NSString *)identifier</span><br><span class="line">&#123;</span><br><span class="line">    // 创建管理类</span><br><span class="line">    UNUserNotificationCenter * center = [UNUserNotificationCenter currentNotificationCenter];</span><br><span class="line">    </span><br><span class="line">    // 创建回复框</span><br><span class="line">    UNTextInputNotificationAction * inputAction = [UNTextInputNotificationAction actionWithIdentifier:inputIdentifier title:inputIdentifier options:UNNotificationActionOptionAuthenticationRequired textInputButtonTitle:inputBtnTitle textInputPlaceholder:inputPlaceholder];</span><br><span class="line">    </span><br><span class="line">    // 创建通知模板</span><br><span class="line">    UNNotificationCategory * category = [UNNotificationCategory categoryWithIdentifier:categoryIdentifier actions:@[inputAction] intentIdentifiers:@[] options:UNNotificationCategoryOptionCustomDismissAction];</span><br><span class="line">    </span><br><span class="line">    // 设置通知内容</span><br><span class="line">    UNMutableNotificationContent * content = [[UNMutableNotificationContent alloc] init];</span><br><span class="line">    // 设置通知请求发送时App图标上显示的数字</span><br><span class="line">//    content.badge = @1;</span><br><span class="line">    // 设置通知的标题</span><br><span class="line">    content.title = [NSString localizedUserNotificationStringForKey:title arguments:nil];</span><br><span class="line">    // 设置通知的副标题</span><br><span class="line">//    content.subtitle = @&quot;&quot;;</span><br><span class="line">    // 设置通知的主体</span><br><span class="line">    content.body = [NSString localizedUserNotificationStringForKey:body arguments:nil];</span><br><span class="line">    // 设置通知的提示音</span><br><span class="line">    content.sound = [UNNotificationSound defaultSound];</span><br><span class="line">    // 设置从通知激活App时的launchImage图片</span><br><span class="line">//    content.launchImageName = @&quot;&quot;;</span><br><span class="line">    </span><br><span class="line">    // 设置通知模板(categoryIdentifier和上面的保持一致)</span><br><span class="line">    content.categoryIdentifier = categoryIdentifier;</span><br><span class="line">    [center setNotificationCategories:[NSSet setWithObjects:category, nil]];</span><br><span class="line">    </span><br><span class="line">    /* 设置触发器: 计时器触发</span><br><span class="line">     1.TimeInterval：时间间隔</span><br><span class="line">     2.repeats：是否重复*/</span><br><span class="line">    UNTimeIntervalNotificationTrigger * trigger = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:time repeats:repeats];</span><br><span class="line">    </span><br><span class="line">    /*</span><br><span class="line">     设置通知请求</span><br><span class="line">     1.Identifier：通知标识</span><br><span class="line">     2.content：通知内容</span><br><span class="line">     3.trigger：触发器</span><br><span class="line">     */</span><br><span class="line">    UNNotificationRequest * request = [UNNotificationRequest requestWithIdentifier:identifier content:content trigger:trigger];</span><br><span class="line">    </span><br><span class="line">    // 添加通知请求</span><br><span class="line">    [center addNotificationRequest:request withCompletionHandler:^(NSError * _Nullable error) &#123;</span><br><span class="line">        if (error) &#123;</span><br><span class="line">            NSLog(@&quot;添加推送通知失败&quot;);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            NSLog(@&quot;添加推送通知成功&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ul><li>UNNotificationAction创建用户交互按钮</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">// 在桌面对本地通知进行按钮交互</span><br><span class="line">// 在桌面对本地通知进行按钮交互</span><br><span class="line">- (void)supportLocationNotificationUserInterfaceButton&#123;</span><br><span class="line"></span><br><span class="line">    // 创建通知管理类</span><br><span class="line">    UNUserNotificationCenter * center = [UNUserNotificationCenter currentNotificationCenter];</span><br><span class="line">    </span><br><span class="line">    /*</span><br><span class="line">     创建交互按钮（系统模板最多支持添加4个交互按钮）</span><br><span class="line">     UNNotificationActionOptionNone: 无设置</span><br><span class="line">     */</span><br><span class="line">    UNNotificationAction * action1 = [UNNotificationAction actionWithIdentifier:@&quot;action&quot; title:@&quot;用户交互按钮1&quot; options:UNNotificationActionOptionNone];</span><br><span class="line">    UNNotificationAction * action2 = [UNNotificationAction actionWithIdentifier:@&quot;action&quot; title:@&quot;用户交互按钮2&quot; options:UNNotificationActionOptionNone];</span><br><span class="line">    UNNotificationAction * action3 = [UNNotificationAction actionWithIdentifier:@&quot;action&quot; title:@&quot;用户交互按钮3&quot; options:UNNotificationActionOptionNone];</span><br><span class="line">    UNNotificationAction * action4 = [UNNotificationAction actionWithIdentifier:@&quot;action&quot; title:@&quot;用户交互按钮4&quot; options:UNNotificationActionOptionNone];</span><br><span class="line"></span><br><span class="line">    // 创建通知模板</span><br><span class="line">    UNNotificationCategory * category = [UNNotificationCategory categoryWithIdentifier:@&quot;myNotificationCategoryButton&quot; actions:@[action1,action2,action3,action4] intentIdentifiers:@[] options:UNNotificationCategoryOptionCustomDismissAction];</span><br><span class="line"></span><br><span class="line">    // 通知内容</span><br><span class="line">    UNMutableNotificationContent * content = [[UNMutableNotificationContent alloc] init];</span><br><span class="line">    // 设置通知请求发送时App图标上显示的数字</span><br><span class="line">//    content.badge = @1;</span><br><span class="line">    // 设置通知的标题</span><br><span class="line">    content.title = [NSString localizedUserNotificationStringForKey:title arguments:nil];</span><br><span class="line">    // 设置通知的副标题</span><br><span class="line">//    content.subtitle = @&quot;&quot;;</span><br><span class="line">    // 设置通知的主体</span><br><span class="line">    content.body = [NSString localizedUserNotificationStringForKey:body arguments:nil];</span><br><span class="line">    // 设置通知的提示音</span><br><span class="line">    content.sound = [UNNotificationSound defaultSound];</span><br><span class="line">    // 设置从通知激活App时的launchImage图片</span><br><span class="line">//    content.launchImageName = @&quot;&quot;;</span><br><span class="line">    </span><br><span class="line">    // 设置通知模板(categoryIdentifier和上面的保持一致)</span><br><span class="line">    content.categoryIdentifier = categoryIdentifier;</span><br><span class="line">    [center setNotificationCategories:[NSSet setWithObjects:category, nil]];</span><br><span class="line">        </span><br><span class="line">    /* 设置触发器: 计时器触发</span><br><span class="line">     1.TimeInterval：时间间隔</span><br><span class="line">     2.repeats：是否重复*/</span><br><span class="line">    UNTimeIntervalNotificationTrigger * trigger = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:time repeats:repeats];</span><br><span class="line">    </span><br><span class="line">    /*</span><br><span class="line">     设置通知请求</span><br><span class="line">     1.Identifier：通知标识</span><br><span class="line">     2.content：通知内容</span><br><span class="line">     3.trigger：触发器</span><br><span class="line">     */</span><br><span class="line">    UNNotificationRequest * request = [UNNotificationRequest requestWithIdentifier:identifier content:content trigger:trigger];</span><br><span class="line">    </span><br><span class="line">    // 添加通知请求</span><br><span class="line">    [center addNotificationRequest:request withCompletionHandler:^(NSError * _Nullable error) &#123;</span><br><span class="line">        if (error) &#123;</span><br><span class="line">            NSLog(@&quot;添加推送通知失败&quot;);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            NSLog(@&quot;添加推送通知成功&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308121015640.png"                                     ></p><ol start="7"><li>通知扩展</li></ol><p>通过 <code>UserNotification</code> 框架，开发者已经可以完成从前很难实现的效果。然后这都不是这个框架最强大的地方，它的最强大的功能是通过扩展实现 <code>完全自定义的通过UI界面</code>。也即 <code>Notification Content Extension</code>。在项目新建一个 <code>Target</code> 后，然后选择 <code>Notification Content Extension</code> 扩展文件并创建，此时这个扩展文件自带了一个故事板 <code>storyBoard</code> 和一个 <code>NotificationViewCenter</code> 类，开发者可以在 <code>storyBoard</code> 中或者 <code>NotificationViewCenter</code> 中直接定制需要的UI界面即可，具体方法可以去看API。需要注意的是，<code>NotificationViewCenter</code> 类自动遵守了 <code>UNNotificationContentExtension</code> 协议，这个协议专门用来处理自定义的通知UI的内容展示。</p><p>注意：</p><p>在自定义的的通知界面上，虽然可以放置按钮或者任何UI控件，但其不能进行用户交互，唯一可以进行交互的方式是通过协议中的媒体按钮及其回调方法。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 当用户点击通知中的用户交互按钮时会调用，开发者可以从notification对象中拿到附件等内容进行UI刷新</span><br><span class="line">- (void)didReceiveNotification:(UNNotification *)notification;</span><br><span class="line">- (void)didReceiveNotificationResponse:(UNNotificationResponse *)response completionHandler:(void (^)(UNNotificationContentExtensionResponseOption option))completion;</span><br><span class="line"></span><br><span class="line">// 返回媒体按钮位置</span><br><span class="line">@property (nonatomic, readonly, assign) CGRect mediaPlayPauseButtonFrame;</span><br><span class="line"></span><br><span class="line">// 返回媒体按钮颜色</span><br><span class="line">@property (nonatomic, readonly, copy) UIColor *mediaPlayPauseButtonTintColor;</span><br><span class="line"></span><br><span class="line">// 点击播放和暂停播放按钮的回调</span><br><span class="line">- (void)mediaPlay;</span><br><span class="line">- (void)mediaPause;</span><br><span class="line"></span><br><span class="line">// 打开和关闭通知的回调</span><br><span class="line">- (void)performNotificationDefaultAction;</span><br><span class="line">- (void)dismissNotificationContentExtension</span><br><span class="line"></span><br><span class="line">// 媒体开始播放和暂停的回调</span><br><span class="line">- (void)mediaPlayingStarted;</span><br><span class="line">- (void)mediaPlayingPaused .</span><br></pre></td></tr></table></figure></div><ul><li>创建扩展</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308121018724.png"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308121336924.png"                                     ></p><ul><li>配置plist</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308121336332.png"                                     ></p><p>在这个 NSExtensionAttributes 字典下，我们有三个属性可以添加</p><p>（1）UNNotificationExtensionCategory（必须要有，系统已经创建好）</p><p>解释：对应这个key的值，可以是字符串，也可以是一个数组，每一个字符串都是一个identifier，这个identifier对应着每一个 <code>UNMutableNotificationContent</code> 的 <code>categoryIdentifier</code> 的属性。</p><p>简单来说，就是在收到通知的时候，我们可以让服务器把这个通知的 <code>categoryIdentifier</code> 带上，作用是，我们可以根据视频、音乐、图片，来分别自定义我们的通知内容。不同的分类标识符，也会在我们讲到 <code>UNNotificationAction</code> 的时候，帮助我们区分是什么类型的通知，方便我们对不同类型的通知做出不同的操作行为。上面的截图中，我是一个字符串的形式。下图为数组形式：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308121342383.png"                                     ></p><p>这里设置categoryIdentifier，最好让服务器的推送内容带上这个，然后我们好更加的定制化。不建议本地写死。</p><p>（2）UNNotificationExtensionInitialContentSizeRatio(必须要有，系统已经创建好)</p><p>解释：这个值的类型是一个浮点类型，代表的是 <code>高度与宽度的比值</code>。系统会使用这个比值，作为初始化view的大小。举个简单的例子来说，如果该值为 <code>1</code>，则该视图为 <code>正方形</code>。如果为 <code>0.5</code>，则代表 <code>高度是宽度的一半</code>。</p><p>注意：这个值只是初始化的一个值，在这个扩展添加后，可以重写frame，展示的时候，在我们还没打开这个视图预览时，背景是个类似图片占位的灰色，那个灰色的高度宽度之比，就是通过这个值来设定。</p><p>（3）UNNotificationExtensionDefaultContentHidden(可选)</p><p>解释：这个值是一个BOOL值，当为YES时，会隐藏上方原本推送的内容视图，只会显示我们自定义的视图。（因为在自定义视图的时候，我们可以取得推送内容，然后按照我们想要的布局，展示出来）如果为NO时（默认为NO），推送视图就会既有我们的自定义视图，也会有系统原本的推送内容视图（这里附件是不会显示的，只会显示body里面的文字哟）</p><p>（4）至于 <code>NSExtensionMainStoryboard</code> 以及 <code>NSExtensionPointIdentifier</code>，系统默认生成，大家直接用就好，如果需要更改的，只能更改使用的 <code>storyboard</code> 的名字（不过应该没人会把系统的删除在建立一个吧 </p><p>MainInterface.storyboard：</p><p>这个就是个简单的storyboard文件，内部有一个View，这个View就是在上面的图层中的自定义View视图了。它与NotificationViewController所绑定。</p><p>NotificationViewController：</p><p>这是是系统帮我们默认创建了一个控制器，继承UIViewController，其实就是一个控制器啦。</p><ul><li>定制界面</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308121018848.png"                                     ></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">//  NotificationViewController.m</span><br><span class="line"></span><br><span class="line">//  MyNotificationContentExtension</span><br><span class="line"></span><br><span class="line">#import &quot;NotificationViewController.h&quot;</span><br><span class="line"></span><br><span class="line">#import &lt;UserNotifications/UserNotifications.h&gt;</span><br><span class="line"></span><br><span class="line">#import &lt;UserNotificationsUI/UserNotificationsUI.h&gt;</span><br><span class="line"></span><br><span class="line">@interface NotificationViewController () &lt;UNNotificationContentExtension&gt;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) UILabel      *customTitleLabel1;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) UILabel      *customTitleLabel2;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) UIImageView  *customImageView1;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) UIImageView  *customImageView2;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation NotificationViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line"></span><br><span class="line">    [super viewDidLoad];</span><br><span class="line"></span><br><span class="line">    //屏幕宽</span><br><span class="line"></span><br><span class="line">    CGFloat screen_width = [UIScreen mainScreen].bounds.size.width;</span><br><span class="line"></span><br><span class="line">    self.view.backgroundColor = [UIColor redColor];</span><br><span class="line"></span><br><span class="line">    //自定义Label</span><br><span class="line"></span><br><span class="line">    self.customTitleLabel1 = [[UILabel alloc] initWithFrame:CGRectMake(, , screen_width, )];</span><br><span class="line"></span><br><span class="line">    self.customTitleLabel1.textColor = [UIColor whiteColor];</span><br><span class="line"></span><br><span class="line">    self.customTitleLabel1.textAlignment = NSTextAlignmentCenter;</span><br><span class="line"></span><br><span class="line">    self.customTitleLabel1.backgroundColor = [UIColor greenColor];</span><br><span class="line"></span><br><span class="line">    //自定义UIImageView</span><br><span class="line"></span><br><span class="line">    self.customImageView1 = [[UIImageView alloc] initWithFrame:CGRectMake(, , screen_width/, )];</span><br><span class="line"></span><br><span class="line">    self.customImageView2 = [[UIImageView alloc] initWithFrame:CGRectMake(screen_width/, , screen_width/, )];</span><br><span class="line"></span><br><span class="line">    self.customImageView1.backgroundColor = [UIColor purpleColor];</span><br><span class="line"></span><br><span class="line">    self.customImageView2.backgroundColor = [UIColor blueColor];</span><br><span class="line"></span><br><span class="line">    //自定义Label</span><br><span class="line"></span><br><span class="line">    self.customTitleLabel2 = [[UILabel alloc] initWithFrame:CGRectMake(, CGRectGetMaxY(self.customImageView1.frame)+, screen_width, )];</span><br><span class="line"></span><br><span class="line">    self.customTitleLabel2.textColor = [UIColor whiteColor];</span><br><span class="line"></span><br><span class="line">    self.customTitleLabel2.textAlignment = NSTextAlignmentCenter;</span><br><span class="line"></span><br><span class="line">    self.customTitleLabel2.backgroundColor = [UIColor orangeColor];</span><br><span class="line"></span><br><span class="line">    //添加控件</span><br><span class="line"></span><br><span class="line">    [self.view addSubview:self.customTitleLabel1];</span><br><span class="line"></span><br><span class="line">    [self.view addSubview:self.customTitleLabel2];</span><br><span class="line"></span><br><span class="line">    [self.view addSubview:self.customImageView1];</span><br><span class="line"></span><br><span class="line">    [self.view addSubview:self.customImageView2];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">收到通知时触发，但是这个是退出进程之后才使用，只适用于远程推送（所以本地推送，这两个方法是不会执行的）</span><br><span class="line">拿到推送通知内容，刷新自定义的UI</span><br><span class="line">*/</span><br><span class="line">- (void)didReceiveNotification:(UNNotification *)notification &#123;</span><br><span class="line">    NSLog(@&quot;notification---------%@&quot;,notification);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 用户交互时触发</span><br><span class="line">- (void)didReceiveNotificationResponse:(UNNotificationResponse *)response completionHandler:(void (^)(UNNotificationContentExtensionResponseOption option))completion &#123;</span><br><span class="line">    NSLog(@&quot;response----------%@&quot;,response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></div><ul><li>模板使用</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">// 支持完全自定义UI的通知</span><br><span class="line">- (void)supportCustomUILocationNotification &#123;</span><br><span class="line"></span><br><span class="line">    // 创建交互按钮</span><br><span class="line">    UNNotificationAction * action = [UNNotificationAction actionWithIdentifier:@&quot;action&quot; title:@&quot;自定义的Action&quot; options:UNNotificationActionOptionNone];</span><br><span class="line"></span><br><span class="line">    // 创建通知模板</span><br><span class="line">    // &quot;myNotificationCategory&quot; 要与 plist 中配置的保持一样</span><br><span class="line">    UNNotificationCategory * category = [UNNotificationCategory categoryWithIdentifier:@&quot;myNotificationCategory&quot; actions:@[action] intentIdentifiers:@[] options:UNNotificationCategoryOptionCustomDismissAction];</span><br><span class="line"></span><br><span class="line">    // 通知内容类</span><br><span class="line">    UNMutableNotificationContent * content = [UNMutableNotificationContent new];</span><br><span class="line">    // 设置通知请求发送时APP图标上显示的数字</span><br><span class="line">    content.badge = @1;</span><br><span class="line">    // 设置通知的内容</span><br><span class="line">    content.body = @&quot;iOS10新通知内容，普通通知，欢迎哥来了&quot;;</span><br><span class="line">    // 设置通知提示音</span><br><span class="line">    content.sound = [UNNotificationSound defaultSound];</span><br><span class="line">    // 设置通知的副标题</span><br><span class="line">    content.subtitle = @&quot;这是通知副标题&quot;;</span><br><span class="line">    // 设置通知的标题</span><br><span class="line">    content.title = @&quot;这是通知标题&quot;;</span><br><span class="line">    // 设置从通知激活App时的lanunchImage图片</span><br><span class="line">    content.launchImageName = @&quot;lun&quot;;</span><br><span class="line"></span><br><span class="line">    // 设置通知模板</span><br><span class="line">    // categoryIdentifier要与上面创建category的标识保持一致</span><br><span class="line">    content.categoryIdentifier = @&quot;myNotificationCategory&quot;;</span><br><span class="line">    [[UNUserNotificationCenter currentNotificationCenter] setNotificationCategories:[NSSet setWithObjects:category, nil]];</span><br><span class="line"></span><br><span class="line">    // 设置触发器</span><br><span class="line">    // 计时器触发器</span><br><span class="line">    UNTimeIntervalNotificationTrigger * timrTrigger = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval: repeats:NO];</span><br><span class="line"></span><br><span class="line">    // 设置通知请求</span><br><span class="line">    UNNotificationRequest * request = [UNNotificationRequest requestWithIdentifier:@&quot;UNNotificationCustomUIH&quot; content:content trigger:timrTrigger];</span><br><span class="line"></span><br><span class="line">    // 添加通知请求</span><br><span class="line">    [[UNUserNotificationCenter currentNotificationCenter] addNotificationRequest:request withCompletionHandler:^(NSError * _Nullable error) &#123;</span><br><span class="line">        if (!error) &#123;</span><br><span class="line">            NSLog(@&quot;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308121022228.png"                                     ></p><ol start="8"><li>重写媒体按钮</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - 重写媒体按钮</span><br><span class="line">// 重写媒体按钮的frame</span><br><span class="line">- (CGRect)mediaPlayPauseButtonFrame &#123;</span><br><span class="line">    return CGRectMake(, , , );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 重写媒体按钮的颜色</span><br><span class="line">- (UIColor *)mediaPlayPauseButtonTintColor &#123;</span><br><span class="line">    return [UIColor yellowColor];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 重写媒体按钮类型</span><br><span class="line">- (UNNotificationContentExtensionMediaPlayPauseButtonType)mediaPlayPauseButtonType &#123;</span><br><span class="line">    return UNNotificationContentExtensionMediaPlayPauseButtonTypeDefault;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 接收媒体按钮播放事件</span><br><span class="line">- (void)mediaPlay &#123;</span><br><span class="line">    NSLog(@&quot;mediaPlay---------------开始播放&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 接收媒体按钮暂停事件</span><br><span class="line">- (void)mediaPause &#123;</span><br><span class="line">    NSLog(@&quot;mediaPause---------------暂停播放&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308121024973.png"                                     ></p><ol start="10"><li>通知的代理方法</li></ol><p>UserNotification框架对于通知的回调处理，是通过UNNotificationCenterDelegate协议来实现的。代理方法如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - UNUserNotificationCenterDelegate</span><br><span class="line">/*</span><br><span class="line"> App在前台时，才会调用此方法：</span><br><span class="line"> 如果未实现该方法或未及时调用该处理程序，则不会显示该通知。</span><br><span class="line"> 应用程序可以选择将通知显示为声音，徽章，警报和/或显示在通知列表中。</span><br><span class="line"> 该决定应基于通知中的信息是否对用户可见。</span><br><span class="line"> */</span><br><span class="line">-(void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions))completionHandler&#123;</span><br><span class="line">    NSLog(@&quot;App在前台，收到了通知&quot;);</span><br><span class="line">    // 处理通知</span><br><span class="line">    UNNotificationContent * content = notification.request.content;</span><br><span class="line">    if (content) &#123;</span><br><span class="line">        NSLog(@&quot;title:%@ body:%@&quot;,content.title,content.body);</span><br><span class="line">    &#125;</span><br><span class="line">    /* 处理完成后，调用 completionHandler，用于指示在前台显示通知的形式</span><br><span class="line">     UNNotificationPresentationOptionNone：不在前台显示</span><br><span class="line">     UNNotificationPresentationOptionAlert：在前台显示</span><br><span class="line">     ...</span><br><span class="line">     */</span><br><span class="line">    completionHandler(UNNotificationPresentationOptionNone);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">当接收到通知后，在用户点击通知激活应用程序时调用这个方法，无论是在前台还是后台</span><br><span class="line">*/</span><br><span class="line">- (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler &#123;</span><br><span class="line">    NSLog(@&quot;App无论是在前台还是后台，收到了通知，用户点击该通知&quot;);</span><br><span class="line">    // 如果有内容</span><br><span class="line">    UNNotificationContent * content = response.notification.request.content;</span><br><span class="line">    if (content) &#123;</span><br><span class="line">        NSLog(@&quot;title:%@ body:%@&quot;,content.title,content.body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>将上述代码封装到一个管理类 LocalNofiManager 中</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line">/</span><br><span class="line">//  LocalNotificationManager.m</span><br><span class="line">//  JiAnBaoStandard</span><br><span class="line">//</span><br><span class="line">//  Created by Mac on 2023/8/10.</span><br><span class="line">//  Copyright © 2023 JITPlatform. All rights reserved.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#import &quot;LocalNotiManager.h&quot;</span><br><span class="line"></span><br><span class="line">@interface LocalNotiManager ()&lt;UNUserNotificationCenterDelegate&gt;</span><br><span class="line">@end</span><br><span class="line">@implementation LocalNotiManager</span><br><span class="line">// 单例</span><br><span class="line">+ (instancetype)sharedManager&#123;</span><br><span class="line">    static LocalNotiManager * manager = nil;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        manager = [[self alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    return manager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 本地通知授权</span><br><span class="line">- (void)localNotificationAuthorization&#123;</span><br><span class="line">    if (@available(iOS 10.0, *)) &#123;</span><br><span class="line">        [self localNotificationAuthorizationIOS10AndAbove];</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        [self localNotificationAuthorizationIOS10AndBelow];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 推送本地通知</span><br><span class="line">- (void)pushLocalNotificationWithTime:(int)time</span><br><span class="line">                                title:(NSString *)title</span><br><span class="line">                                 body:(NSString *)body</span><br><span class="line">                              repeats:(BOOL)repeats</span><br><span class="line">                           identifier:(NSString *)identifier&#123;</span><br><span class="line">    if (@available(iOS 10.0, *)) &#123;</span><br><span class="line">        [self pushLocalNotificationIOS10AndAboveWithTime:time</span><br><span class="line">                                                   title:title</span><br><span class="line">                                                    body:body</span><br><span class="line">                                                 repeats:repeats</span><br><span class="line">                                              identifier:identifier];</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        [self pushLocalNotificationIOS10AndBelowWithTime:time</span><br><span class="line">                                                   title:title</span><br><span class="line">                                                    body:body</span><br><span class="line">                                                 repeats:repeats</span><br><span class="line">                                              identifier:identifier];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - iOS 10.0 及以上</span><br><span class="line">// 本地通知授权</span><br><span class="line">- (void)localNotificationAuthorizationIOS10AndAbove&#123;</span><br><span class="line">    // 使用 UNUserNotificationCenter 来管理通知</span><br><span class="line">    UNUserNotificationCenter * center = [UNUserNotificationCenter currentNotificationCenter];</span><br><span class="line">    // 设置通知中心的代理</span><br><span class="line">    center.delegate = self;</span><br><span class="line">    </span><br><span class="line">    // iOS 10.0使用以下方法注册，才能得到授权</span><br><span class="line">    [center requestAuthorizationWithOptions:(UNAuthorizationOptionAlert + UNAuthorizationOptionBadge + UNAuthorizationOptionSound) completionHandler:^(BOOL granted, NSError * _Nullable error) &#123;</span><br><span class="line">        // 用户是否同意</span><br><span class="line">        if (granted) &#123;</span><br><span class="line">            NSLog(@&quot;用户同意授权&quot;);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            NSLog(@&quot;用户不同意授权&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 推送本地通知 iOS 10.0 及以上（普通）</span><br><span class="line">- (void)pushLocalNotificationIOS10AndAboveWithTime:(int)time</span><br><span class="line">                                             title:(NSString *)title</span><br><span class="line">                                              body:(NSString *)body</span><br><span class="line">                                           repeats:(BOOL)repeats</span><br><span class="line">                                        identifier:(NSString *)identifier&#123;</span><br><span class="line">    [[UNUserNotificationCenter currentNotificationCenter] requestAuthorizationWithOptions:(UNAuthorizationOptionAlert + UNAuthorizationOptionBadge + UNAuthorizationOptionSound) completionHandler:^(BOOL granted, NSError * _Nullable error) &#123;</span><br><span class="line">        if (!granted) &#123;</span><br><span class="line">            dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                [SVPManager showWithStatus:@&quot;请您在前往 设置-&gt;通用-&gt;零信任-&gt;通知-&gt;开启允许通知 权限，以便为您提供本地通知服务&quot; time:2.5];</span><br><span class="line">            &#125;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    // 1.创建通知管理类</span><br><span class="line">    UNUserNotificationCenter * center = [UNUserNotificationCenter currentNotificationCenter];</span><br><span class="line">   </span><br><span class="line">    // 2.设置通知内容</span><br><span class="line">    UNMutableNotificationContent * content = [[UNMutableNotificationContent alloc] init];</span><br><span class="line">    // 设置通知请求发送时App图标上显示的数字</span><br><span class="line">//    content.badge = @1;</span><br><span class="line">    // 设置通知的标题</span><br><span class="line">    content.title = [NSString localizedUserNotificationStringForKey:title arguments:nil];</span><br><span class="line">    // 设置通知的副标题</span><br><span class="line">//    content.subtitle = @&quot;&quot;;</span><br><span class="line">    // 设置通知的主体</span><br><span class="line">    content.body = [NSString localizedUserNotificationStringForKey:body arguments:nil];</span><br><span class="line">    // 设置通知的提示音</span><br><span class="line">    content.sound = [UNNotificationSound defaultSound];</span><br><span class="line">    // 设置从通知激活App时的launchImage图片</span><br><span class="line">//    content.launchImageName = @&quot;&quot;;</span><br><span class="line">    </span><br><span class="line">    /* 3.设置触发器: 计时器触发</span><br><span class="line">     1.TimeInterval：时间间隔</span><br><span class="line">     2.repeats：是否重复*/</span><br><span class="line">    UNTimeIntervalNotificationTrigger * trigger = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:time repeats:repeats];</span><br><span class="line">    </span><br><span class="line">    /* 设置触发器: 周期日历触发 */</span><br><span class="line">//    NSDateComponents * components = [[NSDateComponents alloc] init];</span><br><span class="line">//    components.year = 2023;</span><br><span class="line">//    components.month = 11;</span><br><span class="line">//    components.day = 2;</span><br><span class="line">//    UNCalendarNotificationTrigger * trigger = [UNCalendarNotificationTrigger triggerWithDateMatchingComponents:components repeats:repeats];</span><br><span class="line">    </span><br><span class="line">    /* 设置触发器：地域触发 */</span><br><span class="line">//    CLRegion * region = [[CLCircularRegion alloc] initWithCenter:CLLocationCoordinate2DMake(33.0, 11.0) radius:100 identifier:@&quot;region&quot;];</span><br><span class="line">//    UNLocationNotificationTrigger * trigger = [UNLocationNotificationTrigger triggerWithRegion:region repeats:repeats];</span><br><span class="line">    </span><br><span class="line">    /*</span><br><span class="line">     4.设置通知请求</span><br><span class="line">     1.Identifier：通知标识</span><br><span class="line">     2.content：通知内容</span><br><span class="line">     3.trigger：触发器</span><br><span class="line">     */</span><br><span class="line">    UNNotificationRequest * request = [UNNotificationRequest requestWithIdentifier:identifier content:content trigger:trigger];</span><br><span class="line">    </span><br><span class="line">    // 5.添加通知请求</span><br><span class="line">    [center addNotificationRequest:request withCompletionHandler:^(NSError * _Nullable error) &#123;</span><br><span class="line">        if (error) &#123;</span><br><span class="line">            NSLog(@&quot;添加推送通知请求失败&quot;);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            NSLog(@&quot;添加推送通知请求成功&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - UNUserNotificationCenterDelegate</span><br><span class="line">/*</span><br><span class="line"> App在前台时，才会调用此方法：</span><br><span class="line"> 1.如果未实现该方法或未及时调用该处理程序，则不会显示该通知。</span><br><span class="line"> 2.应用程序可以选择将通知显示为声音，徽章，警报和/或显示在通知列表中。</span><br><span class="line"> 3.该决定应基于通知中的信息是否对用户可见。</span><br><span class="line"> */</span><br><span class="line">-(void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions))completionHandler&#123;</span><br><span class="line">    NSLog(@&quot;App在前台，收到了通知&quot;);</span><br><span class="line">    // 处理通知</span><br><span class="line">    UNNotificationContent * content = notification.request.content;</span><br><span class="line">    if (content) &#123;</span><br><span class="line">        NSLog(@&quot;title:%@ body:%@&quot;,content.title,content.body);</span><br><span class="line">    &#125;</span><br><span class="line">    /* 处理完成后，调用 completionHandler，用于指示在前台显示通知的形式</span><br><span class="line">     UNNotificationPresentationOptionNone：不在前台显示</span><br><span class="line">     UNNotificationPresentationOptionAlert：在前台显示</span><br><span class="line">     ...</span><br><span class="line">     */</span><br><span class="line">    completionHandler(UNNotificationPresentationOptionNone);</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line"> 当接收到通知后，在用户点击通知激活App时调用这个方法（无论是在前台还是后台）</span><br><span class="line"> */</span><br><span class="line">- (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void (^)(void))completionHandler&#123;</span><br><span class="line">    NSLog(@&quot;App无论是在前台还是后台，收到了通知，用户点击该通知&quot;);</span><br><span class="line">    // 如果有内容</span><br><span class="line">    UNNotificationContent * content = response.notification.request.content;</span><br><span class="line">    if (content) &#123;</span><br><span class="line">        NSLog(@&quot;title:%@ body:%@&quot;,content.title,content.body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - iOS 10.0 及以下</span><br><span class="line">// 本地通知授权</span><br><span class="line">- (void)localNotificationAuthorizationIOS10AndBelow&#123;</span><br><span class="line">    // 如果没有授权，则申请授权</span><br><span class="line">    if ([[UIApplication sharedApplication] currentUserNotificationSettings].types == UIUserNotificationTypeNone) &#123;</span><br><span class="line">        // 开始授权</span><br><span class="line">        UIUserNotificationSettings * notificationSettings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeAlert | UIUserNotificationTypeSound | UIUserNotificationTypeBadge categories:nil];</span><br><span class="line">        [[UIApplication sharedApplication] registerUserNotificationSettings:notificationSettings];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 推送本地通知 iOS 10.0 及以下</span><br><span class="line">- (void)pushLocalNotificationIOS10AndBelowWithTime:(int)time</span><br><span class="line">                                             title:(NSString *)title</span><br><span class="line">                                              body:(NSString *)body</span><br><span class="line">                                           repeats:(BOOL)repeats</span><br><span class="line">                                        identifier:(NSString *)identifier&#123;</span><br><span class="line">    if ([[UIApplication sharedApplication] currentUserNotificationSettings].types == UIUserNotificationTypeNone) &#123;</span><br><span class="line">        [SVPManager showWithStatus:@&quot;请您在前往 设置-&gt;通用-&gt;零信任-&gt;通知-&gt;开启允许通知 权限，以便为您提供本地通知服务&quot; time:2];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 1.创建通知对象</span><br><span class="line">    UILocalNotification * notification = [[UILocalNotification alloc] init];</span><br><span class="line">     </span><br><span class="line">    // 2.设置触发通知的时间(几秒后发送)</span><br><span class="line">    NSDate * fireDate = [NSDate dateWithTimeIntervalSinceNow:time];</span><br><span class="line">    notification.fireDate = fireDate;</span><br><span class="line">    </span><br><span class="line">    // 3.设置通知属性</span><br><span class="line">    // 通知标题</span><br><span class="line">    notification.alertTitle = title;</span><br><span class="line">    // 通知主体</span><br><span class="line">    notification.alertBody = body;</span><br><span class="line">    // 待机界面开启左滑按钮</span><br><span class="line">    notification.hasAction = YES;</span><br><span class="line">    // 待机界面的滑动按钮提示</span><br><span class="line">    notification.alertAction = @&quot;点击查看消息&quot;;</span><br><span class="line">    // 在收到通知时播放的声音，默认消息声音</span><br><span class="line">    notification.soundName = UILocalNotificationDefaultSoundName;</span><br><span class="line">    // 设置启动屏</span><br><span class="line">//    notification.alertLaunchImage = @&quot;&quot;;</span><br><span class="line">    // 传递的用户数据</span><br><span class="line">//    notification.userInfo = @&#123;&#125;;</span><br><span class="line">    // 图标的消息数</span><br><span class="line">//    notification.applicationIconBadgeNumber = 1;</span><br><span class="line">    // 时区</span><br><span class="line">//     notification.timeZone = [NSTimeZone defaultTimeZone];</span><br><span class="line">    // 设置重复的间隔</span><br><span class="line">//     notification.repeatInterval = kCFCalendarUnitSecond;</span><br><span class="line">    </span><br><span class="line">    // 附加操作</span><br><span class="line">//    notification.category = @&quot;choose&quot;;</span><br><span class="line">    </span><br><span class="line">    // 4.执行本地通知</span><br><span class="line">    [[UIApplication sharedApplication] scheduleLocalNotification:notification];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> App处于kill掉时，点击通知栏进入App，使用该方法接收本地（远程）通知</span><br><span class="line"> */</span><br><span class="line">- (void)receiveLocalNotificationWithLaunchOptions:(NSDictionary *)launchOptions&#123;</span><br><span class="line">    /*</span><br><span class="line">     App被kill掉，通过通知启动App</span><br><span class="line">     1.本地的 key - UIApplicationLaunchOptionsLocalNotificationKey</span><br><span class="line">     2.远程的 key - UIApplicationLaunchOptionsRemoteNotificationKey</span><br><span class="line">     */</span><br><span class="line">    if (launchOptions[UIApplicationLaunchOptionsLocalNotificationKey]) &#123;</span><br><span class="line">        UILocalNotification * notification = [launchOptions objectForKey:UIApplicationLaunchOptionsLocalNotificationKey];</span><br><span class="line">        [self handleLocalNotificationWithWithNotification:notification userInfo:launchOptions[UIApplicationLaunchOptionsLocalNotificationKey]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 处理本地通知</span><br><span class="line">- (void)handleLocalNotificationWithWithNotification:(UILocalNotification *)notification userInfo:(NSDictionary *)userInfo&#123;</span><br><span class="line">    NSLog(@&quot;title:%@ body:%@&quot;,notification.alertTitle,notification.alertBody);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ol start="2"><li>AppDelegate 中实现</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 本地通知授权</span><br><span class="line">    [[LocalNotiManager sharedManager] localNotificationAuthorization];</span><br><span class="line">    // 接收本地通知</span><br><span class="line">    [[LocalNotiManager sharedManager] receiveLocalNotificationWithLaunchOptions:launchOptions];</span><br></pre></td></tr></table></figure></div><ol start="3"><li>AppDelegate 中回调</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - 接收本地通知</span><br><span class="line">/*</span><br><span class="line"> App处于挂起或运行时，调用该方法接收本地（远程）通知</span><br><span class="line"> 1.当App在前台状态下，点击推送通知，会调用该方法</span><br><span class="line"> 2.当App在后台状态下，点击推送通知，会调用该方法（从锁屏界面点击推送通知也会执行）</span><br><span class="line"> */</span><br><span class="line">- (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification&#123;</span><br><span class="line">    NSLog(@&quot;%@&quot;,notification);</span><br><span class="line">    // 前台点击通知消息</span><br><span class="line">    if (application.applicationState == UIApplicationStateActive) &#123;</span><br><span class="line">        NSLog(@&quot;处理前台接受通知的业务&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    // 后台点击通知消息</span><br><span class="line">    else &#123;</span><br><span class="line">        NSLog(@&quot;处理后台台接受通知的业务&quot;);</span><br><span class="line">        [[LocalNotiManager sharedManager] handleLocalNotificationWithWithNotification:notification userInfo:notification.userInfo];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 当用户点击允许或者不允许时，会执行如下代理方法，我们在其中实现处理逻辑</span><br><span class="line">- (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings&#123;</span><br><span class="line">    NSLog(@&quot;当用户点击允许或者不允许时，会执行如下代理方法&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;通知和推送&lt;/code&gt; 是应用程序中很重要的组成部分。&lt;code&gt;本地通知&lt;/code&gt; 可以为应用程序注册一些定时任务，例如</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="OC-学习" scheme="https://www.bboyzj.cn/tags/OC-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>OC网络学习27：内网和外网探索</title>
    <link href="https://www.bboyzj.cn/2023/08/09/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A027%EF%BC%9A%E5%86%85%E7%BD%91%E5%92%8C%E5%A4%96%E7%BD%91%E6%8E%A2%E7%B4%A2/"/>
    <id>https://www.bboyzj.cn/2023/08/09/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A027%EF%BC%9A%E5%86%85%E7%BD%91%E5%92%8C%E5%A4%96%E7%BD%91%E6%8E%A2%E7%B4%A2/</id>
    <published>2023-08-09T07:01:31.000Z</published>
    <updated>2023-08-09T07:06:24.319Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是-内网IP-和-外网IP"><a href="#什么是-内网IP-和-外网IP" class="headerlink" title="什么是 内网IP 和 外网IP"></a>什么是 内网IP 和 外网IP</h1><ul><li><p>外网（即公网）IP：全球唯一IP地址</p></li><li><p>内网（局域网）IP</p></li></ul><h1 id="如何区分-内网IP-和-外网IP"><a href="#如何区分-内网IP-和-外网IP" class="headerlink" title="如何区分 内网IP 和 外网IP"></a>如何区分 内网IP 和 外网IP</h1><p>主要通过 <code>判断本地（路由）IP</code> 是否是 外网IP</p><ul><li>直观法</li></ul><ol><li><p><code>10</code> 开头的IP都是 <code>内网IP</code>。即 <code>10.0.0.0</code> 到 <code>10.255.255.255</code> 是内网IP。不少自家拉的带宽路由分配的都是10开头的IP，这类都是内网IP。</p></li><li><p>以下IP段的地址都是内网IP地址。</p></li></ol><p>（1）10.0.0.0 到 10.255.255.255</p><p>（2）172.16.0.0 到172.31.255.255</p><p>（3）192.168.0.0 到192.168.255.255</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是-内网IP-和-外网IP&quot;&gt;&lt;a href=&quot;#什么是-内网IP-和-外网IP&quot; class=&quot;headerlink&quot; title=&quot;什么是 内网IP 和 外网IP&quot;&gt;&lt;/a&gt;什么是 内网IP 和 外网IP&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;外网（即公网）IP</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="OC-网络学习" scheme="https://www.bboyzj.cn/tags/OC-%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>OC网络学习26：字符编码ASCII、Unicode、UTF-8探索</title>
    <link href="https://www.bboyzj.cn/2023/08/09/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A026%EF%BC%9A%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81ASCII%E3%80%81Unicode%E3%80%81UTF-8%E6%8E%A2%E7%B4%A2/"/>
    <id>https://www.bboyzj.cn/2023/08/09/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A026%EF%BC%9A%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81ASCII%E3%80%81Unicode%E3%80%81UTF-8%E6%8E%A2%E7%B4%A2/</id>
    <published>2023-08-09T00:39:53.000Z</published>
    <updated>2023-08-09T01:54:01.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编码历史"><a href="#编码历史" class="headerlink" title="编码历史"></a>编码历史</h1><p>最早只有 <code>128</code> 个字符被编码到计算机里，也就是 <code>大小写英文字母、数字和一些符号</code>，这个编码表被称为 <code>ASCII</code> 编码。例如：大写字母A的编码是65，小写字母z的编码是122。</p><p>但是要处理中文显然1个字节是不够的，至少需要2个字节，而且还不能和ASCII编码冲突，所以，中国制定了 <code>GB2312</code> 编码，用来把 <code>中文</code> 编进去，随着发展，又发现了一些局限，所以就有了 <code>GBK</code>，再继续往后增加了一些字符（如少数名族字体），GBK扩成了 <code>GB18030</code>。。你可以想得到的是，全世界有上百种语言，日本把日文编到Shift_JIS里，韩国把韩文编到Euc-kr里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。</p><p>因此，<code>Unicode</code> 应运而生。<code>Unicode</code> 把所有语言都统一到 <code>一套编码</code> 里，这样就不会再有乱码问题了。</p><p>Unicode标准也在不断发展，但最常用的是用2个字节表示1个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。</p><p>新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就得不偿失。</p><p>所以，本着节约的精神，又出现了把Unicode编码转化为 <code>可变长度编码的UTF-8编码</code>。<code>UTF-8编码 把一个Unicode字符根据不同的数字大小编码成1-6个字节</code>，常用的 <code>英文字母</code> 被编码成 <code>1个字节</code>，<code>汉字</code> 通常是 <code>3个字节</code>，只有 <code>很生僻的字符才会被编码成4-6个字节</code>。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间。</p><p><code>UTF-8编码</code> 有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分。所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</p><h1 id="Charset"><a href="#Charset" class="headerlink" title="Charset"></a>Charset</h1><p>Charset（Character set）字符集：是对字符抽象表示的集合。包括世界上各种文字、符号和字符</p><p><code>字符集</code> 只是一个规则集合的名字，对应到真实生活中，字符集就是对某种语言的称呼。例如：<code>汉语、英语、日语</code> 等</p><h1 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h1><p>对于一个字符集来说，要正确编码一个字符需要三个元素：</p><ol><li>字库表（character repertoire）</li></ol><p>字库表：是一个相当于所有可读或者可显示字符的数据库。字库表决定了整个字符集能展现表示的所有字符范文</p><ol start="2"><li>编码字符集（coded character set）</li></ol><p>编码字符集：即用一个编码值code point来表示一个字符在字库中的位置</p><ol start="3"><li>字符编码（character encoing）</li></ol><p>字符编码：将编码字符集和实际存储数值之间的转换关系</p><h1 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h1><p>ASCII：American Standard Code for Information Interchange，美国信息互换标准代码。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">英文：1个英文字母（不分大小写）占1个字节空间</span><br><span class="line"></span><br><span class="line">中文：1个中文汉字占2个字节空间</span><br></pre></td></tr></table></figure></div><p><code>ASCII</code> 只有 <code>128</code> 个字符，<code>表示英文字母的大小写、数字和一些符号</code>，但由于其他语言用 <code>ASCII</code> 编码表示字节不够。例如：常用中文需要 <code>2</code> 个字节，且不能和ASCII冲突，中国制定了 <code>GB2312</code> 编码格式，相同的，其他国家的语言也有属于自己的编码格式。</p><h1 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h1><p><code>Unicode</code>：<code>统一码</code>，它将世界各种语言里的每一个字符都定义了一个 <code>唯一的编码</code>。这意味着世界上所有的语言都可以使用它，而不会出现冲突。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">英文：1个英文字母占2个字节空间</span><br><span class="line">中文：1个中文汉字（含繁体）占2个字节空间</span><br><span class="line">符号：英文标点占1个字节，中文标点占2个字节。例如：英文句号 `.` 占1个字节，中文句号 。占2个字节</span><br></pre></td></tr></table></figure></div><ol><li>虽然Unicode编码了所有字符，但是在很多情况却不能直接使用它，为什么？</li></ol><p>因为在Unicode中有些字符占一个字节，如：英文字符，有些字符则占两个字节，如：常用汉字。但是当我解码一串中英字符混合的Unicode编码时，我是一次解码一个字节呢还是两个字节呢？UTF-8，UTF-16，UTF-32解决了这个问题。</p><ol start="2"><li>转义字符，反斜杠 \</li></ol><ul><li><p><code>\U</code> 后跟 <code>8位16进制数</code></p></li><li><p><code>\u</code> 后跟 <code>4位16进制数</code></p></li></ul><h1 id="UTF"><a href="#UTF" class="headerlink" title="UTF"></a>UTF</h1><ol><li>UTF-8</li></ol><p>UTF-8：(8-bit Unicode Transformation Format，Unicode转换格式)，它是一种Unicode编码的实现，即 <code>可变长度字符编码</code>。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">英文：1个英文字母占1个字节空间</span><br><span class="line">中文：1个中文汉字（含繁体）占3个字节空间</span><br></pre></td></tr></table></figure></div><p>为了解决上述问题，又出现了 <code>把Unicode编码转化为可变长度编码UTF-8编码</code>，<code>UTF-8编码将Unicode字符按数字大小编码为1-6个字节，英文字母被编码成1个字节，常用汉字被编码成3个字节</code>，如果你编译的文本是纯英文的，那么用UTF-8就会非常节省空间，并且ASCII码也是UTF-8的一部分。</p><ol start="2"><li>进一步理解</li></ol><p><code>UTF-8编码</code> 为 <code>变长编码</code>。最小编码单位（code unit）为一个字节。一个字节的前1-3个bit为描述性部分，后面为实际序号部分。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308090916608.png"                                     ></p><ul><li><p><code>0xxxxxxx</code>：如果是这样的格式，表示在 <code>UTF-8</code> 中这个 <code>字符</code> 用这 <code>一个字节</code> 即可表示，读取这一个字节即可解码成一个字符。因为第一位已经规定为 <code>0</code>，所以只有 <code>7</code> 位能用来放置Unicode编码。</p></li><li><p><code>110xxxxx 10xxxxxx</code>：如果是这样的格式，则表示在 <code>UTF-8</code> 种这个 <code>字符</code> 用 <code>两个字节</code> 可以表示，读取两个字节可以解码成一个字符。<code>110</code> 表示此字节为开头字节，<code>10</code> 表示此字节不是开头字节。因为第有5位已经固定，所以仅有11位可以用于存放Unicode编码。</p></li><li><p><code>1110xxxx 10xxxxxx 10xxxxxx</code>：如果一个字节以 <code>1110</code> 开头，那么代表当前 <code>字符</code> 为 <code>三字节字符</code>，占用3个字节的空间。<code>110</code> 之后的所有部分（5个bit）加上后两个字节的除 <code>10</code> 外的部分（12个bit）代表在Unicode中的序号。且第二、第三个字节以10开头。</p></li></ul><p>来看一个UTF-8的例子：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308090920510.png"                                     ></p><p>发现其中规律：</p><ul><li><p>1个字节的UTF-8十六进制编码是以比8小的数字开头的</p></li><li><p>2个字节的UTF-8十六进制编码是以C或D开头的</p></li><li><p>3个字节的UTF-8十六进制编码是以E开头的</p></li></ul><h1 id="UTF-8、UTF-16和UTF-32区别"><a href="#UTF-8、UTF-16和UTF-32区别" class="headerlink" title="UTF-8、UTF-16和UTF-32区别"></a>UTF-8、UTF-16和UTF-32区别</h1><ul><li><p><code>utf-32</code> 是采用每个字符 使用 <code>4个字节</code> 进行存储。</p></li><li><p><code>utf-16</code> 是采用每个字符 使用 <code>2或4个字节</code> 进行存储。</p><ul><li><p>U+0000 ~ U+FFFF：使用两个字节表示。</p></li><li><p>U+10000 ~ U+10FFFF：使用四个字节表示</p></li></ul></li><li><p>utf-8 比较特殊，它是 <code>变化的</code>，根据字符的长度来动态变化，来表示实现编码。</p><ul><li>utf-8 遇到纯英文，就用1个字节，8bit位变化来实现，</li><li>utf-8 遇到中文，用2个字节，16bit位变化来实现。</li><li>utf-8 遇到韩文，用3个字节，24bit位变化来实现。</li></ul></li></ul><h1 id="Unicode-和-UTF-8"><a href="#Unicode-和-UTF-8" class="headerlink" title="Unicode 和 UTF-8"></a>Unicode 和 UTF-8</h1><p><code>Unicode</code> 就是上文中提到的 <code>编码字符集</code>，而 <code>UTF-8就是字符编码</code>，即Unicode规则字库的一种实现形式。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308090915116.png"                                     ></p><h1 id="三种编码之间的联系"><a href="#三种编码之间的联系" class="headerlink" title="三种编码之间的联系"></a>三种编码之间的联系</h1><p>在计算机系统通用的字符编码工作方式：</p><ol><li>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换成UTF-8编码</li><li>用记事本编辑的时候，从文件读取的UTF-8字符被转换成Unicode字符到内存中，编辑完成后，保存的时候把Unicode转换为UTF-8保存到文件，如下图：</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308090857948.png"                                     ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;编码历史&quot;&gt;&lt;a href=&quot;#编码历史&quot; class=&quot;headerlink&quot; title=&quot;编码历史&quot;&gt;&lt;/a&gt;编码历史&lt;/h1&gt;&lt;p&gt;最早只有 &lt;code&gt;128&lt;/code&gt; 个字符被编码到计算机里，也就是 &lt;code&gt;大小写英文字母、数字和一些符号&lt;/c</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="OC-网络学习" scheme="https://www.bboyzj.cn/tags/OC-%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>OC网络学习25：OpenSSL探索</title>
    <link href="https://www.bboyzj.cn/2023/08/03/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A025%EF%BC%9AOpenSSL%E6%8E%A2%E7%B4%A2/"/>
    <id>https://www.bboyzj.cn/2023/08/03/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A025%EF%BC%9AOpenSSL%E6%8E%A2%E7%B4%A2/</id>
    <published>2023-08-03T08:34:02.000Z</published>
    <updated>2023-08-12T08:48:01.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Openssl-之-SSL"><a href="#Openssl-之-SSL" class="headerlink" title="Openssl 之 SSL"></a>Openssl 之 SSL</h1><ol><li>什么是SSL</li></ol><ul><li><p><code>SSL(Secure Sockets Layer 安全套接字协议)</code>，及其继任者 <code>安全传输层协议（Transport Layer Security，TLS）</code> 是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层与应用层之间对网络连接进行加密，它最早为Netscape所研发，用以保障在Internet上数据传输的安全，利用数据加密(Encryption)技术，可确保数据在网络上的传输过程中不会被截取及窃听。</p></li><li><p>SSL协议位于TCP&#x2F;IP协议与各种应用层协议之间，为数据通讯提供安全支持。</p></li></ul><ol start="2"><li>SSL协议分层</li></ol><p>SSL协议可分为两层：</p><ul><li><p>SSL记录协议（SSL Record Protocol）—— 它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。</p></li><li><p>SSL握手协议（SSL Handshake Protocol）—— 它建立在SSL记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。</p></li></ul><ol start="3"><li>SSL提供的服务</li></ol><p>SSL提供的服务：</p><ul><li>认证用户和服务器，确保数据发送到正确的客户机和服务器；</li><li>加密数据以防止数据中途被窃取；</li><li>维护数据的完整性，确保数据在传输过程中不被改变。</li></ul><h1 id="SSL开发流程"><a href="#SSL开发流程" class="headerlink" title="SSL开发流程"></a>SSL开发流程</h1><ol><li>开发流程图</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308031634123.png"                                     ></p><p>由图可知：</p><p>无论是服务端还是客户端，进行一次完整的SSL通讯，大致可以抽像为以下几个步骤：</p><p>1）初使化SSL环境。<br>2）创建SSL上下文。<br>3）配置SSL上下文证书及公钥信息。<br>4）创建SSL上下文。<br>5）创建TCP通讯端口。<br>6）建立SSL和TCP通讯端口的关联。<br>7）执行SSL握手。<br>8）执行SSL数据读写交互。<br>9）关闭SSL连接。<br>10）关闭TCP通讯端口。<br>11）释放SSL上下文。</p><ol start="2"><li>SSL服务端接口调用流程图</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308031636264.png"                                     ></p><ol start="3"><li>SSL客户端接口调用流程图</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308031639532.png"                                     ></p><h1 id="主要接口："><a href="#主要接口：" class="headerlink" title="主要接口："></a>主要接口：</h1><p>SSL接口的主要头文件在ssl中。我们根据SSL通讯的流程摘录如下：</p><ol><li>初使化SSL环境。</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">通常用得比较多的是这三个函数：</span><br><span class="line">// 初始化SSL库</span><br><span class="line">SSL_library_init()</span><br><span class="line">// 加载所有SSL算法</span><br><span class="line">OpenSSL_add_ssl_algorithms()</span><br><span class="line">// 载入所有SSL错误消息</span><br><span class="line">SSL_load_error_strings()</span><br></pre></td></tr></table></figure></div><p>在1.1.1版本的定义中是这样的：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># if OPENSSL_API_COMPAT &lt; 0x10100000L</span><br><span class="line">#  define SSL_library_init() OPENSSL_init_ssl(0, NULL)</span><br><span class="line"># endif</span><br><span class="line"></span><br><span class="line"># if OPENSSL_API_COMPAT &lt; 0x10100000L</span><br><span class="line">#  define SSL_load_error_strings() \</span><br><span class="line">    OPENSSL_init_ssl(OPENSSL_INIT_LOAD_SSL_STRINGS \</span><br><span class="line">                     | OPENSSL_INIT_LOAD_CRYPTO_STRINGS, NULL)</span><br><span class="line"># endif</span><br><span class="line"></span><br><span class="line"># if OPENSSL_API_COMPAT &lt; 0x10100000L</span><br><span class="line">#  define OpenSSL_add_ssl_algorithms()   SSL_library_init()</span><br><span class="line">#  define SSLeay_add_ssl_algorithms()    SSL_library_init()</span><br><span class="line"># endif</span><br><span class="line"></span><br><span class="line">int OPENSSL_init_ssl(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings);</span><br></pre></td></tr></table></figure></div><p>可以看到，上面图示中的 <code>OpenSSL_add_ssl_algorithms()</code> 这一步是多余的，通常初使化只需要调用这两个就可以了：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SSL_library_init()</span><br><span class="line">SSL_load_error_strings()</span><br></pre></td></tr></table></figure></div><p>在初使化过程中，<code>SSL_library_init()</code> 注册了所有在SSL APIs中的 <code>加密算法和哈希算法</code>，<code>SSL_load_error_strings()</code> 则加载了所有的 <code>错误描述字符串</code>。</p><ol start="2"><li>创建SSL上下文</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SSL_CTX *SSL_CTX_new(const SSL_METHOD *meth);</span><br></pre></td></tr></table></figure></div><p>这个函数用于 <code>创建SSL上下文</code>，其参数 <code>SSL_METHOD</code> 用于传入SSL的抽象方法集合。</p><p>对于每个 <code>SSL/TSL</code> 来说，有三种APIs可以用来创建一个 <code>SSL_METHOD</code>：</p><p>一个可以用于服务端和客户端，一个只能用于服务端，另外一个只能由于客户端。定义如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const SSL_METHOD *TLS_method(void);</span><br><span class="line">const SSL_METHOD *TLS_server_method(void);</span><br><span class="line">const SSL_METHOD *TLS_client_method(void);</span><br><span class="line"></span><br><span class="line">#define SSLv23_method           TLS_method</span><br><span class="line">#define SSLv23_server_method    TLS_server_method</span><br><span class="line">#define SSLv23_client_method    TLS_client_method</span><br></pre></td></tr></table></figure></div><ol start="3"><li>设置SSL上下文的算法套件信息</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int SSL_CTX_set_cipher_list(SSL_CTX *, const char *str);</span><br></pre></td></tr></table></figure></div><p>成功返回1，失败返回0。</p><p>可用的算法如:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">EDH-RSA-DES-CBC3-SHA</span><br><span class="line">EDH-DSS-DES-CBC3-SHA</span><br><span class="line">DES-CBC3-SHA</span><br><span class="line">DHE-DSS-RC4-SHA</span><br><span class="line">IDEA-CBC-SHA</span><br><span class="line">RC4-SHA</span><br><span class="line">RC4-MD5</span><br><span class="line">EXP1024-DHE-DSS-RC4-SHA</span><br><span class="line">EXP1024-RC4-SHA</span><br><span class="line">EXP1024-DHE-DSS-DES-CBC-SHA</span><br><span class="line">EXP1024-DES-CBC-SHA</span><br><span class="line">EXP1024-RC2-CBC-MD5</span><br><span class="line">EXP1024-RC4-MD5</span><br><span class="line">EDH-RSA-DES-CBC-SHA</span><br><span class="line">EDH-DSS-DES-CBC-SHA</span><br><span class="line">DES-CBC-SHA</span><br><span class="line">EXP-EDH-RSA-DES-CBC-SHA</span><br><span class="line">EXP-EDH-DSS-DES-CBC-SHA</span><br><span class="line">EXP-DES-CBC-SHA</span><br><span class="line">EXP-RC2-CBC-MD5</span><br><span class="line">EXP-RC4-MD5</span><br></pre></td></tr></table></figure></div><p>这些算法按一定 <code>优先级排列</code>,如果不作任何指定，将选用 <code>DES-CBC3-SHA</code>，用<code>SSL_CTX_set_cipher_list</code> 可以指定自己希望用的算法(实际上只是 提高其优先级,是否能使用还要看对方是否支持)。</p><ol start="4"><li>配置SSL上下文证书及公钥信息。</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int SSL_CTX_use_PrivateKey_file(SSL_CTX *ctx, const char *file, int type);</span><br><span class="line"></span><br><span class="line">int SSL_CTX_use_certificate_file(SSL_CTX *ctx, const char *file, int type);</span><br></pre></td></tr></table></figure></div><p>这两个函数用于 <code>加载私钥和证书文件</code>。</p><p>成功返回1，失败返回0。</p><p>其中，type的取值：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># define SSL_FILETYPE_ASN1       X509_FILETYPE_ASN1</span><br><span class="line"># define SSL_FILETYPE_PEM        X509_FILETYPE_PEM</span><br><span class="line">即</span><br><span class="line"># define X509_FILETYPE_PEM       1</span><br><span class="line"># define X509_FILETYPE_ASN1      2</span><br></pre></td></tr></table></figure></div><p>也可以直接使用 <code>二进制结构和ASN1序列化</code> 的内存数据：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int SSL_CTX_use_RSAPrivateKey(SSL_CTX *ctx, RSA *rsa);</span><br><span class="line">int SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX *ctx, const unsigned char *d, long len);</span><br><span class="line">int SSL_CTX_use_certificate(SSL_CTX *ctx, X509 *x);</span><br><span class="line">int SSL_CTX_use_certificate_ASN1(SSL_CTX *ctx, int len, const unsigned char *d);</span><br></pre></td></tr></table></figure></div><p><code>int SSL_CTX_check_private_key(const SSL_CTX *ctx);</code> 在完成 <code>私钥和证书</code> 加载后，这个函数由于检查二者是否匹配。成功返回1，失败返回0。</p><ol start="5"><li>创建SSL上下文</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SSL *SSL_new(SSL_CTX *ctx);</span><br></pre></td></tr></table></figure></div><p>创建SSL结构，SSL的连接信息都保存在SSL结构中。</p><p>新的SSL结构会从SSL_CTX结构中继承包括，连接类型、选项、验证方式以及超时。</p><ol start="6"><li>创建TCP通讯端口。</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark -- Socket连接服务端</span><br><span class="line">- (void)connectToHost:(NSString *)host onPort:(int)port &#123;</span><br><span class="line">    _host = host;</span><br><span class="line">    _port = port;</span><br><span class="line">    </span><br><span class="line">    if (!host || !port) &#123;</span><br><span class="line">        [self closeWithError:[self otherError:@&quot;host/port error&quot;]];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /*</span><br><span class="line">      1.初始化socket</span><br><span class="line">     a.参数domain指明通信域，如PF_UNIX(unix域)，PF_INET(IPv4)，PF_INET6(IPv6)等</span><br><span class="line">     b.type 指明通信类型，最常用的如SOCK_STREAM(面向连接可靠方式，  比如TCP)、</span><br><span class="line">        SOCK_DGRAM(非面向连接的非可靠方式，比如UDP)等。  SOCK_STREAM 是数据流,一般是tcp/ip协议的编程,SOCK_DGRAM分是数据抱,是udp协议网络编程。</span><br><span class="line">     c.参数protocol指定需要使用的协议。虽然可以对同一个协议  家族(protocol family)</span><br><span class="line">        (或者说通信域(domain))指定不同的协议  参数，</span><br><span class="line">        但是通常只有一个。对于TCP参数可指定为IPPROTO_TCP,对于  UDP可以用IPPROTO_UDP。你不必显式制定这个参数，使用0则根据前两个参数使用默认的协议</span><br><span class="line">     */</span><br><span class="line">    _socketFD = socket(PF_INET, SOCK_STREAM, 0);</span><br><span class="line">    if (_socketFD == -1) &#123;</span><br><span class="line">        [self closeWithError:[self otherError:@&quot;socket error&quot;]];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /* 2.向服务器发送socket连接请求 */</span><br><span class="line">    struct sockaddr_in connectAddr;</span><br><span class="line">    unsigned long ulIPV4 = [self DnsToIP:[host UTF8String]];</span><br><span class="line">    connectAddr.sin_family       = PF_INET;</span><br><span class="line">    connectAddr.sin_port         = htons(port);</span><br><span class="line">    connectAddr.sin_addr.s_addr  = (in_addr_t)(ulIPV4);</span><br><span class="line">    memset(&amp;(connectAddr.sin_zero),&#x27;\0&#x27;,8);</span><br><span class="line">    // 连接（0 连接成功，-1 连接失败）</span><br><span class="line">    int result = connect(_socketFD, (struct sockaddr*)&amp;connectAddr, sizeof(connectAddr));</span><br><span class="line">    if (result == 0) &#123; // 连接成功</span><br><span class="line">        [self didConnect];</span><br><span class="line">    &#125; else &#123; // 连接失败</span><br><span class="line">        [self closeWithError:[self otherError:@&quot;connect error&quot;]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="7"><li>建立SSL和TCP通讯端口的关联</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 成功返回1，失败返回0。</span><br><span class="line">int SSL_set_fd(SSL *s, int fd);</span><br></pre></td></tr></table></figure></div><p>或：也可以直接使用BIO代替:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BIO* bio = BIO_new_socket(socket, BIO_NOCLOSE);</span><br><span class="line">SSL_set_bio(ssl, bio, bio);</span><br></pre></td></tr></table></figure></div><ol start="8"><li>执行SSL握手</li></ol><p>SSL握手过程是一个复杂过程，涉及到重要的 <code>加密秘钥交换</code>。</p><p>但是握手过程可以通过 <code>服务端调用SSL_accept()</code> 和 <code>客户端调用SSL_connect()</code> 完成。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 成功返回1，失败返回 &lt;=0</span><br><span class="line">int SSL_accept(SSL *ssl);</span><br><span class="line"></span><br><span class="line">// 成功返回1，失败返回 &lt;=0</span><br><span class="line">int SSL_connect(SSL *ssl);</span><br></pre></td></tr></table></figure></div><p>这两个函数是可以重复调用的，这个特性在非阻塞模式下尤为明显。</p><p>此外，在 <code>握手完成</code> 后，可通过调用 <code>SSL_get_peer_certificate</code> 来 <code>获取对端的证书</code>:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X509 *SSL_get_peer_certificate(const SSL *s);</span><br></pre></td></tr></table></figure></div><p>如果对方存在证书，就可以调用X509的相关函数提取证书的身份信息，比如：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X509_NAME *X509_get_subject_name(X509 *a);</span><br></pre></td></tr></table></figure></div><ol start="9"><li>执行SSL数据读写交互</li></ol><p>在SSL握手完成后，数据就可以通过已经建立好的连接安全的发送了。</p><p>不要再使用send、recv函数，而是要使用 <code>SSL_write</code> 和 <code>SSL_read</code> 。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int SSL_read(SSL *ssl, void *buf, int num);</span><br><span class="line">int SSL_write(SSL *ssl, const void *buf, int num);</span><br></pre></td></tr></table></figure></div><p>与send、recv用法相似。</p><p>成功返回发送或接收的字节数，失败返回 &lt;&#x3D;0。</p><p>当返回值 &lt;0（通常为-1）时，应检查错误码，尤其是在非阻塞模式时。</p><ul><li>错误码可使用 <code>SSL_get_error()</code> 函数获取，其定义为：</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int SSL_get_error(const SSL *s, int ret_code);</span><br></pre></td></tr></table></figure></div><ol start="10"><li>关闭SSL连接。</li></ol><p>当关闭SSL连接时，SSL客户端和服务端需要发送 <code>close_notify</code> 消息，通知对端SSL将要关闭了，调用 <code>SSL_shutdown</code> 函数来发送 <code>close_notify</code> 消息。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 成功返回1，失败返回 &lt;=0</span><br><span class="line">int SSL_shutdown(SSL *s);</span><br></pre></td></tr></table></figure></div><p>关闭过包含以下两个步骤：</p><p>1）发送一个 <code>close_notify</code> 关闭告警。<br>2）从对端接收一个 <code>close_notify</code> 的关闭消息。</p><ul><li>发起关闭的客户端或者服务端可以调用 <code>SSL_shutdown</code> 一次或者两次。</li><li>如果调用了两次，一次调用用于发送 <code>close_notify</code> 消息，另外一次用于响应对端的。</li><li>如果只调用一次，发起关闭一端将不会等待对端的响应(发起关闭的一端不需要等待对端的关闭响应，一旦收到对端关闭消息就要马上发送关闭响应。</li></ul><ol start="11"><li>关于TCP通讯端口。</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(_socketFD &gt; 0)&#123;</span><br><span class="line">    close(_socketFD);</span><br><span class="line">    _socketFD = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="12"><li>释放SSL上下文。</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void SSL_free(SSL *ssl);</span><br><span class="line">void SSL_CTX_free(SSL_CTX *);</span><br></pre></td></tr></table></figure></div><h1 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a>使用举例</h1><ol><li>阻塞模式用法</li></ol><ul><li>服务端代码</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;openssl/ssl.h&gt;</span><br><span class="line">#include &lt;openssl/err.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line"></span><br><span class="line">#define SSL_print_error_and_freectx() \</span><br><span class="line">    ERR_print_errors_fp(stdout); \</span><br><span class="line">    SSL_CTX_free(ctx);</span><br><span class="line"></span><br><span class="line">int listenLocal(unsigned short uPort)</span><br><span class="line">&#123;</span><br><span class="line">    int sockS = socket(AF_INET, SOCK_STREAM, 0);</span><br><span class="line">    if (sockS &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;socket() error! \n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct sockaddr_in sin;</span><br><span class="line">    sin.sin_family = AF_INET;</span><br><span class="line">    sin.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    sin.sin_port = htons(uPort);</span><br><span class="line"></span><br><span class="line">    int ret = bind(sockS, (struct sockaddr*)&amp;sin, sizeof(sin));</span><br><span class="line">    if (ret &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;bind() error! \n&quot;);</span><br><span class="line">        close(sockS);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    listen(sockS, 50);</span><br><span class="line"></span><br><span class="line">    return sockS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    SSL_library_init();</span><br><span class="line">    SSL_load_error_strings();</span><br><span class="line"></span><br><span class="line">    SSL_CTX* ctx = SSL_CTX_new( SSLv23_server_method() );</span><br><span class="line">    if (ctx == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        ERR_print_errors_fp(stdout);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int ret = SSL_CTX_use_certificate_file(ctx, &quot;test.crt&quot;, SSL_FILETYPE_PEM);</span><br><span class="line">    if (ret != 1)</span><br><span class="line">    &#123;</span><br><span class="line">        SSL_print_error_and_freectx();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = SSL_CTX_use_PrivateKey_file(ctx, &quot;test.key&quot;, SSL_FILETYPE_PEM);</span><br><span class="line">    if (ret != 1)</span><br><span class="line">    &#123;</span><br><span class="line">        SSL_print_error_and_freectx();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = SSL_CTX_check_private_key(ctx);</span><br><span class="line">    if (ret != 1)</span><br><span class="line">    &#123;</span><br><span class="line">        SSL_print_error_and_freectx();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int sockS = listenLocal(9999);</span><br><span class="line">    if (sockS &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        SSL_CTX_free(ctx);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while (true)</span><br><span class="line">    &#123;</span><br><span class="line">        struct sockaddr_in sinfrom;</span><br><span class="line">        socklen_t sinfromlen = sizeof(sinfrom);</span><br><span class="line">        int sockC = accept(sockS, (struct sockaddr*)&amp;sinfrom, &amp;sinfromlen);</span><br><span class="line">        if (sockC &lt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;accept() error! \n&quot;);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        printf(&quot;accpet connect:[%d - %s:%d] \n&quot;, sockC, inet_ntoa(sinfrom.sin_addr), ntohs(sinfrom.sin_port));</span><br><span class="line"></span><br><span class="line">        SSL* ssl = SSL_new(ctx);</span><br><span class="line">        SSL_set_fd(ssl, sockC);</span><br><span class="line"></span><br><span class="line">        do</span><br><span class="line">        &#123;</span><br><span class="line">            ret = SSL_accept(ssl);</span><br><span class="line">            if (ret != 1)</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;SSL handshake failed! \n&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            printf(&quot;SSL handshake success! \n&quot;);</span><br><span class="line"></span><br><span class="line">            SSL_write(ssl, &quot;hello&quot;, 5);</span><br><span class="line"></span><br><span class="line">            while (true)</span><br><span class="line">            &#123;</span><br><span class="line">                char sBuf[1024] = &#123;0&#125;;</span><br><span class="line">                int bytesin = SSL_read(ssl, sBuf, sizeof(sBuf)-1);</span><br><span class="line">                if (bytesin &lt;= 0)</span><br><span class="line">                &#123;</span><br><span class="line">                    printf(&quot;error or disconnect! \n&quot;);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                printf(&quot;read:[%s] \n&quot;, sBuf);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            SSL_shutdown(ssl);</span><br><span class="line">        &#125; while(0);</span><br><span class="line"></span><br><span class="line">        SSL_free(ssl);</span><br><span class="line">        close(sockC);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(sockS);</span><br><span class="line">    SSL_CTX_free(ctx);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>客户端代码</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;openssl/ssl.h&gt;</span><br><span class="line">#include &lt;openssl/err.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line"></span><br><span class="line">int connectPeer(const char* sIp, unsigned short uPort)</span><br><span class="line">&#123;</span><br><span class="line">    int sockC = socket(AF_INET, SOCK_STREAM, 0);</span><br><span class="line">    if (sockC &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;socket() errror! \n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct sockaddr_in sin;</span><br><span class="line">    sin.sin_family = AF_INET;</span><br><span class="line">    sin.sin_addr.s_addr = inet_addr(sIp);</span><br><span class="line">    sin.sin_port = htons(uPort);</span><br><span class="line"></span><br><span class="line">    int ret = connect(sockC, (struct sockaddr*)&amp;sin, sizeof(sin));</span><br><span class="line">    if (ret &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;connect() failed! \n&quot;);</span><br><span class="line">        close(sockC);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return sockC;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void showCert(SSL* ssl)</span><br><span class="line">&#123;</span><br><span class="line">    X509* x509 = SSL_get_peer_certificate(ssl);</span><br><span class="line"></span><br><span class="line">    if (x509)</span><br><span class="line">    &#123;</span><br><span class="line">        const char* subjectname = X509_NAME_oneline(X509_get_subject_name(x509), 0, 0);</span><br><span class="line">        printf(&quot;subject name:[%s] \n&quot;, subjectname);</span><br><span class="line"></span><br><span class="line">        const char* issuername = X509_NAME_oneline(X509_get_issuer_name(x509), 0, 0);</span><br><span class="line">        printf(&quot;issuer name:[%s] \n&quot;, issuername);</span><br><span class="line">        </span><br><span class="line">        X509_free(x509);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    SSL_library_init();</span><br><span class="line">    SSL_load_error_strings();</span><br><span class="line"></span><br><span class="line">    SSL_CTX* ctx = SSL_CTX_new( SSLv23_client_method() );</span><br><span class="line">    if (ctx == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        ERR_print_errors_fp(stdout);</span><br><span class="line">        SSL_CTX_free(ctx);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int sockC = connectPeer(&quot;127.0.0.1&quot;, 9999);</span><br><span class="line">    if (sockC &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        SSL_CTX_free(ctx);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SSL* ssl = SSL_new(ctx);</span><br><span class="line">    SSL_set_fd(ssl, sockC);</span><br><span class="line"></span><br><span class="line">    do</span><br><span class="line">    &#123;</span><br><span class="line">        int ret = SSL_connect(ssl);</span><br><span class="line">        if (ret != 1)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;SSL handshake failed! \n&quot;);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;SSL handshake success! \n&quot;);</span><br><span class="line"></span><br><span class="line">        showCert(ssl);</span><br><span class="line"></span><br><span class="line">        char sBuf[1024] = &#123;0&#125;;</span><br><span class="line">        int bytesin = SSL_read(ssl, sBuf, sizeof(sBuf)-1);</span><br><span class="line">        if (bytesin &lt;= 0)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;disconnect! \n&quot;);</span><br><span class="line">            SSL_shutdown(ssl);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        printf(&quot;read:[%s] \n&quot;, sBuf);</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; 3; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            SSL_write(ssl, &quot;hello&quot;, 5);</span><br><span class="line">            sleep(1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SSL_shutdown(ssl);</span><br><span class="line">    &#125; while (0);</span><br><span class="line"></span><br><span class="line">    SSL_free(ssl);</span><br><span class="line">    close(sockC);</span><br><span class="line"></span><br><span class="line">    SSL_CTX_free(ctx);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="2"><li>非阻塞模式用法：</li></ol><p>对非阻塞套接字来说，<code>SSL_read()</code> 和 <code>SSL_write()</code> 的调用通常会返回-1，这并不是真正表示收发失败了，大多可能的原因是套接字的缓冲不可用，我们需要稍后进行尝试。只不过，在非阻塞模式下，采用主动尝试的方法通常都不可取，正式的场合应该使用异步事件模型。</p><p>下面的代码出于简单性，暂时采用稍后尝试的方法。代码示例如下：</p><ul><li>服务端代码</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;openssl/ssl.h&gt;</span><br><span class="line">#include &lt;openssl/err.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line"></span><br><span class="line">#define SSL_print_error_and_freectx() \</span><br><span class="line">    ERR_print_errors_fp(stdout); \</span><br><span class="line">    SSL_CTX_free(ctx);</span><br><span class="line"></span><br><span class="line">int listenLocal(unsigned short uPort)</span><br><span class="line">&#123;</span><br><span class="line">    int sockS = socket(AF_INET, SOCK_STREAM, 0);</span><br><span class="line">    if (sockS &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;socket() error! \n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct sockaddr_in sin;</span><br><span class="line">    sin.sin_family = AF_INET;</span><br><span class="line">    sin.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    sin.sin_port = htons(uPort);</span><br><span class="line"></span><br><span class="line">    int ret = bind(sockS, (struct sockaddr*)&amp;sin, sizeof(sin));</span><br><span class="line">    if (ret &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;bind() error! \n&quot;);</span><br><span class="line">        close(sockS);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    listen(sockS, 50);</span><br><span class="line"></span><br><span class="line">    return sockS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    SSL_library_init();</span><br><span class="line">    SSL_load_error_strings();</span><br><span class="line"></span><br><span class="line">    SSL_CTX* ctx = SSL_CTX_new( SSLv23_server_method() );</span><br><span class="line">    if (ctx == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        ERR_print_errors_fp(stdout);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int ret = SSL_CTX_use_certificate_file(ctx, &quot;test.crt&quot;, SSL_FILETYPE_PEM);</span><br><span class="line">    if (ret != 1)</span><br><span class="line">    &#123;</span><br><span class="line">        SSL_print_error_and_freectx();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = SSL_CTX_use_PrivateKey_file(ctx, &quot;test.key&quot;, SSL_FILETYPE_PEM);</span><br><span class="line">    if (ret != 1)</span><br><span class="line">    &#123;</span><br><span class="line">        SSL_print_error_and_freectx();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = SSL_CTX_check_private_key(ctx);</span><br><span class="line">    if (ret != 1)</span><br><span class="line">    &#123;</span><br><span class="line">        SSL_print_error_and_freectx();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int sockS = listenLocal(9999);</span><br><span class="line">    if (sockS &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        SSL_CTX_free(ctx);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while (true)</span><br><span class="line">    &#123;</span><br><span class="line">        struct sockaddr_in sinfrom;</span><br><span class="line">        socklen_t sinfromlen = sizeof(sinfrom);</span><br><span class="line">        int sockC = accept(sockS, (struct sockaddr*)&amp;sinfrom, &amp;sinfromlen);</span><br><span class="line">        if (sockC &lt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;accept() error! \n&quot;);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        printf(&quot;accpet connect:[%d - %s:%d] \n&quot;, sockC, inet_ntoa(sinfrom.sin_addr), ntohs(sinfrom.sin_port));</span><br><span class="line"></span><br><span class="line">        fcntl(sockC, F_SETFL, fcntl(sockC, F_GETFL) | O_NONBLOCK);</span><br><span class="line"></span><br><span class="line">        SSL* ssl = SSL_new(ctx);</span><br><span class="line">        SSL_set_fd(ssl, sockC);</span><br><span class="line"></span><br><span class="line">        do</span><br><span class="line">        &#123;</span><br><span class="line">            bool bHandShake = false;</span><br><span class="line">            while (true)</span><br><span class="line">            &#123;</span><br><span class="line">                ret = SSL_accept(ssl);</span><br><span class="line">                printf(&quot;SSL_accept() ret:[%d] \n&quot;, ret);</span><br><span class="line">                if (ret != 1)</span><br><span class="line">                &#123;</span><br><span class="line">                    int err = SSL_get_error(ssl, ret);</span><br><span class="line">                    if (err == SSL_ERROR_WANT_READ || err == SSL_ERROR_WANT_WRITE)</span><br><span class="line">                    &#123;</span><br><span class="line">                        printf(&quot;want read or write... \n&quot;);</span><br><span class="line">                        usleep(1000);</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                bHandShake = true;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (!bHandShake)</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;SSL handshake failed! \n&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            printf(&quot;SSL handshake success! \n&quot;);</span><br><span class="line"></span><br><span class="line">            SSL_write(ssl, &quot;hello&quot;, 5);</span><br><span class="line"></span><br><span class="line">            while (true)</span><br><span class="line">            &#123;</span><br><span class="line">                char sBuf[1024] = &#123;0&#125;;</span><br><span class="line">                int bytesin = SSL_read(ssl, sBuf, sizeof(sBuf)-1);</span><br><span class="line">                if (bytesin &lt; 0)</span><br><span class="line">                &#123;</span><br><span class="line">                    int err = SSL_get_error(ssl, -1);</span><br><span class="line">                    if (err == SSL_ERROR_WANT_READ)</span><br><span class="line">                    &#123;</span><br><span class="line">                        printf(&quot;want read... \n&quot;);</span><br><span class="line">                        usleep(100000);</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    printf(&quot;read error! \n&quot;);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (bytesin == 0)</span><br><span class="line">                &#123;</span><br><span class="line">                    printf(&quot;disconnect! \n&quot;);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                printf(&quot;read:[%s] \n&quot;, sBuf);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            SSL_shutdown(ssl);</span><br><span class="line">        &#125; while(0);</span><br><span class="line"></span><br><span class="line">        SSL_free(ssl);</span><br><span class="line">        close(sockC);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(sockS);</span><br><span class="line">    SSL_CTX_free(ctx);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>客户端代码</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;openssl/ssl.h&gt;</span><br><span class="line">#include &lt;openssl/err.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line"></span><br><span class="line">int connectPeer(const char* sIp, unsigned short uPort)</span><br><span class="line">&#123;</span><br><span class="line">    int sockC = socket(AF_INET, SOCK_STREAM, 0);</span><br><span class="line">    if (sockC &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;socket() errror! \n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct sockaddr_in sin;</span><br><span class="line">    sin.sin_family = AF_INET;</span><br><span class="line">    sin.sin_addr.s_addr = inet_addr(sIp);</span><br><span class="line">    sin.sin_port = htons(uPort);</span><br><span class="line"></span><br><span class="line">    int ret = connect(sockC, (struct sockaddr*)&amp;sin, sizeof(sin));</span><br><span class="line">    if (ret &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;connect() failed! \n&quot;);</span><br><span class="line">        close(sockC);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return sockC;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void showCert(SSL* ssl)</span><br><span class="line">&#123;</span><br><span class="line">    X509* x509 = SSL_get_peer_certificate(ssl);</span><br><span class="line"></span><br><span class="line">    if (x509)</span><br><span class="line">    &#123;</span><br><span class="line">        const char* subjectname = X509_NAME_oneline(X509_get_subject_name(x509), 0, 0);</span><br><span class="line">        printf(&quot;subject name:[%s] \n&quot;, subjectname);</span><br><span class="line"></span><br><span class="line">        const char* issuername = X509_NAME_oneline(X509_get_issuer_name(x509), 0, 0);</span><br><span class="line">        printf(&quot;issuer name:[%s] \n&quot;, issuername);</span><br><span class="line"></span><br><span class="line">        X509_free(x509);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    SSL_library_init();</span><br><span class="line">    SSL_load_error_strings();</span><br><span class="line"></span><br><span class="line">    SSL_CTX* ctx = SSL_CTX_new( SSLv23_client_method() );</span><br><span class="line">    if (ctx == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        ERR_print_errors_fp(stdout);</span><br><span class="line">        SSL_CTX_free(ctx);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int sockC = connectPeer(&quot;127.0.0.1&quot;, 9999);</span><br><span class="line">    if (sockC &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        SSL_CTX_free(ctx);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fcntl(sockC, F_SETFL, fcntl(sockC, F_GETFL) | O_NONBLOCK);</span><br><span class="line"></span><br><span class="line">    SSL* ssl = SSL_new(ctx);</span><br><span class="line">    SSL_set_fd(ssl, sockC);</span><br><span class="line"></span><br><span class="line">    do</span><br><span class="line">    &#123;</span><br><span class="line">        bool bHandShake = false;</span><br><span class="line">        while (true)</span><br><span class="line">        &#123;</span><br><span class="line">            int ret = SSL_connect(ssl);</span><br><span class="line">            printf(&quot;SSL_connect() ret:[%d] \n&quot;, ret);</span><br><span class="line">            if (ret != 1)</span><br><span class="line">            &#123;</span><br><span class="line">                int err = SSL_get_error(ssl, -1);</span><br><span class="line">                if (err == SSL_ERROR_WANT_READ || err == SSL_ERROR_WANT_WRITE)</span><br><span class="line">                &#123;</span><br><span class="line">                    printf(&quot;want read or write... \n&quot;);</span><br><span class="line">                    usleep(1000);</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            bHandShake = true;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!bHandShake)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;SSL handshake failed! \n&quot;);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        printf(&quot;SSL handshake success! \n&quot;);</span><br><span class="line"></span><br><span class="line">        showCert(ssl);</span><br><span class="line"></span><br><span class="line">        bool bShutDown = false;</span><br><span class="line">        while (true)</span><br><span class="line">        &#123;</span><br><span class="line">            char sBuf[1024] = &#123;0&#125;;</span><br><span class="line">            int bytesin = SSL_read(ssl, sBuf, sizeof(sBuf)-1);</span><br><span class="line">            if (bytesin &lt; 0)</span><br><span class="line">            &#123;</span><br><span class="line">                int err = SSL_get_error(ssl, -1);</span><br><span class="line">                if (err == SSL_ERROR_WANT_READ)</span><br><span class="line">                &#123;</span><br><span class="line">                    printf(&quot;want read... \n&quot;);</span><br><span class="line">                    usleep(100000);</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                printf(&quot;read error! \n&quot;);</span><br><span class="line">                SSL_shutdown(ssl);</span><br><span class="line">                bShutDown = true;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (bytesin == 0)</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;disconnect! \n&quot;);</span><br><span class="line">                SSL_shutdown(ssl);</span><br><span class="line">                bShutDown = true;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            printf(&quot;read:[%s] \n&quot;, sBuf);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (bShutDown)</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; 3; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            SSL_write(ssl, &quot;hello&quot;, 5);</span><br><span class="line">            sleep(1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SSL_shutdown(ssl);</span><br><span class="line">    &#125; while (0);</span><br><span class="line"></span><br><span class="line">    SSL_free(ssl);</span><br><span class="line">    close(sockC);</span><br><span class="line"></span><br><span class="line">    SSL_CTX_free(ctx);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="实际项目中的应用封装"><a href="#实际项目中的应用封装" class="headerlink" title="实际项目中的应用封装"></a>实际项目中的应用封装</h1><p>我在做国密双向认证的时候使用了：</p><ol><li>GMSocket.h</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">//  JITGMSocket.h</span><br><span class="line">//  GMTest</span><br><span class="line">//</span><br><span class="line">//  Created by JITPlatform001 on 2021/10/29.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line"></span><br><span class="line">@class JITPrivCertInfo;</span><br><span class="line">@class JITSSLInfo;</span><br><span class="line"></span><br><span class="line">@protocol JITSocketDelegate;</span><br><span class="line"></span><br><span class="line">@interface JITGMSocket : NSObject</span><br><span class="line"></span><br><span class="line">+ (instancetype)new NS_UNAVAILABLE;</span><br><span class="line">- (instancetype)init NS_UNAVAILABLE;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 【delegate：必传】</span><br><span class="line"> */</span><br><span class="line">- (instancetype)initWithDelegate:(id&lt;JITSocketDelegate&gt;)delegate;</span><br><span class="line"></span><br><span class="line">- (void)connectToHost:(NSString *)host onPort:(int)port;</span><br><span class="line">/**</span><br><span class="line"> beOneWay：是否为单向认证</span><br><span class="line"> sslInfo：双向认证用到的证书</span><br><span class="line"> */</span><br><span class="line">- (void)startSSL:(BOOL)beOneWay</span><br><span class="line">      andSSLInfo:(JITSSLInfo *)sslInfo;</span><br><span class="line">- (void)disconnect;</span><br><span class="line"></span><br><span class="line">- (int)writeData:(char *)buff</span><br><span class="line">          andLen:(int)len</span><br><span class="line">      andTimeOut:(int)timeout;</span><br><span class="line"></span><br><span class="line">- (int)readData:(char *)buff</span><br><span class="line">         andLen:(int)len</span><br><span class="line">     andTimeOut:(int)timeout;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@protocol JITSocketDelegate &lt;NSObject&gt;</span><br><span class="line"></span><br><span class="line">@required</span><br><span class="line">- (void)didConnectSocket:(JITGMSocket *)socket host:(NSString *)host port:(int)port;</span><br><span class="line">- (void)didDisconnectSocket:(JITGMSocket *)socket error:(NSError *)error;</span><br><span class="line"></span><br><span class="line">- (void)didWriteData:(JITGMSocket *)socket;</span><br><span class="line">- (void)didReadSocket:(JITGMSocket *)socket data:(NSData *)data;</span><br><span class="line">- (void)didWriteOrRead:(JITGMSocket *)socket</span><br><span class="line">                 error:(NSError *)error;</span><br><span class="line"></span><br><span class="line">- (void)didSecure:(JITGMSocket *)socket error:(NSError *)error;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@interface JITSSLInfo : NSObject</span><br><span class="line">@property (assign, nonatomic) int ciperSuite;   // 加密套件 0:ECC-SM4-SM3 非0:ECDHE-SM4-SM3</span><br><span class="line">@property (strong, nonatomic) JITPrivCertInfo *privCertInfo;    // 签名加密私钥</span><br><span class="line">@property (strong, nonatomic) NSArray *caInfo;  // 根证</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface JITPrivCertInfo : NSObject</span><br><span class="line">@property (strong, nonatomic) NSString *signCertPath;   // 签名证书</span><br><span class="line">@property (strong, nonatomic) NSString *signPrivPath;   // 签名私钥</span><br><span class="line">@property (strong, nonatomic) NSString *encCertPath;    // 加密证书</span><br><span class="line">@property (strong, nonatomic) NSString *encPrivPath;    // 加密私钥</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_END</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ol start="2"><li>GMSocket.m</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">//  JITGMSocket.m</span><br><span class="line">//  GMTest</span><br><span class="line">//</span><br><span class="line">//  Created by JITPlatform001 on 2021/10/29.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#import &quot;JITGMSocket.h&quot;</span><br><span class="line"></span><br><span class="line">#include &lt;netdb.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys/time.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/select.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;openssl/ossl_typ.h&gt;</span><br><span class="line">#include &lt;openssl/ssl.h&gt;</span><br><span class="line">#include &lt;openssl/err.h&gt;</span><br><span class="line"></span><br><span class="line">#define SSL_ERROR_WANT_HSM_RESULT 10</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 是否单向认证</span><br><span class="line"> */</span><br><span class="line">BOOL G_beOneWay = YES;</span><br><span class="line"></span><br><span class="line">@interface JITGMSocket()</span><br><span class="line">&#123;</span><br><span class="line">    __weak id&lt;JITSocketDelegate&gt; _delegate;</span><br><span class="line">    </span><br><span class="line">    int _socketFD;</span><br><span class="line">    NSString *_host;</span><br><span class="line">    int _port;</span><br><span class="line">    </span><br><span class="line">    SSL *m_ssl;</span><br><span class="line">    SSL_CTX *m_ctx;</span><br><span class="line">    </span><br><span class="line">    BOOL _isSecure;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@property (retain, readonly) NSMutableData *sslWriteData;</span><br><span class="line">@property (retain, readonly) NSMutableData *sslReadData;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation JITGMSocket</span><br><span class="line"></span><br><span class="line">#pragma mark -- Life Cycle</span><br><span class="line">- (instancetype)initWithDelegate:(id&lt;JITSocketDelegate&gt;)aDelegate &#123;</span><br><span class="line">    </span><br><span class="line">    if (!aDelegate)</span><br><span class="line">        return nil;</span><br><span class="line">    </span><br><span class="line">    self = [super init];</span><br><span class="line">    if(self) &#123;</span><br><span class="line">        _delegate = aDelegate;</span><br><span class="line">        </span><br><span class="line">        _sslWriteData = [[NSMutableData alloc] init];</span><br><span class="line">        _sslReadData = [[NSMutableData alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)dealloc &#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;,__func__);</span><br><span class="line">    </span><br><span class="line">    [self disconnect];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark -- Socket连接服务端</span><br><span class="line">- (void)connectToHost:(NSString *)host onPort:(int)port &#123;</span><br><span class="line">    _host = host;</span><br><span class="line">    _port = port;</span><br><span class="line">    </span><br><span class="line">    if (!host || !port) &#123;</span><br><span class="line">        [self closeWithError:[self otherError:@&quot;host/port error&quot;]];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /*</span><br><span class="line">      1.初始化socket</span><br><span class="line">     a.参数domain指明通信域，如PF_UNIX(unix域)，PF_INET(IPv4)，PF_INET6(IPv6)等</span><br><span class="line">     b.type 指明通信类型，最常用的如SOCK_STREAM(面向连接可靠方式，  比如TCP)、</span><br><span class="line">        SOCK_DGRAM(非面向连接的非可靠方式，比如UDP)等。  SOCK_STREAM 是数据流,一般是tcp/ip协议的编程,SOCK_DGRAM分是数据抱,是udp协议网络编程。</span><br><span class="line">     c.参数protocol指定需要使用的协议。虽然可以对同一个协议  家族(protocol family)</span><br><span class="line">        (或者说通信域(domain))指定不同的协议  参数，</span><br><span class="line">        但是通常只有一个。对于TCP参数可指定为IPPROTO_TCP,对于  UDP可以用IPPROTO_UDP。你不必显式制定这个参数，使用0则根据前两个参数使用默认的协议</span><br><span class="line">     */</span><br><span class="line">    _socketFD = socket(PF_INET, SOCK_STREAM, 0);</span><br><span class="line">    if (_socketFD == -1) &#123;</span><br><span class="line">        [self closeWithError:[self otherError:@&quot;socket error&quot;]];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /* 2.向服务器发送socket连接请求 */</span><br><span class="line">    struct sockaddr_in connectAddr;</span><br><span class="line">    unsigned long ulIPV4 = [self DnsToIP:[host UTF8String]];</span><br><span class="line">    connectAddr.sin_family       = PF_INET;</span><br><span class="line">    connectAddr.sin_port         = htons(port);</span><br><span class="line">    connectAddr.sin_addr.s_addr  = (in_addr_t)(ulIPV4);</span><br><span class="line">    memset(&amp;(connectAddr.sin_zero),&#x27;\0&#x27;,8);</span><br><span class="line">    // 连接（0 连接成功，-1 连接失败）</span><br><span class="line">    int result = connect(_socketFD, (struct sockaddr*)&amp;connectAddr, sizeof(connectAddr));</span><br><span class="line">    if (result == 0) &#123; // 连接成功</span><br><span class="line">        [self didConnect];</span><br><span class="line">    &#125; else &#123; // 连接失败</span><br><span class="line">        [self closeWithError:[self otherError:@&quot;connect error&quot;]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 域名转ip地址</span><br><span class="line">- (unsigned long)DnsToIP:(const char *)pszDomainName&#123;</span><br><span class="line">    unsigned long dwIP = 0;</span><br><span class="line">    int nAdapter = 0;</span><br><span class="line">    struct sockaddr_in sAddr;</span><br><span class="line">    unsigned long  dwError = -1;</span><br><span class="line"></span><br><span class="line">    dwIP = inet_addr(pszDomainName);</span><br><span class="line">    if( dwIP!=INADDR_NONE &amp;&amp; dwIP!=INADDR_ANY )</span><br><span class="line">    &#123;</span><br><span class="line">        return dwIP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct hostent *pHostEnt = gethostbyname(pszDomainName);</span><br><span class="line">    if( pHostEnt!=NULL )</span><br><span class="line">    &#123;</span><br><span class="line">        while (pHostEnt-&gt;h_addr_list[nAdapter] )</span><br><span class="line">        &#123;</span><br><span class="line">            memcpy(&amp;sAddr.sin_addr.s_addr, pHostEnt-&gt;h_addr_list[nAdapter], pHostEnt-&gt;h_length);</span><br><span class="line">            dwIP = sAddr.sin_addr.s_addr;</span><br><span class="line">            nAdapter++;</span><br><span class="line">            return dwIP;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct addrinfo* pstAddrInfo = NULL;</span><br><span class="line">    struct addrinfo* ptr = NULL;</span><br><span class="line">    struct addrinfo stHints ;</span><br><span class="line">    memset(&amp;stHints, 0, sizeof(stHints));</span><br><span class="line"></span><br><span class="line">    stHints.ai_family = AF_INET;</span><br><span class="line">    stHints.ai_socktype = SOCK_STREAM;</span><br><span class="line">    stHints.ai_protocol = IPPROTO_TCP;</span><br><span class="line">    getaddrinfo(pszDomainName, NULL, &amp;stHints, &amp;pstAddrInfo);</span><br><span class="line">    dwError = 0;</span><br><span class="line">    if (0 == dwError)</span><br><span class="line">    &#123;</span><br><span class="line">        for (ptr = pstAddrInfo; ptr != NULL ;ptr = ptr-&gt;ai_next)</span><br><span class="line">        &#123;</span><br><span class="line">            if (AF_INET == ptr-&gt;ai_family &amp;&amp; SOCK_STREAM == ptr-&gt;ai_socktype &amp;&amp; IPPROTO_TCP == ptr-&gt;ai_protocol)</span><br><span class="line">            &#123;</span><br><span class="line">                struct sockaddr_in *pstAddr_in = (struct sockaddr_in *)ptr-&gt;ai_addr;</span><br><span class="line">                dwIP = pstAddr_in-&gt;sin_addr.s_addr;</span><br><span class="line">                dwError = 0;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    freeaddrinfo(pstAddrInfo);</span><br><span class="line"></span><br><span class="line">    if (dwError == 0) &#123;</span><br><span class="line">        return dwIP;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br><span class="line">// 已经连接</span><br><span class="line">- (void)didConnect &#123;</span><br><span class="line">    if (_delegate &amp;&amp; [_delegate respondsToSelector:@selector(didConnectSocket:host:port:)]) &#123;</span><br><span class="line">        NSLog(@&quot;didSecure&quot;);</span><br><span class="line">        [_delegate didConnectSocket:self host:_host port:_port];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 显示证书</span><br><span class="line">- (void)showCert&#123;</span><br><span class="line">    X509 * cert;</span><br><span class="line">    char * line;</span><br><span class="line">    </span><br><span class="line">    cert = SSL_get_peer_certificate(m_ssl);</span><br><span class="line">    // 如果验证不通过，那么程序抛出异常终止连接</span><br><span class="line">    if (SSL_get_verify_result(m_ssl) == X509_V_OK) &#123;</span><br><span class="line">        NSLog(@&quot;证书验证通过\n&quot;);</span><br><span class="line">        if (cert != NULL) &#123;</span><br><span class="line">            NSLog(@&quot;数字证书信息:\n&quot;);</span><br><span class="line">            line = X509_NAME_oneline(X509_get_subject_name(cert), 0, 0);</span><br><span class="line">            NSLog(@&quot;证书:%s\n&quot;,line);</span><br><span class="line">            free(line);</span><br><span class="line">            </span><br><span class="line">            // 颁发者</span><br><span class="line">            line = X509_NAME_oneline(X509_get_issuer_name(cert), 0, 0);</span><br><span class="line">            NSLog(@&quot;颁发者:%s\n&quot;,line);</span><br><span class="line">            free(line);</span><br><span class="line">            </span><br><span class="line">            // 释放</span><br><span class="line">            X509_free(cert);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            NSLog(@&quot;无证书信息!\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        NSLog(@&quot;证书验证不通过\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark -- STL/SSL 加密通信</span><br><span class="line">- (void)startSSL:(BOOL)beOneWay andSSLInfo:(JITSSLInfo *)sslInfo&#123;</span><br><span class="line">    if (!_delegate) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 1.SSL初始化</span><br><span class="line">    // SSL 库初始化</span><br><span class="line">    SSL_library_init();</span><br><span class="line">    // 载入所有 SSL 算法</span><br><span class="line">    OpenSSL_add_ssl_algorithms();</span><br><span class="line">    // 载入所有 SSL 错误消息</span><br><span class="line">    SSL_load_error_strings();</span><br><span class="line">    </span><br><span class="line">    /* 2.初始化SSL上下文环境(调用成功返回SSL_CTX结构体指针， 否则返回NULL)</span><br><span class="line">     a.SSL_METHOD:代表使用的协议</span><br><span class="line">     SSLv2_server_method()：V2标准</span><br><span class="line">     SSLv3_server_method()：V3标准</span><br><span class="line">     SSLv23_server_method(): V2和V3标准</span><br><span class="line">     CNTLS_client_method(): 国密标准</span><br><span class="line">     */</span><br><span class="line">    if (!m_ctx) &#123;</span><br><span class="line">        m_ctx = SSL_CTX_new((const SSL_METHOD *)CNTLS_client_method());</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    /* 3.设置SSL通信方式 */</span><br><span class="line">    G_beOneWay = beOneWay;</span><br><span class="line">    // 如果是 单向认证(只需要验证SSL服务器身份，不需要验证SSL客户端身份。)</span><br><span class="line">    if (G_beOneWay) &#123;</span><br><span class="line">        // 配置启不启用双向认证（SSL_VERIFY_NONE 不启用,SSL_VERIFY_PEER 启用）</span><br><span class="line">        SSL_CTX_set_verify(m_ctx, SSL_VERIFY_NONE, NULL);</span><br><span class="line">    &#125;</span><br><span class="line">    // 如果是 双向认证(要求服务器和客户端双方都有证书，客户端需要校验服务端，服务端也需要校验客户端。)</span><br><span class="line">    else &#123;</span><br><span class="line">        if (!sslInfo || !sslInfo.privCertInfo || !sslInfo.caInfo) &#123;</span><br><span class="line">            if (_delegate &amp;&amp; [_delegate respondsToSelector:@selector(didSecure:error:)]) &#123;</span><br><span class="line">                [_delegate didSecure:self</span><br><span class="line">                               error:[self sslError:@&quot;sslInfo is null&quot;]];</span><br><span class="line">            &#125;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        /* 如果传输被阻塞，永远不要用重试来打扰应用程序:</span><br><span class="line">           SSL_CTX_set_mode(ctx, SSL_MODE_AUTO_RETRY);</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line">        /* 4.设置信任根证书，加载CA证书 */</span><br><span class="line">        NSArray *caArray = sslInfo.caInfo;</span><br><span class="line">        for (NSString *path in caArray) &#123;</span><br><span class="line">            if (!path) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            NSLog(@&quot;SSL_CTX_load_verify_locations start!&quot;);</span><br><span class="line"></span><br><span class="line">            // SSL_CTX_load_verify_locations:加载信任的根证书</span><br><span class="line">            if (!SSL_CTX_load_verify_locations(m_ctx, (const char *)[path UTF8String], NULL))&#123;</span><br><span class="line">                NSLog(@&quot;SSL_CTX_load_verify_locations error!&quot;);</span><br><span class="line">                ERR_print_errors_fp(stderr);</span><br><span class="line">                if (_delegate &amp;&amp; [_delegate respondsToSelector:@selector(didSecure:error:)]) &#123;</span><br><span class="line">                    [_delegate didSecure:self</span><br><span class="line">                                   error:[self sslError:@&quot;SSL_CTX_load_verify_locations Error&quot;]];</span><br><span class="line">                &#125;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            NSLog(@&quot;SSL_CTX_load_verify_locations ok!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        JITPrivCertInfo *privCertInfo = sslInfo.privCertInfo;</span><br><span class="line"></span><br><span class="line">        /* 5.加载自己的 证书 */</span><br><span class="line">        if (privCertInfo.signCertPath) &#123;</span><br><span class="line">            NSString *strUserCertPath = privCertInfo.signCertPath;</span><br><span class="line">            NSLog(@&quot;SSL_CTX_use_Key_sign_cert start!&quot;);</span><br><span class="line">            if (SSL_CTX_use_certificate_file(m_ctx, (const char *)[strUserCertPath UTF8String], SSL_FILETYPE_PEM) &lt;= 0)&#123;</span><br><span class="line">                NSLog(@&quot;SSL_CTX_use_Key_sign_cert error!&quot;);</span><br><span class="line">                ERR_print_errors_fp(stderr);</span><br><span class="line">                if (_delegate &amp;&amp; [_delegate respondsToSelector:@selector(didSecure:error:)]) &#123;</span><br><span class="line">                    [_delegate didSecure:self</span><br><span class="line">                                   error:[self sslError:@&quot;SSL_CTX_use_Key_sign_cert Error&quot;]];</span><br><span class="line">                &#125;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            NSLog(@&quot;SSL_CTX_use_Key_sign_cert ok!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /* 6.加载自己的 私钥 */</span><br><span class="line">        if (privCertInfo.signPrivPath) &#123;</span><br><span class="line">            NSString *strUserKeyPath = privCertInfo.signPrivPath;</span><br><span class="line">            NSLog(@&quot;SSL_CTX_use_Key_sign_key start!&quot;);</span><br><span class="line">            if (SSL_CTX_use_PrivateKey_file(m_ctx, (const char *)[strUserKeyPath UTF8String], SSL_FILETYPE_PEM) &lt;= 0)&#123;</span><br><span class="line">                NSLog(@&quot;SSL_CTX_use_Key_sign_key error!&quot;);</span><br><span class="line">                ERR_print_errors_fp(stderr);</span><br><span class="line">                if (_delegate &amp;&amp; [_delegate respondsToSelector:@selector(didSecure:error:)]) &#123;</span><br><span class="line">                    [_delegate didSecure:self</span><br><span class="line">                                   error:[self sslError:@&quot;SSL_CTX_use_Key_sign_key Error&quot;]];</span><br><span class="line">                &#125;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            NSLog(@&quot;SSL_CTX_use_Key_sign_key ok!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* 7.加载自己 加密证书 */</span><br><span class="line">        if (privCertInfo.encCertPath) &#123;</span><br><span class="line">            NSString *strUserCertPath = privCertInfo.encCertPath;</span><br><span class="line">            NSLog(@&quot;SSL_CTX_use_Key_enc_cert start!&quot;);</span><br><span class="line">            if (SSL_CTX_use_enc_certificate_file(m_ctx, (const char *)[strUserCertPath UTF8String], SSL_FILETYPE_PEM) &lt;= 0)&#123;</span><br><span class="line">                NSLog(@&quot;SSL_CTX_use_Key_enc_cert error!&quot;);</span><br><span class="line">                ERR_print_errors_fp(stderr);</span><br><span class="line">                if (_delegate &amp;&amp; [_delegate respondsToSelector:@selector(didSecure:error:)]) &#123;</span><br><span class="line">                    [_delegate didSecure:self</span><br><span class="line">                                   error:[self sslError:@&quot;SSL_CTX_use_Key_enc_cert Error&quot;]];</span><br><span class="line">                &#125;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            NSLog(@&quot;SSL_CTX_use_Key_enc_cert ok!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* 8.加载自己的 加密证书私钥 */</span><br><span class="line">        if (privCertInfo.encPrivPath) &#123;</span><br><span class="line">            NSString *strUserKeyPath = privCertInfo.encPrivPath;</span><br><span class="line">            NSLog(@&quot;SSL_CTX_use_Key_enc_key start!&quot;);</span><br><span class="line">            if (SSL_CTX_use_enc_PrivateKey_file(m_ctx, (const char *)[strUserKeyPath UTF8String], SSL_FILETYPE_PEM) &lt;= 0)&#123;</span><br><span class="line">                NSLog(@&quot;SSL_CTX_use_Key_enc_key error!&quot;);</span><br><span class="line">                ERR_print_errors_fp(stderr);</span><br><span class="line">                if (_delegate &amp;&amp; [_delegate respondsToSelector:@selector(didSecure:error:)]) &#123;</span><br><span class="line">                    [_delegate didSecure:self</span><br><span class="line">                                   error:[self sslError:@&quot;SSL_CTX_use_Key_enc_key Error&quot;]];</span><br><span class="line">                &#125;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            NSLog(@&quot;SSL_CTX_use_Key_enc_key ok!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        /*</span><br><span class="line">         9.客户端验证 证书和私钥 是否一致(成功返回1)</span><br><span class="line">         验证导致握手失败?</span><br><span class="line">         */</span><br><span class="line">        NSLog(@&quot;SSL_CTX_check_private_key start!&quot;);</span><br><span class="line">        if (SSL_CTX_check_private_key(m_ctx) != 1) &#123;</span><br><span class="line">            ERR_print_errors_fp(stderr);</span><br><span class="line">            NSLog(@&quot;SSL_CTX_use_Key_sign_key error!&quot;);</span><br><span class="line">            if (_delegate &amp;&amp; [_delegate respondsToSelector:@selector(didSecure:error:)]) &#123;</span><br><span class="line">                    [_delegate didSecure:self error:[self sslError:@&quot;SSL_CTX_check_private_key Error&quot;]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        NSLog(@&quot;SSL_CTX_check_private_key ok!&quot;);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        /* 10.检查用户私钥是否正确</span><br><span class="line">         真正进行验证，一定要调用这个函数不然前面四个光配置而已并不会进行双向验证）</span><br><span class="line">         */</span><br><span class="line">        NSLog(@&quot;SSL_CTX_check_private_key start!&quot;);</span><br><span class="line">        if (!SSL_CTX_check_private_key(m_ctx))</span><br><span class="line">        &#123;</span><br><span class="line">           NSLog(@&quot;SSL_CTX_check_private_key error!&quot;);</span><br><span class="line">           ERR_print_errors_fp(stderr);</span><br><span class="line">           if (_delegate &amp;&amp; [_delegate respondsToSelector:@selector(didSecure:error:)]) &#123;</span><br><span class="line">               [_delegate didSecure:self</span><br><span class="line">                              error:[self sslError:@&quot;SSL_CTX_check_private_key Error&quot;]];</span><br><span class="line">           &#125;</span><br><span class="line">           return;</span><br><span class="line">        &#125;</span><br><span class="line">        NSLog(@&quot;SSL_CTX_check_private_key ok!&quot;);</span><br><span class="line"></span><br><span class="line">        // 11.初始化SSL安全通信的对象(为一个新SSL链接建立SSL*结构体变量。)</span><br><span class="line">        if (!m_ssl) &#123;</span><br><span class="line">            m_ssl = SSL_new(m_ctx);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        // 12.将SSL对象和文件描述符关联起来</span><br><span class="line">        int result = SSL_set_fd(m_ssl, _socketFD);</span><br><span class="line">        if (result == -1) &#123;</span><br><span class="line">            if (_delegate &amp;&amp; [_delegate respondsToSelector:@selector(didSecure:error:)]) &#123;</span><br><span class="line">                [_delegate didSecure:self error:[self sslError:@&quot;SSL_set_fd Error&quot;]];</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        /*</span><br><span class="line">         13.SSL_CTX_set_verify:配置启用双向认证</span><br><span class="line">         1、SSL_VERIFY_PEER:要求对证书进行认证，表示需要验证服务器端，没有证书也会放行，若不需要验证则使用  SSL_VERIFY_NONE</span><br><span class="line">         2、SSL_VERIFY_FAIL_IF_NO_PEER_CERT:要求客户端需要提供证书，但验证发现单独使用没有证书也会放行</span><br><span class="line">         */</span><br><span class="line">        SSL_CTX_set_verify(m_ctx, SSL_VERIFY_PEER, NULL);</span><br><span class="line">        SSL_set_verify(m_ssl, SSL_VERIFY_PEER, NULL);</span><br><span class="line">        </span><br><span class="line">        /* 14.设置加密套件 */</span><br><span class="line">        if (sslInfo.ciperSuite == 0) &#123;</span><br><span class="line">            SSL_set_cipher_list(m_ssl,&quot;ECC-SM4-SM3&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            SSL_set_cipher_list(m_ssl,&quot;ECDHE-SM4-SM3&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /* 15.SSL握手 */</span><br><span class="line">    [self sslHandshake];</span><br><span class="line">&#125;</span><br><span class="line">// SSL握手</span><br><span class="line">- (void)sslHandshake &#123;</span><br><span class="line">    </span><br><span class="line">    int ret = 0;</span><br><span class="line">    // 初始化SSL协商处理</span><br><span class="line">    SSL_set_connect_state(m_ssl);</span><br><span class="line">    while (1)&#123;</span><br><span class="line">        // 实现握手</span><br><span class="line">        ret = SSL_do_handshake(m_ssl);</span><br><span class="line">        if (ret &gt; 0) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            ERR_print_errors_fp(stderr);</span><br><span class="line">            // SSL_get_error:获取错误码</span><br><span class="line">            if (SSL_get_error(m_ssl, ret) == SSL_ERROR_WANT_HSM_RESULT) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                NSLog(@&quot;error of ssl do handshake&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 握手失败</span><br><span class="line">    if(ret &lt;= 0) &#123;</span><br><span class="line">        NSLog(@&quot;handshake failed&quot;);</span><br><span class="line">        if (_delegate &amp;&amp; [_delegate respondsToSelector:@selector(didSecure:error:)]) &#123;</span><br><span class="line">            [_delegate didSecure:self</span><br><span class="line">                           error:[self sslError:@&quot;handshake failed&quot;]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 握手成功</span><br><span class="line">    else &#123;</span><br><span class="line">        NSLog(@&quot;ssl connect ok&quot;);</span><br><span class="line">        // 握手成功的回调</span><br><span class="line">        [self didSSLHandshake];</span><br><span class="line">        </span><br><span class="line">        // 显示证书</span><br><span class="line">        [self showCert];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 关闭连接</span><br><span class="line">- (void)disconnect&#123;</span><br><span class="line">    if(_socketFD &gt; 0)&#123;</span><br><span class="line">        close(_socketFD);</span><br><span class="line">        _socketFD = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(m_ssl != NULL)&#123;</span><br><span class="line">        SSL_shutdown(m_ssl);</span><br><span class="line">        SSL_free(m_ssl);</span><br><span class="line">        m_ssl = NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (m_ctx != NULL) &#123;</span><br><span class="line">        SSL_CTX_free(m_ctx);</span><br><span class="line">        m_ctx = NULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 已经SSL握手</span><br><span class="line">- (void)didSSLHandshake &#123;</span><br><span class="line">    _isSecure = YES;</span><br><span class="line">    NSError * error = nil;</span><br><span class="line">    if (_delegate &amp;&amp; [_delegate respondsToSelector:@selector(didSecure:error:)]) &#123;</span><br><span class="line">        [_delegate didSecure:self error:error];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark -- 向网关写数据</span><br><span class="line">- (int)writeData:(char *)buff andLen:(int)len andTimeOut:(int)timeout&#123;</span><br><span class="line">    int ret = -100;</span><br><span class="line">    </span><br><span class="line">    if (!buff || !len) &#123;</span><br><span class="line">        [self didWriteOrReadError:[self wOrRError:@&quot;parameter error&quot;]];</span><br><span class="line">        return ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    struct timeval sendtimeout = &#123;0,0&#125;;</span><br><span class="line">    if (timeout &gt; 0) &#123;</span><br><span class="line">        sendtimeout.tv_sec = timeout/1000;</span><br><span class="line">        sendtimeout.tv_usec=(timeout%1000)*1000;</span><br><span class="line">        setsockopt(_socketFD,</span><br><span class="line">                   SOL_SOCKET,</span><br><span class="line">                   SO_SNDTIMEO,</span><br><span class="line">                   (const void *)(&amp;sendtimeout),</span><br><span class="line">                   sizeof(struct timeval));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (m_ssl) &#123;</span><br><span class="line">        ret = SSL_write(m_ssl, (const void *)buff, len);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        ret = (int)send(_socketFD, buff, (size_t)len, 0);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (ret &gt; 0) &#123;</span><br><span class="line">        [self _didWrite];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        [self didWriteOrReadError:[self wOrRError:@&quot;write failed&quot;]];</span><br><span class="line">    &#125;</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line">// 写成功的代理回调</span><br><span class="line">- (void)_didWrite &#123;</span><br><span class="line">    if (_delegate &amp;&amp; [_delegate respondsToSelector:@selector(didWriteData:)]) &#123;</span><br><span class="line">        [_delegate didWriteData:self];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 从网关读数据</span><br><span class="line">- (int)readData:(char *)buff andLen:(int)len andTimeOut:(int)timeout&#123;</span><br><span class="line">    int ret = -100;</span><br><span class="line">    </span><br><span class="line">    if (!buff || !len) &#123;</span><br><span class="line">        [self didWriteOrReadError:[self wOrRError:@&quot;parameter error&quot;]];</span><br><span class="line">        return ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 设置超时时间</span><br><span class="line">    struct timeval receiveTimeout = &#123;0,0&#125;;</span><br><span class="line">    if (timeout &gt; 0) &#123;</span><br><span class="line">        receiveTimeout.tv_sec = timeout/1000;</span><br><span class="line">        receiveTimeout.tv_usec=(timeout%1000)*1000;</span><br><span class="line">        setsockopt(_socketFD,</span><br><span class="line">                   SOL_SOCKET,</span><br><span class="line">                   SO_RCVTIMEO,</span><br><span class="line">                   (const void *)(&amp;receiveTimeout),</span><br><span class="line">                   sizeof(struct timeval));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (m_ssl) &#123;</span><br><span class="line">        ret = SSL_read(m_ssl, buff, len);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        ret = (int)recv(_socketFD, buff, len, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (ret == -1) &#123;</span><br><span class="line">        NSString *strErr = [NSString stringWithFormat:@&quot;read failed, ssl code = [%d]&quot;, SSL_get_error(m_ssl, ret)];</span><br><span class="line">        [self didWriteOrReadError:[self wOrRError:strErr]];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        int err = SSL_get_error(m_ssl, ret);</span><br><span class="line">        NSLog(@&quot;err:%d&quot;,err);</span><br><span class="line">        /*</span><br><span class="line">         ret:0 表示被关闭了 ret:大于0 表示接收到数据</span><br><span class="line">         */</span><br><span class="line">        NSData *data = [NSData dataWithBytes:buff length:ret];</span><br><span class="line">        [self _didRead:data];</span><br><span class="line">    &#125;</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line">// 从网关读数据成功的代理回调</span><br><span class="line">- (void)_didRead:(NSData *)data &#123;</span><br><span class="line">    if (_delegate &amp;&amp; [_delegate respondsToSelector:@selector(didReadSocket:data:)]) &#123;</span><br><span class="line">        [_delegate didReadSocket:self data:data];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 读/写错误的代理回调</span><br><span class="line">- (void)didWriteOrReadError:(NSError *)error &#123;</span><br><span class="line">    if (_delegate &amp;&amp; [_delegate respondsToSelector:@selector(didWriteOrRead:error:)]) &#123;</span><br><span class="line">        [_delegate didWriteOrRead:self error:error];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark -- 关闭socket连接</span><br><span class="line">- (void)closeWithError:(NSError *)error &#123;</span><br><span class="line">    close(_socketFD);</span><br><span class="line">    _socketFD = -1;</span><br><span class="line">    </span><br><span class="line">    if (_delegate &amp;&amp; [_delegate respondsToSelector:@selector(didDisconnectSocket:error:)]) &#123;</span><br><span class="line">        [_delegate didDisconnectSocket:self error:error];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#pragma mark -- Error</span><br><span class="line">- (NSError *)otherError:(NSString *)errMsg &#123;</span><br><span class="line">    NSDictionary *userInfo = [NSDictionary dictionaryWithObject:errMsg</span><br><span class="line">                                                         forKey:NSLocalizedDescriptionKey];</span><br><span class="line">    return [NSError errorWithDomain:@&quot;SocketErrorDomain&quot; code:5 userInfo:userInfo];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSError *)wOrRError:(NSString *)errMsg &#123;</span><br><span class="line">    NSDictionary *userInfo = [NSDictionary dictionaryWithObject:errMsg</span><br><span class="line">                                                         forKey:NSLocalizedDescriptionKey];</span><br><span class="line">    return [NSError errorWithDomain:@&quot;SSLWriteOrReadErrorDomain&quot; code:6 userInfo:userInfo];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSError *)sslError:(NSString *)errMsg &#123;</span><br><span class="line">    NSDictionary *userInfo = [NSDictionary dictionaryWithObject:errMsg</span><br><span class="line">                                                         forKey:NSLocalizedDescriptionKey];</span><br><span class="line">    return [NSError errorWithDomain:@&quot;SSLErrorDomain&quot; code:7 userInfo:userInfo];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation JITSSLInfo</span><br><span class="line"></span><br><span class="line">- (instancetype)init</span><br><span class="line">&#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        _ciperSuite = 0;</span><br><span class="line">        _caInfo = @[];</span><br><span class="line">        _privCertInfo = [[JITPrivCertInfo alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation JITPrivCertInfo</span><br><span class="line"></span><br><span class="line">- (instancetype)init</span><br><span class="line">&#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        _signCertPath = nil;</span><br><span class="line">        _signPrivPath = nil;</span><br><span class="line">        _encCertPath = nil;</span><br><span class="line">        _encPrivPath = nil;</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ol start="3"><li>GmsslManager.h</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">//  GmsslManager.h</span><br><span class="line">//  JiAnBaoStandard</span><br><span class="line">//</span><br><span class="line">//  Created by Mac on 2023/7/31.</span><br><span class="line">//  Copyright © 2023 JITPlatform. All rights reserved.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line"></span><br><span class="line">@interface GmsslManager : NSObject</span><br><span class="line">// 读取数据成功的block回调</span><br><span class="line">@property (nonatomic,copy)void(^readDataSuccessBlock)(NSData * data);</span><br><span class="line"></span><br><span class="line">// 单例</span><br><span class="line">+ (instancetype)sharedManager;</span><br><span class="line"></span><br><span class="line">// 连接国密</span><br><span class="line">- (void)connectGmsslWithData:(NSData *)data;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_END</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ol start="4"><li>GmsslManager.m</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">//  GmsslManager.m</span><br><span class="line">//  JiAnBaoStandard</span><br><span class="line">//</span><br><span class="line">//  Created by Mac on 2023/7/31.</span><br><span class="line">//  Copyright © 2023 JITPlatform. All rights reserved.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#import &quot;GmsslManager.h&quot;</span><br><span class="line">#import &quot;JITGMSocket.h&quot;</span><br><span class="line"></span><br><span class="line">@interface GmsslManager ()&lt;JITSocketDelegate&gt;</span><br><span class="line">// 国密socket</span><br><span class="line">@property (nonatomic,strong)JITGMSocket * gmSocket;</span><br><span class="line">// 当前要发送的数据</span><br><span class="line">@property (nonatomic,strong)NSData * currentSendData;</span><br><span class="line">@end</span><br><span class="line">@implementation GmsslManager</span><br><span class="line">// 单例</span><br><span class="line">+ (instancetype)sharedManager&#123;</span><br><span class="line">    static GmsslManager * manager = nil;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        manager = [[self alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    return manager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 连接国密</span><br><span class="line">- (void)connectGmsslWithData:(NSData *)data&#123;</span><br><span class="line">    // 获取缓存网关地址</span><br><span class="line">    NSString * gwAddr = [NSUserDefaults cacheGetObjectForKey:kGwAddress];</span><br><span class="line">    NSArray * arr = [gwAddr componentsSeparatedByString:@&quot;:&quot;];</span><br><span class="line">    NSString * ip = [arr objectAtIndex:0];</span><br><span class="line">    NSString * port = [arr objectAtIndex:1];</span><br><span class="line">    </span><br><span class="line">    // 赋值当前发送数据</span><br><span class="line">    self.currentSendData = data;</span><br><span class="line">    </span><br><span class="line">    // 初始化socket</span><br><span class="line">    self.gmSocket = [[JITGMSocket alloc] initWithDelegate:self];</span><br><span class="line">    </span><br><span class="line">    // 连接到网关服务器</span><br><span class="line">    [self.gmSocket connectToHost:ip onPort:[port intValue]];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 国密双向认证</span><br><span class="line">- (void)startSSL&#123;</span><br><span class="line">    // 双向认证信息</span><br><span class="line">    JITSSLInfo * sslInfo = [[JITSSLInfo alloc] init];</span><br><span class="line">    // 加密套件 0:ECC-SM4-SM3 非0:ECDHE-SM4-SM3</span><br><span class="line">    sslInfo.ciperSuite = 0;</span><br><span class="line">    // 根证</span><br><span class="line">    sslInfo.caInfo = @[[self getCertPathWithFileName:@&quot;ca&quot;]];</span><br><span class="line">    // 证书信息</span><br><span class="line">    JITPrivCertInfo * certInfo = [[JITPrivCertInfo alloc] init];</span><br><span class="line">    // 签名证书</span><br><span class="line">    certInfo.signCertPath = [self getCertPathWithFileName:@&quot;cli.cert.sig&quot;];</span><br><span class="line">    // 签名私钥</span><br><span class="line">    certInfo.signPrivPath =  [self getCertPathWithFileName:@&quot;cli.key.sig&quot;];</span><br><span class="line">    // 加密证书</span><br><span class="line">    certInfo.encCertPath =  [self getCertPathWithFileName:@&quot;cli.cert.enc&quot;];</span><br><span class="line">    // 加密私钥</span><br><span class="line">    certInfo.encPrivPath =  [self getCertPathWithFileName:@&quot;cli.key.enc&quot;];</span><br><span class="line">    // 设置私证信息</span><br><span class="line">    sslInfo.privCertInfo = certInfo;</span><br><span class="line">    </span><br><span class="line">    // 开始双向认证(NO：双向 YES：单向)</span><br><span class="line">    [self.gmSocket startSSL:NO andSSLInfo:sslInfo];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 获取证书信息</span><br><span class="line">- (NSString *)getCertPathWithFileName:(NSString *)fileName&#123;</span><br><span class="line">    // 证书路径</span><br><span class="line">    NSString * certsPath = [[NSBundle mainBundle] pathForResource:fileName ofType:@&quot;pem&quot;];</span><br><span class="line">    </span><br><span class="line">//    // 打印证书内容</span><br><span class="line">//    NSError * error;</span><br><span class="line">//    NSString * contentInUTF8 = [NSString stringWithContentsOfFile:certsPath</span><br><span class="line">//                                                         encoding:NSUTF8StringEncoding</span><br><span class="line">//                                                            error:&amp;error];</span><br><span class="line">//    NSLog(@&quot;content:%@&quot;,contentInUTF8);</span><br><span class="line">    // 返回</span><br><span class="line">    return certsPath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 国密socketDelegate</span><br><span class="line">// socket连接成功</span><br><span class="line">- (void)didConnectSocket:(JITGMSocket *)socket host:(NSString *)host port:(int)port &#123;</span><br><span class="line">    NSLog(@&quot;连接成功%@:%d 可以进行国密SSL认证&quot;,host,port);</span><br><span class="line">    // 开始SSL认证</span><br><span class="line">    [self startSSL];</span><br><span class="line">&#125;</span><br><span class="line">// socket连接失败</span><br><span class="line">- (void)didDisconnectSocket:(JITGMSocket *)socket error:(NSError *)error&#123;</span><br><span class="line">    NSLog(@&quot;连接失败, %@&quot;,error);</span><br><span class="line">&#125;</span><br><span class="line">// 已经写/读数据</span><br><span class="line">- (void)didWriteOrRead:(JITGMSocket *)socket error:(NSError *)error &#123;</span><br><span class="line">    NSLog(@&quot;已经写或读&quot;);</span><br><span class="line">&#125;</span><br><span class="line">// 已经写数据</span><br><span class="line">- (void)didWriteData:(nonnull JITGMSocket *)socket &#123;</span><br><span class="line">    NSLog(@&quot;已经写数据&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 已经读取到socket返回的数据</span><br><span class="line">- (void)didReadSocket:(JITGMSocket *)socket data:(NSData *)data&#123;</span><br><span class="line">    if (data.length &gt; 0) &#123;</span><br><span class="line">        if (self.readDataSuccessBlock) &#123;</span><br><span class="line">            self.readDataSuccessBlock(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - SSL握手结果</span><br><span class="line">- (void)didSecure:(JITGMSocket *)socket error:(NSError *)error &#123;</span><br><span class="line">    if (error) &#123;</span><br><span class="line">        NSLog(@&quot;握手失败, error:%@&quot;,error.localizedDescription);</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        NSLog(@&quot;握手成功&quot;);</span><br><span class="line">        // 写数据（unicode编码，是一个字符 \U00000005\U00000001\X90）</span><br><span class="line">        char * write_buff = (char *)[self.currentSendData bytes];</span><br><span class="line">        // 长度计算不对会导致读取不到想要的结果(3 而不是 8)</span><br><span class="line">        NSInteger write_len = self.currentSendData.length;</span><br><span class="line">        int write_result = [socket writeData:write_buff andLen:(int)write_len andTimeOut:5];</span><br><span class="line">        NSLog(@&quot;write_result:%d&quot;,write_result);</span><br><span class="line">        </span><br><span class="line">        // 读取数据（\U00000005\X90）</span><br><span class="line">        char read_buff[1024] = &#123;0&#125;;</span><br><span class="line">        int read_len = sizeof(read_buff);</span><br><span class="line">        int read_result = [socket readData:read_buff andLen:read_len andTimeOut:10];</span><br><span class="line">        NSLog(@&quot;read_result:%d&quot;,read_result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - dealloc</span><br><span class="line">- (void)dealloc&#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;,__func__);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Openssl-之-SSL&quot;&gt;&lt;a href=&quot;#Openssl-之-SSL&quot; class=&quot;headerlink&quot; title=&quot;Openssl 之 SSL&quot;&gt;&lt;/a&gt;Openssl 之 SSL&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;什么是SSL&lt;/li&gt;
&lt;/ol&gt;
&lt;u</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="OC-网络学习" scheme="https://www.bboyzj.cn/tags/OC-%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>MacOS学习03：iOS、MacOS软件文件探索</title>
    <link href="https://www.bboyzj.cn/2023/08/02/MacOS/MacOS%E5%AD%A6%E4%B9%A003%EF%BC%9AiOS%E3%80%81MacOS%E8%BD%AF%E4%BB%B6%E6%96%87%E4%BB%B6%E6%8E%A2%E7%B4%A2/"/>
    <id>https://www.bboyzj.cn/2023/08/02/MacOS/MacOS%E5%AD%A6%E4%B9%A003%EF%BC%9AiOS%E3%80%81MacOS%E8%BD%AF%E4%BB%B6%E6%96%87%E4%BB%B6%E6%8E%A2%E7%B4%A2/</id>
    <published>2023-08-02T02:14:11.000Z</published>
    <updated>2023-08-03T08:20:24.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iPhone"><a href="#iPhone" class="headerlink" title="iPhone"></a>iPhone</h1><p><code>iPhone</code> 手机用的是 <code>iOS</code> 系统，<code>iOS</code> 上的 <code>App(应用程序)</code> 的后缀为 <code>xxx.ipa</code>。<code>ipa</code> 是 <code>Apple Program Application File iPhoneApplication</code> 的缩写。</p><h1 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h1><p><code>Mac</code> 电脑用的是 <code>macOS</code> 系统，<code>macOS</code> 上的 <code>App(应用程序)</code> 的后缀是 <code>xxx.app</code>。这种软件只能在Mac电脑上安装运行。<code>xxx.app</code> 打包后的安装程序或应用程序的 <code>镜像</code> 后缀为 <code>xxx.dmg</code>。</p><h1 id="如何将-app-打包成-dmg"><a href="#如何将-app-打包成-dmg" class="headerlink" title="如何将 .app 打包成 .dmg"></a>如何将 .app 打包成 .dmg</h1><ol><li>编译运行Mac桌面应用程序</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308021056727.png"                                     ></p><ol start="2"><li>Product -&gt; Archives 打包应用程序</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308021056224.png"                                     ></p><ol start="3"><li>Distribute App -&gt; Copy App 保存到桌面上</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308021056329.png"                                     ></p><ol start="4"><li>查看桌面文件如下</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308021057251.png"                                     ></p><ol start="5"><li>在Mac -&gt; 启动台 -&gt; 打开 磁盘工具</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308021057654.png"                                     ></p><ol start="6"><li>文件 -&gt; 新建映像 -&gt; 基于文件夹新建映像（选中刚才生成的文件夹）</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308021057656.png"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308021059135.png"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308021059537.png"                                     ></p><ol start="7"><li>点击存储 -&gt; 生成映像文件 xxx.dmg</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308021059506.png"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308021059299.png"                                     ></p><h1 id="制作Application替身"><a href="#制作Application替身" class="headerlink" title="制作Application替身"></a>制作Application替身</h1><p>第一次使用都会有个弹窗，显示复制到应用程序中，那么如何制作呢？</p><ol><li>应用程序 -&gt; 右键 -&gt; 上级目录 -&gt; 制作替身</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308031608143.png"                                     ></p><ol start="2"><li>将制作的替身（应用程序）移动到 应用文件夹中：</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202308031616999.png"                                     ></p><ol start="3"><li><p>还可以在其文件夹中添加其他资源文件（例如：安装说明、dmg的图标）</p></li><li><p>重新打开磁盘工具，重新生成.dmg镜像文件</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;iPhone&quot;&gt;&lt;a href=&quot;#iPhone&quot; class=&quot;headerlink&quot; title=&quot;iPhone&quot;&gt;&lt;/a&gt;iPhone&lt;/h1&gt;&lt;p&gt;&lt;code&gt;iPhone&lt;/code&gt; 手机用的是 &lt;code&gt;iOS&lt;/code&gt; 系统，&lt;code&gt;iO</summary>
      
    
    
    
    <category term="MacOS" scheme="https://www.bboyzj.cn/categories/MacOS/"/>
    
    
    <category term="MacOS-常用" scheme="https://www.bboyzj.cn/tags/MacOS-%E5%B8%B8%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>OC网络学习24：htons/ntohs/htonl/ntohl探索</title>
    <link href="https://www.bboyzj.cn/2023/07/31/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A024%EF%BC%9Ahtons:ntohs:htonl:ntohl%E6%8E%A2%E7%B4%A2/"/>
    <id>https://www.bboyzj.cn/2023/07/31/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A024%EF%BC%9Ahtons:ntohs:htonl:ntohl%E6%8E%A2%E7%B4%A2/</id>
    <published>2023-07-31T01:05:06.000Z</published>
    <updated>2023-08-02T00:33:36.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>网络顺序</code> 和 <code>主机顺序</code> 的相互转换</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li>htonl（长整型 主机转网络字节顺序）</li></ul><p>Host to Network Long</p><ul><li>ntohl（长整型 网络转主机字节顺序）</li></ul><p>Network to Host Long</p><ul><li>htons（短整型 主机转网络字节顺序）</li></ul><p>Host to Network short</p><ul><li>ntohs（短整型 网络转主机字节顺序）</li></ul><p>Network to Host short</p><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ul><li><p><code>网络字节顺序（Network Byte Order)</code> ：按从高到底顺序存储，在网络上使用统一的网络字节顺序，可以避免兼容性问题。</p></li><li><p><code>主机字节顺序（Host Byte Order）</code> ： 不同的机器HBO不相同，与CPU设计有关，数据的顺序是由CPU决定的，而与操作系统无关。</p></li><li><p>由于 <code>不同CPU决定的字节顺序不一致</code>，不同体系结构的机器之间无法通信，所以要转换成一种约定的数序，就是 <code>网络字节顺序</code>。</p></li><li><p>所谓 <code>网络字节顺序（大尾顺序）</code> 就是指一个数在内存中存储的时候 <code>高对低，低对高</code>（即一个数的高位字节存放于低地址单元，低位字节存放在高地址单元中）。但是计算机的内存存储数据时有可能是大尾顺序或者小尾顺序。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;网络顺序&lt;/code&gt; 和 &lt;code&gt;主机顺序&lt;/code&gt; 的相互转换&lt;/p&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="OC-网络学习" scheme="https://www.bboyzj.cn/tags/OC-%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>OC网络学习23：127.0.0.1和0.0.0.0探索</title>
    <link href="https://www.bboyzj.cn/2023/07/28/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A023%EF%BC%9A127-0-0-1%E5%92%8C0-0-0-0%E6%8E%A2%E7%B4%A2/"/>
    <id>https://www.bboyzj.cn/2023/07/28/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A023%EF%BC%9A127-0-0-1%E5%92%8C0-0-0-0%E6%8E%A2%E7%B4%A2/</id>
    <published>2023-07-28T01:39:01.000Z</published>
    <updated>2023-07-28T01:52:32.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="127-0-0-1"><a href="#127-0-0-1" class="headerlink" title="127.0.0.1"></a>127.0.0.1</h1><p><code>127.0.0.1</code> 从上面 特殊的IP网段中我们可以知道 <code>127.0.0.1</code> 表示的是 <code>回环IP地址（loopback address）</code>。啥意思呢？</p><p>所有发往目标IP为 <code>127.0.0.1</code> 的数据包都 <code>不会通过网卡发送到网络上</code>，而是在数据离开网络层时将其 <code>回送给本机</code> 的有关进程。</p><p>形象些说就是因为发送数据包是从 <code>应用层 —&gt;数据链路层自上而下一层层按照程序封装的</code>，当到了网络层时，发现目标IP是 <code>127.0.0.1</code>，就不会再往下封装数据链路层了，而是把包又丢给需要往上层解析的队列中了。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202307280940549.png"                                     ></p><p>实际上 <code>localhost</code> 通常也代表 <code>127.0.0.1</code>。这是因为通常在本机Hosts文件会把localhost映射为127.0.0.1 。此外以127开头的IP地址都是回环地址，只是我们通常使用127.0.0.1。所以这只能在本机来回收发包的地址有啥用呢？本机测试用！！</p><blockquote><p>注：ip是有区别的：在 <code>IPv4</code> 下本地回环地址是 <code>127.0.0.1</code>，但在 <code>IPv6</code> 下本地回环地址是 <code>::1</code></p></blockquote><h1 id="0-0-0-0"><a href="#0-0-0-0" class="headerlink" title="0.0.0.0"></a>0.0.0.0</h1><p><code>0.0.0.0</code> 这个IP地址指的是 <code>没有路由的源地址</code>，通常被 <code>用来表示无效的，未知的 或是 没有指定目标IP的地址</code>。看不懂没关系，真表示啥要放到实际所处环境中去考虑。用处主要有：</p><ul><li><p>本机所有IP：当考虑它在一台服务器中的作用时，它指代的就是这台机器上所有的IP。假如一台机器上有两个IP:203.16.20.5&#x2F;24 和 203.16.24.4&#x2F;24。如果我们把一个iOS应用的IP绑定到了<code>0.0.0.0:8080</code>，那访问 203.16.20.5:8080 和 203.16.24.4:8080 都可以与这个iOS应用建立连接。</p></li><li><p>默认路由</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;127-0-0-1&quot;&gt;&lt;a href=&quot;#127-0-0-1&quot; class=&quot;headerlink&quot; title=&quot;127.0.0.1&quot;&gt;&lt;/a&gt;127.0.0.1&lt;/h1&gt;&lt;p&gt;&lt;code&gt;127.0.0.1&lt;/code&gt; 从上面 特殊的IP网段中我们可以知道 </summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="OC-网络学习" scheme="https://www.bboyzj.cn/tags/OC-%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>OC学习48：IPHONE_OS_VERSION_MIN_REQUIRED和IPHONE_OS_VERSION_MAX_ALLOWED</title>
    <link href="https://www.bboyzj.cn/2023/07/27/OC/OC%E5%AD%A6%E4%B9%A048%EF%BC%9AIPHONE-OS-VERSION-MIN-REQUIRED%E5%92%8CIPHONE-OS-VERSION-MAX-ALLOWED/"/>
    <id>https://www.bboyzj.cn/2023/07/27/OC/OC%E5%AD%A6%E4%B9%A048%EF%BC%9AIPHONE-OS-VERSION-MIN-REQUIRED%E5%92%8CIPHONE-OS-VERSION-MAX-ALLOWED/</id>
    <published>2023-07-27T05:51:44.000Z</published>
    <updated>2023-07-27T06:04:04.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IPHONE-OS-VERSION-MIN-REQUIRED"><a href="#IPHONE-OS-VERSION-MIN-REQUIRED" class="headerlink" title="IPHONE_OS_VERSION_MIN_REQUIRED"></a>IPHONE_OS_VERSION_MIN_REQUIRED</h1><p>当前app支持的最低版本, 即 Deployment Target</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202307271353673.png"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202307271359096.png"                                     ></p><p>使用方法</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 如果iOS最低版本 &lt; iOS9.0</span><br><span class="line">#if __IPHONE_OS_VERSION_MIN_REQUIRED &lt; 90000</span><br><span class="line">    // 代码1</span><br><span class="line">#else</span><br><span class="line">    // 代码2</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IPHONE-OS-VERSION-MIN-REQUIRED&quot;&gt;&lt;a href=&quot;#IPHONE-OS-VERSION-MIN-REQUIRED&quot; class=&quot;headerlink&quot; title=&quot;IPHONE_OS_VERSION_MIN_REQUIRED&quot;&gt;</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="OC-学习" scheme="https://www.bboyzj.cn/tags/OC-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>OC网络学习22：将IP地址转换为字符串函数inet_ntop和inet_ntoa</title>
    <link href="https://www.bboyzj.cn/2023/07/27/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A022%EF%BC%9A%E5%B0%86IP%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0inet_ntop%E5%92%8Cinet_ntoa/"/>
    <id>https://www.bboyzj.cn/2023/07/27/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A022%EF%BC%9A%E5%B0%86IP%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0inet_ntop%E5%92%8Cinet_ntoa/</id>
    <published>2023-07-27T02:05:24.000Z</published>
    <updated>2023-08-02T00:38:34.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>inet_ntop</code> 和 <code>inet_ntoa</code> 函数都是 <code>用于将IP地址转换为字符串的函数</code></p><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ol><li>语法不同</li></ol><ul><li>inet_ntoa</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char * inet_ntoa(struct in_addr);</span><br></pre></td></tr></table></figure></div><p>参数 struct in_addr：只需要传递一个二进制IP地址</p><ul><li>inet_ntop</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const char*inet_ntop(int, const void *, char *, socklen_t);</span><br></pre></td></tr></table></figure></div><p>参数 int：网络地址族。<br>参数 const void *：指向二进制IP地址的指针。<br>参数 char *：存储转换后IP地址字符串的缓冲区<br>参数 socklen_t：缓冲区大小</p><ol start="2"><li>返回值类型不同</li></ol><ul><li><p>inet_ntoa： 直接返回转换后的IP地址字符串。</p></li><li><p>inet_ntop： 返回一个指向存储转换后IP地址字符串的指针；</p></li></ul><ol start="3"><li>可重入性不同</li></ol><ul><li><p>inet_ntoa：使用了静态变量来存储结果，因此它是非可重入的（即不能在多线程环境下使用）</p></li><li><p>inet_ntop：则是可重入的</p></li></ul><h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><ul><li>inet_ntoa</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line"></span><br><span class="line">struct in_addr addr;</span><br><span class="line">inet_aton(&quot;192.168.0.1&quot;, &amp;addr);</span><br><span class="line"></span><br><span class="line">// 使用 inet_ntoa 函数</span><br><span class="line">const char* result;</span><br><span class="line">result = inet_ntoa(addr);</span><br><span class="line">printf(&quot;Result of inet_ntoa: %s\n&quot;, result); // 输出 192.168.0.1</span><br></pre></td></tr></table></figure></div><ul><li>inet_ntop</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - 获取ip地址</span><br><span class="line">- (NSString *)hostFromSockaddr6:(const struct sockaddr_in6 *)pSockaddr6&#123;</span><br><span class="line">    char addrBuf[INET6_ADDRSTRLEN];</span><br><span class="line">    // 将ip地址转字符串</span><br><span class="line">    if (inet_ntop(AF_INET6, &amp;pSockaddr6-&gt;sin6_addr, addrBuf, (socklen_t)sizeof(addrBuf)) == NULL)&#123;</span><br><span class="line">        addrBuf[0] = &#x27;\0&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return [NSString stringWithCString:addrBuf encoding:NSASCIIStringEncoding];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;inet_ntop&lt;/code&gt; 和 &lt;code&gt;inet_ntoa&lt;/code&gt; 函数都是 &lt;code&gt;用于将IP地址转换为字</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="OC-网络学习" scheme="https://www.bboyzj.cn/tags/OC-%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>OC网络学习21：获取网络接口信息getifaddrs函数</title>
    <link href="https://www.bboyzj.cn/2023/07/27/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A021%EF%BC%9A%E8%8E%B7%E5%8F%96%E7%BD%91%E7%BB%9C%E6%8E%A5%E5%8F%A3%E4%BF%A1%E6%81%AFgetifaddrs%E5%87%BD%E6%95%B0/"/>
    <id>https://www.bboyzj.cn/2023/07/27/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A021%EF%BC%9A%E8%8E%B7%E5%8F%96%E7%BD%91%E7%BB%9C%E6%8E%A5%E5%8F%A3%E4%BF%A1%E6%81%AFgetifaddrs%E5%87%BD%E6%95%B0/</id>
    <published>2023-07-27T01:15:02.000Z</published>
    <updated>2023-08-09T03:37:52.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>ip地址长度现在是有区别的，分为 <code>IPv4</code> 和 <code>IPv6</code>，<code>IPv4</code> 地址是类似 <code>A.B.C.D</code> 的格式，它是 <code>32位</code>，用 <code>\&quot;.\&quot;</code> 分成 <code>4段</code>，用 <code>10进制表示</code>；而 <code>IPv6</code> 地址类似 <code>X:X:X:X:X:X:X:X</code> 的格式，它是 <code>128位</code> 的，用 <code>\&quot;:\&quot;</code> 分成 <code>8段</code>，用 <code>16进制</code> 表示；可见，I<code>Pv6地址空间相对于IPv4地址有了极大的扩充</code>。</p><ul><li><p>IPv4是32位地址长度</p></li><li><p>IPv6是128位地址长度</p></li></ul><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li><p><code>getifaddrs</code> 函数，是一个用于 <code>获取系统上网络接口信息的函数</code>。</p></li><li><p><code>inet_ntoa</code> 函数，是一个用于将 <code>32位的二进制数字IP地址</code> 转换成 <code>一个点分十进制的字符串形式的IP地址</code>。</p></li></ul><h1 id="getifaddrs-使用"><a href="#getifaddrs-使用" class="headerlink" title="getifaddrs 使用"></a>getifaddrs 使用</h1><ol><li>第一步：包含头文件</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;ifaddrs.h&gt;</span><br></pre></td></tr></table></figure></div><p>要使用 <code>getifaddr</code> 函数，首先需要在代码中包含头文件，该头文件包含 <code>getifaddr</code> 函数的定义即相关结构体的定义。</p><p>结构体定义：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">struct ifaddrs &#123;</span><br><span class="line">struct ifaddrs  *ifa_next;</span><br><span class="line">char*ifa_name;</span><br><span class="line">unsigned int ifa_flags;</span><br><span class="line">struct sockaddr*ifa_addr;</span><br><span class="line">struct sockaddr*ifa_netmask;</span><br><span class="line">struct sockaddr*ifa_dstaddr;</span><br><span class="line">void*ifa_data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>函数定义：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extern int getifaddrs(struct ifaddrs **);</span><br><span class="line">extern void freeifaddrs(struct ifaddrs *);</span><br></pre></td></tr></table></figure></div><ol start="2"><li>第二步：调用 <code>getifaddr</code> 函数并检查返回值</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extern int getifaddrs(struct ifaddrs **);</span><br></pre></td></tr></table></figure></div><ul><li><p>参数是一个 <code>结构体类型的指针</code>，该函数通过该指针返回系统上所有网络接口的信息。</p></li><li><p>返回 <code>0</code> 表示调用成功</p></li><li><p>返回 <code>非0</code> 表示调用失败</p></li></ul><p>因此，在调用前，我们需要定义一个 <code>ifaddrs</code> 类型的指针变量，并初始化为 <code>NULL</code></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 定义 ifaddrs 类型的 指针变量，初始化为 NULL</span><br><span class="line">struct ifaddrs * interfaces = NULL;</span><br></pre></td></tr></table></figure></div><p>调用完成后，检查函数的返回值，如果成功，<code>指针变量</code> 中 <code>存储</code> 的是一个 <code>链表</code>，该链表中存储了系统上所有网络接口信息</p><ol start="3"><li>第三步：遍历链表获取网络接口信息</li></ol><p>我们需要变量该链表，逐个获取每个网络接口的信息，每个网络接口在链表中对应一个 <code>ifaddrs</code> 类型的结构体，该结构体中存储了网络接口的 <code>名称、地址、掩码等信息</code>。</p><ol start="4"><li>第四步：释放内存</li></ol><p>通过函数 <code>freeifaddrs</code> 释放内存</p><h1 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;ifaddrs.h&gt;</span><br><span class="line">#import &lt;arpa/inet.h&gt;</span><br><span class="line">#include &lt;netdb.h&gt;</span><br><span class="line">#import &lt;net/if.h&gt;</span><br><span class="line"></span><br><span class="line">#define IOS_CELLULAR    @&quot;pdp_ip0&quot;  // 蜂窝数据</span><br><span class="line">#define IOS_WIFI        @&quot;en0&quot;      // WIFI</span><br><span class="line">#define IOS_VPN         @&quot;utun0&quot;    // VPN</span><br><span class="line">#define IP_ADDR_IPv4    @&quot;ipv4&quot;     // IPv4</span><br><span class="line">#define IP_ADDR_IPv6    @&quot;ipv6&quot;     // IPv6</span><br><span class="line"></span><br><span class="line">// 获取Ip地址（字符串）</span><br><span class="line">+ (NSString *)getIpAddressWithIsIPv4:(BOOL)IPv4&#123;</span><br><span class="line">    NSArray * IPv4Arr = @[ IOS_VPN @&quot;/&quot; IP_ADDR_IPv4,</span><br><span class="line">                           IOS_VPN @&quot;/&quot; IP_ADDR_IPv6,</span><br><span class="line">                           IOS_WIFI @&quot;/&quot; IP_ADDR_IPv4,</span><br><span class="line">                           IOS_WIFI @&quot;/&quot; IP_ADDR_IPv6,</span><br><span class="line">                           IOS_CELLULAR @&quot;/&quot; IP_ADDR_IPv4,</span><br><span class="line">                           IOS_CELLULAR @&quot;/&quot; IP_ADDR_IPv6 ];</span><br><span class="line">    NSArray * IPv6Arr = @[ IOS_VPN @&quot;/&quot; IP_ADDR_IPv6,</span><br><span class="line">                           IOS_VPN @&quot;/&quot; IP_ADDR_IPv4,</span><br><span class="line">                           IOS_WIFI @&quot;/&quot; IP_ADDR_IPv6,</span><br><span class="line">                           IOS_WIFI @&quot;/&quot; IP_ADDR_IPv4,</span><br><span class="line">                           IOS_CELLULAR @&quot;/&quot; IP_ADDR_IPv6,</span><br><span class="line">                           IOS_CELLULAR @&quot;/&quot; IP_ADDR_IPv4 ] ;</span><br><span class="line">    NSArray * searchArray = IPv4 ? IPv4Arr : IPv6Arr;</span><br><span class="line">    NSDictionary * addresses = [self getIpAddress];</span><br><span class="line">    NSLog(@&quot;addresses: %@&quot;, addresses);</span><br><span class="line">    __block NSString * address;</span><br><span class="line">    [searchArray enumerateObjectsUsingBlock:^(NSString *key, NSUInteger idx, BOOL *stop)&#123;</span><br><span class="line">         address = addresses[key];</span><br><span class="line">        if(address) * stop = YES;</span><br><span class="line">    &#125;];</span><br><span class="line">    return address ? address : @&quot;0.0.0.0&quot;;</span><br><span class="line">&#125;</span><br><span class="line">// 获取所有相关IP信息(字典)</span><br><span class="line">+ (NSDictionary *)getIpAddress&#123;</span><br><span class="line">    NSMutableDictionary * addresses = [NSMutableDictionary dictionaryWithCapacity:8];</span><br><span class="line">    /**</span><br><span class="line">     lo     本地回环 (Loopback)</span><br><span class="line">     en     无线网 (WiFi)</span><br><span class="line">     pdp_ip 蜂窝网络 (Cellular)</span><br><span class="line">     awdl   通信Wi-Fi (Apple Wireless Direct Link，用于AirDrop、AirPlay、GameKit 和 Apple Pencil )</span><br><span class="line">     utun   虚拟隧道 (VPN)</span><br><span class="line">     ipsec  虚拟隧道 (VPN)</span><br><span class="line">     llw    低延迟无线局域网（Low-latency WLAN）</span><br><span class="line">     */</span><br><span class="line">    // 定义 ifaddrs 类型的 指针变量，初始化为 NULL</span><br><span class="line">    struct ifaddrs * interfaces = NULL;</span><br><span class="line">    /*</span><br><span class="line">     getifaddrs：用于获取系统上网络接口信息的函数</span><br><span class="line">     包含头文件&lt;ifaddrs.h&gt;</span><br><span class="line">     struct ifaddrs ** : ifaddrs 类型的指针</span><br><span class="line">     返回 0 成功，非 0 出错</span><br><span class="line">     */</span><br><span class="line">    int success = getifaddrs(&amp;interfaces);</span><br><span class="line">    if(success) &#123;</span><br><span class="line">        struct ifaddrs *interface;</span><br><span class="line">        for(interface = interfaces; interface; interface=interface-&gt;ifa_next) &#123;</span><br><span class="line">            if(!(interface-&gt;ifa_flags &amp; IFF_UP)) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            // 网络ip地址</span><br><span class="line">            const struct sockaddr_in * addr = (const struct sockaddr_in*)interface-&gt;ifa_addr;</span><br><span class="line">//            // 子网掩码</span><br><span class="line">//            struct sockaddr_in * netmask_addr = (const struct sockaddr_in *)interface-&gt;ifa_netmask;</span><br><span class="line">            char addrBuf[ MAX(INET_ADDRSTRLEN, INET6_ADDRSTRLEN) ];</span><br><span class="line">            // IPv4 / IPv6</span><br><span class="line">            if(addr &amp;&amp; (addr-&gt;sin_family == AF_INET || addr-&gt;sin_family == AF_INET6)) &#123;</span><br><span class="line">                NSString * name = [NSString stringWithUTF8String:interface-&gt;ifa_name];</span><br><span class="line">                NSString * type;</span><br><span class="line">                NSString * netmask;</span><br><span class="line">                // 网络地址族</span><br><span class="line">                if(addr-&gt;sin_family == AF_INET) &#123;</span><br><span class="line">                    if(inet_ntop(AF_INET, &amp;addr-&gt;sin_addr, addrBuf, INET_ADDRSTRLEN))&#123;</span><br><span class="line">                        type = IP_ADDR_IPv4;</span><br><span class="line">                    &#125;</span><br><span class="line">//                    if (inet_ntoa(netmask_addr-&gt;sin_addr)) &#123;</span><br><span class="line">//                        netmask = [NSString stringWithUTF8String:inet_ntoa(netmask_addr-&gt;sin_addr)];;</span><br><span class="line">//                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    const struct sockaddr_in6 *addr6 = (const struct sockaddr_in6*)interface-&gt;ifa_addr;</span><br><span class="line">                    if(inet_ntop(AF_INET6, &amp;addr6-&gt;sin6_addr, addrBuf, INET6_ADDRSTRLEN)) &#123;</span><br><span class="line">                        type = IP_ADDR_IPv6;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if(type) &#123;</span><br><span class="line">                    NSString *key = [NSString stringWithFormat:@&quot;%@/%@&quot;, name, type];</span><br><span class="line">                    addresses[key] = [NSString stringWithUTF8String:addrBuf];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // Free memory</span><br><span class="line">        freeifaddrs(interfaces);</span><br><span class="line">    &#125;</span><br><span class="line">    return [addresses count] ? addresses : nil;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;ip地址长度现在是有区别的，分为 &lt;code&gt;IPv4&lt;/code&gt; 和 &lt;code&gt;IPv6&lt;/code&gt;，&lt;code&gt;IPv4&lt;/cod</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="OC-网络学习" scheme="https://www.bboyzj.cn/tags/OC-%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>OC网络学习20：MISC</title>
    <link href="https://www.bboyzj.cn/2023/07/25/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A020%EF%BC%9AMISC/"/>
    <id>https://www.bboyzj.cn/2023/07/25/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A020%EF%BC%9AMISC/</id>
    <published>2023-07-25T01:03:25.000Z</published>
    <updated>2023-07-25T01:04:37.974Z</updated>
    
    <content type="html"><![CDATA[<p><code>MISC(Mobile Information Service Center移动信息服务中心)</code> 是为运营商提供的可快速启动各种数据业务的平台，是一个强大的资源调度平台。它 <code>连接运营商的基础网络</code> 及业务支撑系统（客服系统、营业系统、计费系统），为SPs提供各种电信资源（如短消息中心资源、用户信息资源、语音资源、传真资源等）、功能资源（如单点认证、计费、漫游控制、个性化等）及各种公共的资源引擎（如TTS、地理位置、语音交互、推送信息等）。MISC平台在移动运营商和内容提供商之间，起到一个 <code>桥梁</code> 或 <code>纽带</code> 的作用，使得运营商以最快速、最简单的模式开通新业务；各内容提供商不用关心网络层的详细技术，能够专注于内容、应用的开发，以更低廉的成本、在最短的时间内提供新业务；各类移动用户可以通过任意终端（WAP手机、PDA、PC、普通电话、传真机等），采用SMS、WAP、WEB、话音&#x2F;传真方式，在任何地方就近接入 <code>移动梦网</code> 门户，使用新业务。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;MISC(Mobile Information Service Center移动信息服务中心)&lt;/code&gt; 是为运营商提供的可快速启动各种数据业务的平台，是一个强大的资源调度平台。它 &lt;code&gt;连接运营商的基础网络&lt;/code&gt; 及业务支撑系统（客服系统、营</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>OC网络学习19：SSL/TLS加密协议探索</title>
    <link href="https://www.bboyzj.cn/2023/07/24/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A019%EF%BC%9ASSL:TLS%E5%8A%A0%E5%AF%86%E5%8D%8F%E8%AE%AE%E6%8E%A2%E7%B4%A2/"/>
    <id>https://www.bboyzj.cn/2023/07/24/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A019%EF%BC%9ASSL:TLS%E5%8A%A0%E5%AF%86%E5%8D%8F%E8%AE%AE%E6%8E%A2%E7%B4%A2/</id>
    <published>2023-07-24T07:41:10.000Z</published>
    <updated>2023-08-10T03:36:48.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在iOS开发中，客户端和服务端之间使用 <code>SSL/TLS协议</code> 进行 <code>加密通信</code> 时，需要进行 <code>证书验证</code> 以确保通信的安全性。以下是iOS开发中验证证书的流程和与服务端协作的方法：</p><h1 id="SSL双向认证"><a href="#SSL双向认证" class="headerlink" title="SSL双向认证"></a>SSL双向认证</h1><ol><li>介绍</li></ol><p><code>SSL双向认证</code>，也称为 <code>客户端认证或双向SSL认证</code>，是 <code>一种安全协议</code>，用于确保 <code>服务器和客户端</code> 之间的 <code>双向身份验证和加密通信</code>。</p><ol start="2"><li>SSL双向认证的详细流程</li></ol><ul><li><p>客户端向服务器发送一个连接请求，请求建立安全连接。</p></li><li><p>服务器返回一个数字证书，其中包含服务器的公钥和其他相关信息。</p></li></ul><p>证书是由可信的证书颁发机构（CA）签名的，以确保证书的真实性。</p><ul><li>客户端验证服务器的证书。</li></ul><p>它会检查证书的签名是否有效，并验证证书中的域名与实际连接的域名是否匹配。</p><p>如果验证失败，客户端会中止连接。</p><ul><li><p>客户端生成一个随机的对称密钥，并使用服务器的公钥对其进行加密。然后，客户端将加密后的密钥发送给服务器。</p></li><li><p>服务器使用自己的私钥解密客户端发送的加密密钥，得到对称密钥。</p></li><li><p>服务器和客户端现在都拥有相同的对称密钥，用于加密和解密后续的通信。</p></li><li><p>客户端发送一个包含自己的数字证书的请求给服务器，以进行客户端身份验证。</p></li><li><p>服务器验证客户端的证书。</p></li></ul><p>它会检查证书的签名是否有效，并验证证书中的域名与实际连接的域名是否匹配。</p><h1 id="在客户端实现证书验证"><a href="#在客户端实现证书验证" class="headerlink" title="在客户端实现证书验证"></a>在客户端实现证书验证</h1><p>在iOS开发中，可以使用 <code>NSURLSession或NSURLConnection</code> 来建立安全连接。默认情况下，这些类将使用 <code>系统内置的根证书验证服务器提供的证书</code>，但也可以 <code>自定义证书验证</code> 逻辑。例如，可以使用 <code>AFSecurityPolicy库</code> 中提供的 <code>AFSecurityPolicy类</code> 来进行证书验证，具体步骤如下：</p><ul><li>创建AFSecurityPolicy对象：</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AFSecurityPolicy *securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeCertificate];</span><br></pre></td></tr></table></figure></div><ul><li>添加需要验证的证书：</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSString *cerPath = [[NSBundle mainBundle] pathForResource:@&quot;server&quot; ofType:@&quot;cer&quot;];</span><br><span class="line">NSData *certData = [NSData dataWithContentsOfFile:cerPath];</span><br><span class="line">NSSet *certSet = [NSSet setWithObject:certData];</span><br><span class="line">[securityPolicy setPinnedCertificates:certSet];</span><br></pre></td></tr></table></figure></div><ul><li>开启验证：</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">securityPolicy.allowInvalidCertificates = NO;</span><br><span class="line">securityPolicy.validatesDomainName = YES;</span><br></pre></td></tr></table></figure></div><p>其中，<code>setPinnedCertificates:</code> 方法用于 <code>指定需要验证的证书</code>，<code>allowInvalidCertificates</code> 属性用于控制 <code>是否允许无效证书</code>，<code>validatesDomainName</code> 属性用于控制 <code>是否验证域名</code>。</p><h1 id="在服务端配置证书"><a href="#在服务端配置证书" class="headerlink" title="在服务端配置证书"></a>在服务端配置证书</h1><p>在服务端实现 <code>SSL/TLS</code> 协议时，需要配置证书以进行加密通信。在证书配置中，需要指定证书的路径和密码等信息，例如在Apache中的配置：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SSLCertificateFile /etc/ssl/certs/server.crt</span><br><span class="line">SSLCertificateKeyFile /etc/ssl/private/server.key</span><br></pre></td></tr></table></figure></div><p>在配置中，<code>SSLCertificateFile</code> 指定 <code>证书的路径</code>，<code>SSLCertificateKeyFile</code> 指定 <code>私钥的路径</code>。需要注意的是，私钥文件需要保证只有服务器进程有读取权限，以确保私钥的安全。</p><h1 id="确认证书匹配"><a href="#确认证书匹配" class="headerlink" title="确认证书匹配"></a>确认证书匹配</h1><p>在建立 <code>SSL/TLS</code> 连接时，<code>客户端会向服务端请求证书</code>。服务端会将自己的证书发送给客户端，客户端会验证证书的有效性，并检查证书中的主机名是否匹配。如果证书验证通过，则建立安全连接，否则连接会被终止。客户端可以通过 <code>NSURLSessionDelegate</code> 或 <code>NSURLConnectionDelegate</code> 的相关方法来实现 <code>证书验证和主机名匹配</code>。</p><p>在服务端实现<code> SSL/TLS</code> 协议时，需要确保 <code>证书和私钥</code> 的匹配。服务端会在启动时自动加载证书和私钥，并使用它们来建立安全连接。如果证书和私钥不匹配，则无法建立安全连接。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在iOS开发中，客户端和服务端之间使用 &lt;code&gt;SSL/TLS协议&lt;/code&gt; 进行 &lt;code&gt;加密通信&lt;/code&gt; 时，需要进行</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="OC-网络学习" scheme="https://www.bboyzj.cn/tags/OC-%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>OC网络学习18：虚拟网卡</title>
    <link href="https://www.bboyzj.cn/2023/07/18/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A018%EF%BC%9A%E8%99%9A%E6%8B%9F%E7%BD%91%E5%8D%A1/"/>
    <id>https://www.bboyzj.cn/2023/07/18/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A018%EF%BC%9A%E8%99%9A%E6%8B%9F%E7%BD%91%E5%8D%A1/</id>
    <published>2023-07-18T07:28:31.000Z</published>
    <updated>2023-07-26T02:18:42.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="虚拟网卡"><a href="#虚拟网卡" class="headerlink" title="虚拟网卡"></a>虚拟网卡</h1><ul><li><p>虚拟网卡（又称虚拟网络适配器），即用 <code>软件模拟网络环境</code>，<code>模拟网络适配器</code>。 虚拟网卡主要是建立远程计算机间的局域网。 可以模拟集线器功能，实现VPN的功能，使得系统把此软件识别成一块网卡，有了它，只要可以访问外网，都可以连接到虚拟集线器(HUB)上与其它电脑组成局域网。</p></li><li><p>虚拟网卡主要是建立远程计算机间的 <code>局域网</code>。虚拟网卡链接技术就是 <code>VPN</code>。比如说你可以和别的地方的几台机子，通过建立虚拟HUB 实现 VPN client 的链接，这样就算是在这几台远程计算机间建立的局域网，也能和你的机子一起实现局域网的功能。最普通的就是局域网互联游戏。在这方面比较常用的软件有openVPN ,packetix VPN ,hamachi， 其中，hamachi是运用最简单的VPN软件。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;虚拟网卡&quot;&gt;&lt;a href=&quot;#虚拟网卡&quot; class=&quot;headerlink&quot; title=&quot;虚拟网卡&quot;&gt;&lt;/a&gt;虚拟网卡&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;虚拟网卡（又称虚拟网络适配器），即用 &lt;code&gt;软件模拟网络环境&lt;/code&gt;，&lt;code&gt;模拟网络适配</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>OC网络学习17：连接WiFi热点</title>
    <link href="https://www.bboyzj.cn/2023/07/17/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A017%EF%BC%9A%E8%BF%9E%E6%8E%A5WiFi%E7%83%AD%E7%82%B9/"/>
    <id>https://www.bboyzj.cn/2023/07/17/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A017%EF%BC%9A%E8%BF%9E%E6%8E%A5WiFi%E7%83%AD%E7%82%B9/</id>
    <published>2023-07-17T07:10:30.000Z</published>
    <updated>2023-07-17T07:28:37.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h1><p>我们知道手机网络模式有两种：一种是无线 <code>WiFi模式</code>，另一种是蜂窝数据 <code>Cellular</code>(2&#x2F;3&#x2F;4&#x2F;5G)</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近几年，智能设备越来越火，这些智能设备中，有很大一部分是 <code>通过手机来控制硬件设备</code>，来达到预期的效果，这中间少不了要使用到 <code>蓝牙功能</code>，<code>通过蓝牙来通信来控制设备</code>。</p><p>除了蓝牙控制设备之外，还可以通过 <code>Wi-Fi来控制设备</code>，iOS11前只能跳转到系统设置界面手动连接Wi-Fi，iOS11之后苹果提供 <code>NEHotspotConfiguration</code> ，<code>NEHotspotConfigurationManager</code> 类直连周边Wi-Fi。</p><p>例如：你买了一个网络摄像头，你可以连上摄像头的Wi-Fi热点去配置这个摄像头</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>本文主要介绍如何使用 <code>NEHotSpotConfiguration</code> 类，连接WiFi热点，<code>NEHotSpotConfiguration</code> 能够很方便地通过在手机App上的操作来实现热点的链接。</p><h1 id="权限配置"><a href="#权限配置" class="headerlink" title="权限配置"></a>权限配置</h1><p>苹果提供的 <code>NEHotspotConfiguration</code> ，<code>NEHotspotConfigurationManager</code> 需要在开发者 <code>账号和项目</code> 中做如下配置。</p><ul><li>打开App IDs Hotspot 权限</li></ul><p>登陆 <a class="link"   href="https://developer.apple.com/" >https://developer.apple.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> ，如果 App ID 已经存在，只需增加 <code>Hotspot</code> 权限，如果 App ID 不存在，新建一个并添加 <code>Hotspot</code> 权限。</p><ul><li>打开Capabilities里的Hotspot Configuration</li></ul><p>Xcode -&gt; Target -&gt; Capabilities -&gt; Hostpot Configuration 添加</p><h1 id="NEHotspotConfiguration-库分析"><a href="#NEHotspotConfiguration-库分析" class="headerlink" title="NEHotspotConfiguration 库分析"></a>NEHotspotConfiguration 库分析</h1><ol><li>在 <code>NEHotspotConfiguration</code> 库中有3个属性，分别是：</li></ol><ul><li>SSID：要连的wifi名称</li><li>joinOnce：默认是NO，会保留配置过的wifi，YES即是不保存</li><li>lifeTimeInDays： 配置的生命周期</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/*!</span><br><span class="line"> * @property SSID</span><br><span class="line"> * @discussion SSID of the Wi-Fi Network.</span><br><span class="line"> */</span><br><span class="line">@property (readonly) NSString * SSID API_AVAILABLE(ios(11.0)) API_UNAVAILABLE(macos, watchos, tvos);</span><br><span class="line"></span><br><span class="line">/*!</span><br><span class="line"> * @property joinOnce</span><br><span class="line"> * @discussion if set to YES the configuration will not be persisted. Default is NO.</span><br><span class="line"> */</span><br><span class="line">@property BOOL joinOnce API_AVAILABLE(ios(11.0)) API_UNAVAILABLE(macos, watchos, tvos);</span><br><span class="line"></span><br><span class="line">/*!</span><br><span class="line"> * @property lifeTimeInDays</span><br><span class="line"> * @discussion The lifetime of the configuration in days. The configuration is stored for the</span><br><span class="line"> *   number of days specified by this property. The minimum value is 1 day and maximum value is 365 days.</span><br><span class="line"> *   A configuration does not get deleted automatically if this property is not set or set to an invalid value.</span><br><span class="line"> *   This property does not apply to Enterprise and HS2.0 networks.</span><br><span class="line"> */</span><br><span class="line">@property (copy) NSNumber * lifeTimeInDays API_AVAILABLE(ios(11.0)) API_UNAVAILABLE(macos, watchos, tvos);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ul><li><p>有4个实例化方法，分别是：</p></li><li><p>无密码的开放网络</p></li><li><p>受保护的WEP或WPA &#x2F; WPA2个人Wi-Fi网络创建由SSID标识的新热点配置</p></li><li><p>具有EAP设置的WPA &#x2F; WPA2企业Wi-Fi网络</p></li><li><p>具有HS 2.0和EAP设置的Hotspot 2.0 Wi-Fi网络</p></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">/*!</span><br><span class="line"> * @method initWithSSID:</span><br><span class="line"> * @discussion</span><br><span class="line"> *   A designated initializer to instantiate a new NEHotspotConfiguration object.</span><br><span class="line"> *   This initializer is used to configure open Wi-Fi Networks.</span><br><span class="line"> *</span><br><span class="line"> * @param SSID The SSID of the Open Wi-Fi Network.</span><br><span class="line"> *   Length of SSID must be between 1 and 32 characters.</span><br><span class="line"> */</span><br><span class="line">- (instancetype)initWithSSID:(NSString *)SSID API_AVAILABLE(ios(11.0)) API_UNAVAILABLE(macos, watchos, tvos);</span><br><span class="line"></span><br><span class="line">/*!</span><br><span class="line"> * @method initWithSSID:passphrase:isWEP</span><br><span class="line"> * @discussion</span><br><span class="line"> *   A designated initializer to instantiate a new NEHotspotConfiguration object.</span><br><span class="line"> *   This initializer is used configure either WEP or WPA/WPA2 Personal Wi-Fi Networks.</span><br><span class="line"> *</span><br><span class="line"> * @param SSID The SSID of the WEP or WPA/WPA2 Personal Wi-Fi Network</span><br><span class="line"> * @param passphrase The passphrase credential.</span><br><span class="line"> *   For WPA/WPA2 Personal networks: between 8 and 63 characters.</span><br><span class="line"> *   For Static WEP(64bit)  : 10 Hex Digits</span><br><span class="line"> *   For Static WEP(128bit) : 26 Hex Digits</span><br><span class="line"> * @param isWEP YES specifies WEP Wi-Fi Network else WPA/WPA2 Personal Wi-Fi Network</span><br><span class="line"> */</span><br><span class="line">- (instancetype)initWithSSID:(NSString *)SSID</span><br><span class="line">  passphrase:(NSString *)passphrase isWEP:(BOOL)isWEP API_AVAILABLE(ios(11.0)) API_UNAVAILABLE(macos, watchos, tvos);</span><br><span class="line"></span><br><span class="line">/*!</span><br><span class="line"> * @method initWithSSID:eapSettings</span><br><span class="line"> * @discussion</span><br><span class="line"> *   A designated initializer to instantiate a new NEHotspotConfiguration object.</span><br><span class="line"> *   This initializer is used configure WPA/WPA2 Enterprise Wi-Fi Networks.</span><br><span class="line"> *</span><br><span class="line"> * @param SSID The SSID of WPA/WPA2 Enterprise Wi-Fi Network</span><br><span class="line"> * @param eapSettings EAP configuration</span><br><span class="line"> */</span><br><span class="line">- (instancetype)initWithSSID:(NSString *)SSID</span><br><span class="line">  eapSettings:(NEHotspotEAPSettings *)eapSettings API_AVAILABLE(ios(11.0)) API_UNAVAILABLE(macos, watchos, tvos);</span><br><span class="line"></span><br><span class="line">/*!</span><br><span class="line"> * @method initWithHS20Settings:eapSettings</span><br><span class="line"> * @discussion</span><br><span class="line"> *   A designated initializer to instantiate a new NEHotspotConfiguration object.</span><br><span class="line"> *   This initializer is used configure HS2.0 Wi-Fi Networks.</span><br><span class="line"> *</span><br><span class="line"> * @param hs20Settings Hotspot 2.0 configuration</span><br><span class="line"> * @param eapSettings EAP configuration</span><br><span class="line"> */</span><br><span class="line">- (instancetype)initWithHS20Settings:(NEHotspotHS20Settings *)hs20Settings</span><br><span class="line">eapSettings:(NEHotspotEAPSettings *)eapSettings API_AVAILABLE(ios(11.0)) API_UNAVAILABLE(macos, watchos, tvos);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ul><li><p>NEHotspotConfigurationManager库中提供了四个方法，分别是：</p></li><li><p>应用你的 Configuration，会弹出系统框询问是否加入</p></li><li><p>通过ssid删除一个配置</p></li><li><p>删除Hotspot 2.0域名标识的Wi-Fi热点配置</p></li><li><p>获取配置过的wifi名称。如果你设置 joinOnce 为 YES,这里就不会有了</p></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/*!</span><br><span class="line"> * @method applyConfiguration:</span><br><span class="line"> * @discussion This function adds or updates a Wi-Fi network configuration.</span><br><span class="line"> * @param configuration NEHotspotConfiguration object containing the Wi-Fi network configuration.</span><br><span class="line"> * @param completionHandler A block that will be called when add/update operation is completed.</span><br><span class="line"> *   This could be nil if application does not intend to receive the result.</span><br><span class="line"> *   The NSError passed to this block will be nil if the configuration is successfully stored, non-nil otherwise.</span><br><span class="line"> *   If the configuration is found invalid or API encounters some other error then completionHandler is called</span><br><span class="line"> *   with instance of NSError containing appropriate error code. This API attempts to join the Wi-Fi network</span><br><span class="line"> *   if the configuration is successfully added or updated and the network is found nearby.</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">- (void)applyConfiguration:(NEHotspotConfiguration *)configuration</span><br><span class="line">completionHandler:(void (^ __nullable)(NSError * __nullable error))completionHandler API_AVAILABLE(ios(11.0)) API_UNAVAILABLE(macos, watchos, tvos);</span><br><span class="line"></span><br><span class="line">/*!</span><br><span class="line"> * @method removeConfigurationForSSID:</span><br><span class="line"> * @discussion This function removes Wi-Fi configuration.</span><br><span class="line"> *   If the joinOnce property was set to YES, invoking this method will disassociate from the Wi-Fi network</span><br><span class="line"> *   after the configuration is removed.</span><br><span class="line"> * @param SSID Wi-Fi SSID for which the configuration is to be deleted.</span><br><span class="line"> */</span><br><span class="line">- (void)removeConfigurationForSSID:(NSString *)SSID API_AVAILABLE(ios(11.0)) API_UNAVAILABLE(macos, watchos, tvos);</span><br><span class="line"></span><br><span class="line">/*!</span><br><span class="line"> * @method removeConfigurationForNetworkName:</span><br><span class="line"> * @discussion This function removes Wi-Fi configuration.</span><br><span class="line"> * @param domainName HS2.0 domainName for which the configuration is to be deleted.</span><br><span class="line"> */</span><br><span class="line">- (void)removeConfigurationForHS20DomainName:(NSString *)domainName API_AVAILABLE(ios(11.0)) API_UNAVAILABLE(macos, watchos, tvos);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*!</span><br><span class="line"> * @method getConfiguredSSIDsWithCompletionHandler:</span><br><span class="line"> * @discussion This function returns array of SSIDs and HS2.0 Domain Names that the calling application has configured.</span><br><span class="line"> *   It returns nil if there are no networks configurred by the calling application.</span><br><span class="line"> */</span><br><span class="line">- (void)getConfiguredSSIDsWithCompletionHandler:(void (^)(NSArray&lt;NSString *&gt; *))completionHandler API_AVAILABLE(ios(11.0)) API_UNAVAILABLE(macos, watchos, tvos);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ul><li>首先引入 NetworkExtension 库</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;NetworkExtension/NetworkExtension.h&gt;</span><br></pre></td></tr></table></figure></div><ul><li>然后需要调用 <code>NEHotspotConfiguration</code> 库方法，根据不同的情况，选择使用不同的方法，这里使用受保护的WEP或WPA举例</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NEHotspotConfiguration *hotspotConfig = [[NEHotspotConfiguration alloc]initWithSSID:@&quot;WiFi名&quot; passphrase:@&quot;WiFi密码&quot; isWEP:NO];</span><br></pre></td></tr></table></figure></div><ul><li>然后开始连接 ，调用 applyConfiguration 此方法后系统会自动弹窗确认，根据返回的error.code来判断Wi-Fi是否加入成功</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[[NEHotspotConfigurationManager sharedManager] applyConfiguration:hotspotConfig completionHandler:^(NSError * _Nullable error) &#123;</span><br><span class="line">    NSLog(@&quot;error code:%d&quot;,error.code);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ul><li>获取到已经保存过的Wi-Fi信息</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[NEHotspotConfigurationManager sharedManager] getConfiguredSSIDsWithCompletionHandler:^(NSArray&lt;NSString *&gt; * array) &#123;</span><br><span class="line">    for (NSString * str in array) &#123;</span><br><span class="line">        NSLog(@&quot;加入过的WiFi：%@&quot;,str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网络模式&quot;&gt;&lt;a href=&quot;#网络模式&quot; class=&quot;headerlink&quot; title=&quot;网络模式&quot;&gt;&lt;/a&gt;网络模式&lt;/h1&gt;&lt;p&gt;我们知道手机网络模式有两种：一种是无线 &lt;code&gt;WiFi模式&lt;/code&gt;，另一种是蜂窝数据 &lt;code&gt;Cellula</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="OC-网络学习" scheme="https://www.bboyzj.cn/tags/OC-%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>OC网络学习16：服务集标识SSID</title>
    <link href="https://www.bboyzj.cn/2023/07/17/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A016%EF%BC%9A%E6%9C%8D%E5%8A%A1%E9%9B%86%E6%A0%87%E8%AF%86SSID/"/>
    <id>https://www.bboyzj.cn/2023/07/17/OC%E7%BD%91%E7%BB%9C/OC%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A016%EF%BC%9A%E6%9C%8D%E5%8A%A1%E9%9B%86%E6%A0%87%E8%AF%86SSID/</id>
    <published>2023-07-17T06:24:56.000Z</published>
    <updated>2023-07-17T06:29:02.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是SSID"><a href="#什么是SSID" class="headerlink" title="什么是SSID"></a>什么是SSID</h1><p><code>SSID</code> 是 <code>Service Set Identifier</code> 的缩写，意思是：<code>服务集标识</code>。SSID技术可以将一个无线局域网分为几个需要不同身份验证的子网络，每一个子网络都需要独立的身份验证，只有 <code>通过身份验证的用户才可以进入相应的子网络</code>，防止未被授权的用户进入本网络。</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p><code>SSID（Service Set Identifier）</code>，即 <code>你给自己的无线网络所取的名字</code>。，许多人认为可以将SSID写成ESSID，其实不然，SSID是个笼统的概念，包含了ESSID和BSSID，用来区分不同的网络，最多可以有32个字符，无线网卡设置了不同的SSID就可以进入不同网络，SSID通常由AP广播出来，通过XP自带的扫描功能可以查看当前区域内的SSID。出于安全考虑可以不广播SSID，此时用户就要手工设置SSID才能进入相应的网络。简单说，<code>SSID就是一个局域网的名称</code>，只有设置为名称相同SSID的值的电脑才能互相通信。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是SSID&quot;&gt;&lt;a href=&quot;#什么是SSID&quot; class=&quot;headerlink&quot; title=&quot;什么是SSID&quot;&gt;&lt;/a&gt;什么是SSID&lt;/h1&gt;&lt;p&gt;&lt;code&gt;SSID&lt;/code&gt; 是 &lt;code&gt;Service Set Identifier&lt;/</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="OC-网络学习" scheme="https://www.bboyzj.cn/tags/OC-%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
