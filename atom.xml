<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张建的博客</title>
  <icon>https://www.gravatar.com/avatar/134cc2bfaf649e446f661778f4112fca</icon>
  <subtitle>成功的道路上只有荆棘，没有坦途</subtitle>
  <link href="https://www.bboyzj.cn/atom.xml" rel="self"/>
  
  <link href="https://www.bboyzj.cn/"/>
  <updated>2023-03-30T05:45:47.542Z</updated>
  <id>https://www.bboyzj.cn/</id>
  
  <author>
    <name>小J</name>
    <email>13718004742@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>性能优化05：Network 网络</title>
    <link href="https://www.bboyzj.cn/2023/09/10/OC%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9605%EF%BC%9ANetwork%20%E7%BD%91%E7%BB%9C/"/>
    <id>https://www.bboyzj.cn/2023/09/10/OC%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9605%EF%BC%9ANetwork%20%E7%BD%91%E7%BB%9C/</id>
    <published>2023-09-10T04:13:29.000Z</published>
    <updated>2023-03-30T05:45:47.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="弱网优化"><a href="#弱网优化" class="headerlink" title="弱网优化"></a>弱网优化</h1><ul><li><p>所谓弱网络，指在网络不好的情况下使用APP，如 <code>2G、3G网络</code>，用户的网络速度基本在 <code>10k/s~60k/s</code>。</p></li><li><p>考虑海外应用的话，就必须考虑弱网优化的方案了。</p></li><li><p>苹果建议，使用苹果内置的 <code>Network Link Conditioner</code> 来模拟网络环境处理 <code>APP</code> 的体验问题，在Xcode和手机都可以开启</p></li></ul><h1 id="Xcode：系统偏好设置"><a href="#Xcode：系统偏好设置" class="headerlink" title="Xcode：系统偏好设置"></a>Xcode：系统偏好设置</h1><h1 id="iPhone：开发者-gt-Network-Link-Conditioner"><a href="#iPhone：开发者-gt-Network-Link-Conditioner" class="headerlink" title="iPhone：开发者 -&gt; Network Link Conditioner"></a>iPhone：开发者 -&gt; Network Link Conditioner</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;弱网优化&quot;&gt;&lt;a href=&quot;#弱网优化&quot; class=&quot;headerlink&quot; title=&quot;弱网优化&quot;&gt;&lt;/a&gt;弱网优化&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;所谓弱网络，指在网络不好的情况下使用APP，如 &lt;code&gt;2G、3G网络&lt;/code&gt;，用户的网络速度基</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="性能优化" scheme="https://www.bboyzj.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>性能优化04：Energy 耗电</title>
    <link href="https://www.bboyzj.cn/2023/09/10/OC%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9604%EF%BC%9AEnergy%20%E8%80%97%E7%94%B5/"/>
    <id>https://www.bboyzj.cn/2023/09/10/OC%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9604%EF%BC%9AEnergy%20%E8%80%97%E7%94%B5/</id>
    <published>2023-09-10T04:13:29.000Z</published>
    <updated>2023-03-30T05:53:39.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>所有应用程序在执行网络操作、更新用户界面或在CPU上运行代码时都会消耗能量。随着用户越来越多地依赖电池电量，以及应用程序的激增，能效已成为用户体验中不可或缺的一部分。</p><h1 id="电池寿命"><a href="#电池寿命" class="headerlink" title="电池寿命"></a>电池寿命</h1><p>随着能源效率的下降，<code>电池</code> 的寿命也会下降。同时消耗过多的资源会导致界面滞后，对用户输入的响应会很慢。随着越来越多的应用程序使用越来越多的资源，系统工作起来越来越努力，速度也越来越快，设备的物理温度也在逐渐升高。当这种情况发生时，系统会采取措施将温度降低到更容易接受的水平。</p><h1 id="能量消耗的因素"><a href="#能量消耗的因素" class="headerlink" title="能量消耗的因素"></a>能量消耗的因素</h1><ol><li><p>CPU: CPU是能源的主要消耗者。高CPU使用周期会迅速耗尽用户的电池。 CPU使用率超过20%就会快速耗干电池电量——建议只在必要时通过 <code>批处理、调度和优先级排序</code> 来完成工作。</p></li><li><p>GPU: 图形处理器(显卡的处理器)，乱使用GPU会导致交互差，并且降低电池寿命。</p></li><li><p>Network：大多数iOS应用程序执行网络操作。当联网发生时，蜂窝无线电和Wi-Fi等组件就会启动并消耗能量。通过 <code>批量处理和减少事务、压缩数据和适当处理错误</code>，您的应用程序可以为节能做出重大贡献。</p></li><li><p>Location: 许多应用程序发出位置请求是为了记录用户的物理活动或提供基于环境的警报。能量消耗随着精确度的提高和位置请求的延长而增加。你的应用应该尽可能减少定位活动的准确性和持续时间。当不再需要时停止位置请求。</p></li><li><p>Background: <code>后台</code> 状态App仍会消耗电量，App要按需执行后台操作，并使用延迟APNS来保证系统运算高效执行。另外，在app进入后台状态是，立即减少动作，并且通知系统一次这些动作已经完成</p></li><li><p>Bluetooth: 长时间的 <code>蓝牙</code> 活动会耗尽iOS设备和蓝牙设备的电池。只要可能，批处理和缓冲蓝牙活动，并减少对数据的轮询。</p></li><li><p>Device wakes：iOS设备依靠睡眠来延长电池寿命。无论设备何时唤醒，都会有很高的开销成本，因为必须为屏幕和其他资源提供电源。你的应用程序，尤其是在后台操作时，应该尽可能空闲，除非绝对必要，避免用推送通知或其他活动唤醒设备</p></li></ol><h1 id="分析工具"><a href="#分析工具" class="headerlink" title="分析工具"></a>分析工具</h1><ol><li><p>Time Profile：时间分析器分析模板。使用此模板对正在运行的进程执行低开销的基于时间的采样。Time Profiler 监视应用程序中正在运行的线程，并定期采样。为每个样本收集完整的回溯，允许您深入查看样本，以准确找到代码中花费大量时间的位置。</p></li><li><p>Animation Hitches：核心动画分析模板。使用此模板可以测量图形性能和CPU使用率。启用模板 Core Animation 的 <code>Flash Updated Regions</code> 设置，以查看应用中发生的每个屏幕更新，并观察不必要或意外的更新。</p></li><li><p>Activity Monitor: 活动监视器分析模板。使用此模板可以监视整体CPU，磁盘I&#x2F;O和网络使用情况。</p></li></ol><h1 id="Energy-log调试和演示"><a href="#Energy-log调试和演示" class="headerlink" title="Energy log调试和演示"></a>Energy log调试和演示</h1><ol><li>检查第一步，是通过xcode开发工具的 <code>energy impact</code> 来整体查看app的耗电情况。</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303231852146.png"                                     ></p><p>Overhead：表示开销，包括CPU的唤起，无线电模组(蓝牙&amp;WiFi)，和其他系统资源的调用等。</p><ol start="2"><li>检查第二步：通过instrument工具的 <code>energy log</code> 来检测具体的耗电模块。</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303231853126.png"                                     ></p><h1 id="耗电优化"><a href="#耗电优化" class="headerlink" title="耗电优化"></a>耗电优化</h1><ol><li>cpu层面的优化</li></ol><ul><li>尽量降低CPU</li><li>少使用定时器</li><li>优化I&#x2F;O操作<ul><li>写入数据最好一次性写入</li><li>读取数据最好使用GCD异步操作</li><li>数据流比较大，建议使用数据库</li></ul></li><li>适当使用多线程，不宜过多，不要阻塞主线程</li><li>优化算法，减少循环次数</li><li>避免庞大的 <code>xib、storyBoard</code>， 尽量使用纯代码开发</li></ul><ol start="2"><li>GPU 层面的优化</li></ol><ul><li>减少视图刷新，按需刷新；</li><li>尽量少使用圆角和透明度；</li></ul><ol start="3"><li>Network 网络请求层面的优化</li></ol><ul><li>减少、压缩网络数据</li><li>如果多次请求的结果是相同的，尽量使用缓存</li><li>使用断点续传，否则网络不稳定时可能多次传输相同的内容</li><li>网络不可用时，不要尝试执行网络请求</li><li>让用户可以取消长时间运行或者速度很慢的网络操作，设置合适的超时时间</li><li>批量传输，比如，下载视频流时，不要传输很小的数据包，直接下载整个文件或者一大块一大块地下载</li></ul><ol start="4"><li>Location 定位层面优化</li></ol><ul><li>如果只是需要快速确定用户位置，最好用CLLocationManager的requestLocation方法。定位完成后，会自动让定位硬件断电</li><li>如果不是导航应用，尽量不要实时更新位置，定位完毕就关掉定位服务</li><li>尽量降低定位精度，比如尽量不要使用精度最高的kCLLocationAccuracyBest</li><li>需要后台定位时，尽量设置pausesLocationUpdatesAutomatically为YES，如果用户不太可能移动的时候系统会自动暂停位置更新</li><li>尽量不要使用startMonitoringSignificantLocationChanges，优先考虑startMonitoringForRegion</li></ul><ol start="5"><li>Bluetooth, Background</li></ol><ul><li>蓝牙按需取用，定位之后要关闭或降低定位频率，进入后台关闭定位，停止定时器运行等</li></ul><ol start="4"><li>硬件检测优化(不常用)</li></ol><ul><li>用户移动、摇晃、倾斜设备时，会产生动作(motion)事件，这些事件由加速度计、陀螺仪、磁力计等硬件检测。在不需要检测的场合，应该及时关闭这些硬件</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;所有应用程序在执行网络操作、更新用户界面或在CPU上运行代码时都会消耗能量。随着用户越来越多地依赖电池电量，以及应用程序的激增，能效已成为用</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="性能优化" scheme="https://www.bboyzj.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>性能优化06：启动优化</title>
    <link href="https://www.bboyzj.cn/2023/09/10/OC%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9606%EF%BC%9A%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/"/>
    <id>https://www.bboyzj.cn/2023/09/10/OC%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9606%EF%BC%9A%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/</id>
    <published>2023-09-10T04:13:29.000Z</published>
    <updated>2023-03-30T06:10:57.318Z</updated>
    
    <content type="html"><![CDATA[<p>启动优化查看以下三篇文章：</p><p><a href="https://www.bboyzj.cn/2021/05/04/OC%E8%BF%9B%E9%98%B6/OC%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%8632%EF%BC%9A%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/">OC底层原理32：启动优化（一）基本概念</a></p><p><a href="https://www.bboyzj.cn/2021/05/11/OC%E8%BF%9B%E9%98%B6/OC%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%8633%EF%BC%9A%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE/">OC底层原理33：启动优化（二）优化建议</a></p><p><a href="https://www.bboyzj.cn/2021/05/17/OC%E8%BF%9B%E9%98%B6/OC%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%8634%EF%BC%9A%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92/">OC底层原理34：启动优化（三）二进制重排</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;启动优化查看以下三篇文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bboyzj.cn/2021/05/04/OC%E8%BF%9B%E9%98%B6/OC%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%8632%EF%BC%9A%E5%</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="性能优化" scheme="https://www.bboyzj.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>OC学习34：自动订阅和非自动订阅内购买</title>
    <link href="https://www.bboyzj.cn/2023/03/31/OC%E5%AD%A6%E4%B9%A0/OC%E5%AD%A6%E4%B9%A034%EF%BC%9A%E8%87%AA%E5%8A%A8%E8%AE%A2%E9%98%85%E5%92%8C%E9%9D%9E%E8%87%AA%E5%8A%A8%E8%AE%A2%E9%98%85%E5%86%85%E8%B4%AD%E4%B9%B0/"/>
    <id>https://www.bboyzj.cn/2023/03/31/OC%E5%AD%A6%E4%B9%A0/OC%E5%AD%A6%E4%B9%A034%EF%BC%9A%E8%87%AA%E5%8A%A8%E8%AE%A2%E9%98%85%E5%92%8C%E9%9D%9E%E8%87%AA%E5%8A%A8%E8%AE%A2%E9%98%85%E5%86%85%E8%B4%AD%E4%B9%B0/</id>
    <published>2023-03-31T02:28:32.000Z</published>
    <updated>2023-03-31T05:53:47.646Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>iOS 内购分为四种商品类型：</p><ol><li><p>消耗品</p></li><li><p>非消耗品</p></li><li><p>自动续期订阅</p></li><li><p>非续期订阅</p></li></ol><h1 id="内购的实现流程"><a href="#内购的实现流程" class="headerlink" title="内购的实现流程"></a>内购的实现流程</h1><ol><li><p>去开发者网站配置税务账号</p></li><li><p>去开发者网站配置价格</p></li><li><p>在xcode开启APP的内购权限</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;iOS 内购分为四种商品类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;消耗品&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;非消耗品&lt;/p&gt;
&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="OC-学习" scheme="https://www.bboyzj.cn/tags/OC-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Swift学习28：正向传值和反向传值</title>
    <link href="https://www.bboyzj.cn/2023/03/31/Swift/Swift%E5%AD%A6%E4%B9%A028%EF%BC%9A%E6%AD%A3%E5%90%91%E4%BC%A0%E5%80%BC%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E5%80%BC/"/>
    <id>https://www.bboyzj.cn/2023/03/31/Swift/Swift%E5%AD%A6%E4%B9%A028%EF%BC%9A%E6%AD%A3%E5%90%91%E4%BC%A0%E5%80%BC%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E5%80%BC/</id>
    <published>2023-03-31T00:03:04.000Z</published>
    <updated>2023-03-31T01:29:58.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文章主要介绍如何在 <code>VC</code> 之间进行 <code>正向传值、反向传值和无相传值。</code></p><h1 id="正向传值"><a href="#正向传值" class="headerlink" title="正向传值"></a>正向传值</h1><ul><li>ViewController</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个属性并初始化</span><br><span class="line">let nextVC: NextViewController = NextViewController()</span><br><span class="line"></span><br><span class="line">// 正向传值</span><br><span class="line">nextVC.name = &quot;张建&quot;;</span><br><span class="line">self.present(nextVC, animated: true)</span><br></pre></td></tr></table></figure></div><ul><li>NextViewController</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 正向传值，接收方</span><br><span class="line">var name: String?</span><br></pre></td></tr></table></figure></div><h1 id="反向传值"><a href="#反向传值" class="headerlink" title="反向传值"></a>反向传值</h1><p>反向传值的方式有以下几种：delegate、闭包、KVO 和 NOtification 四种方式</p><ol><li>delegate</li></ol><ul><li>定义一个协议 并 定义一个方法</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 定义协议</span><br><span class="line">protocol NextDelegate &#123;</span><br><span class="line">    // 定义一个方法 返回年龄</span><br><span class="line">    func clickBtn(age: Int) -&gt; Void</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>定义代理</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 定义delegate</span><br><span class="line">var delegate: NextDelegate?</span><br></pre></td></tr></table></figure></div><ul><li>添加触发条件</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 点击按钮的事件</span><br><span class="line">@objc func clickBtn(sender: UIButton) &#123;</span><br><span class="line">    // 代理回传数据</span><br><span class="line">    delegate?.clickBtn(age: 32)</span><br><span class="line">    </span><br><span class="line">    self.dismiss(animated: true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>遵守协议，并设置代理</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 遵循协议</span><br><span class="line">class ViewController: UIViewController,NextDelegate</span><br><span class="line"></span><br><span class="line">// 设置代理</span><br><span class="line">nextVC.delegate = self</span><br></pre></td></tr></table></figure></div><ul><li>实现协议的方法，打印回传的数据</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 实现代理回调方法</span><br><span class="line">func clickBtn(age: Int) &#123;</span><br><span class="line">    print(age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="2"><li>闭包</li></ol><ul><li>定义一个闭包</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个闭包</span><br><span class="line">var passBlockValue:((_ sex:String) -&gt; Void)?</span><br></pre></td></tr></table></figure></div><ul><li>闭包回传数据</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 闭包回传数据</span><br><span class="line">passBlockValue!(&quot;男&quot;)</span><br></pre></td></tr></table></figure></div><ul><li>接收闭包回传的数据</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 接收block传值</span><br><span class="line">nextVC.passBlockValue = &#123; value in</span><br><span class="line">    print(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="3"><li>KVO</li></ol><p>KVO 可以用来监听 自定义类 里面的属性，例如：我们创建一个 Person 类，监听属性 name</p><ul><li>创建 Person 类型，并定义一个属性 name</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Person: NSObject &#123;</span><br><span class="line">    // dynamic修饰可支持KVO</span><br><span class="line">    @objc dynamic var name: String = &quot;张三&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>全局 Person</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个全局的person</span><br><span class="line">let p: Person = Person()</span><br></pre></td></tr></table></figure></div><ul><li>添加监听</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 添加监听</span><br><span class="line">p.addObserver(self, forKeyPath: &quot;name&quot;,options: [.old,.new], context: nil)</span><br></pre></td></tr></table></figure></div><ul><li>改变name</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 改变person的属性name</span><br><span class="line">p.name = &quot;李四&quot;</span><br></pre></td></tr></table></figure></div><ul><li>接收监听</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 监听对象属性发送变化，自动调用该函数</span><br><span class="line">override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) &#123;</span><br><span class="line">    let oldName = change![NSKeyValueChangeKey.oldKey]</span><br><span class="line">    if let oldName = oldName &#123;</span><br><span class="line">        print(oldName)</span><br><span class="line">        // 张三</span><br><span class="line">    &#125;</span><br><span class="line">    let newName = change![NSKeyValueChangeKey.newKey]</span><br><span class="line">    if let newName = newName &#123;</span><br><span class="line">        print(newName)</span><br><span class="line">        // 李四</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>移除监听</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 析构函数</span><br><span class="line">deinit &#123;</span><br><span class="line">    // 移除监听：add和remove必须成对出现，否则报错</span><br><span class="line">    p.removeObserver(self, forKeyPath: &quot;name&quot;, context: nil)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="4"><li>NOtification</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文章主要介绍如何在 &lt;code&gt;VC&lt;/code&gt; 之间进行 &lt;code&gt;正向传值、反向传值和无相传值。&lt;/code&gt;&lt;/p&gt;
&lt;h1 i</summary>
      
    
    
    
    <category term="Swift" scheme="https://www.bboyzj.cn/categories/Swift/"/>
    
    
    <category term="Swift-常用" scheme="https://www.bboyzj.cn/tags/Swift-%E5%B8%B8%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Flutter学习06：Dart集合类型List、Set、Map及循环语句</title>
    <link href="https://www.bboyzj.cn/2023/03/31/Flutter%E5%AD%A6%E4%B9%A0/Flutter%E5%AD%A6%E4%B9%A006%EF%BC%9ADart%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8BList%E3%80%81Set%E3%80%81Map%E5%8F%8A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
    <id>https://www.bboyzj.cn/2023/03/31/Flutter%E5%AD%A6%E4%B9%A0/Flutter%E5%AD%A6%E4%B9%A006%EF%BC%9ADart%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8BList%E3%80%81Set%E3%80%81Map%E5%8F%8A%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</id>
    <published>2023-03-30T16:53:20.000Z</published>
    <updated>2023-03-30T18:08:09.625Z</updated>
    
    
    
    
    <category term="Flutter-学习篇" scheme="https://www.bboyzj.cn/categories/Flutter-%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    
    
    <category term="Flutter" scheme="https://www.bboyzj.cn/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter学习05：Dart循环语句</title>
    <link href="https://www.bboyzj.cn/2023/03/31/Flutter%E5%AD%A6%E4%B9%A0/Flutter%E5%AD%A6%E4%B9%A005%EF%BC%9ADart%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
    <id>https://www.bboyzj.cn/2023/03/31/Flutter%E5%AD%A6%E4%B9%A0/Flutter%E5%AD%A6%E4%B9%A005%EF%BC%9ADart%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</id>
    <published>2023-03-30T16:51:45.000Z</published>
    <updated>2023-03-30T18:08:33.732Z</updated>
    
    
    
    
    <category term="Flutter-学习篇" scheme="https://www.bboyzj.cn/categories/Flutter-%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    
    
    <category term="Flutter" scheme="https://www.bboyzj.cn/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter学习04：Dart运算符、条件表达式、类型转换</title>
    <link href="https://www.bboyzj.cn/2023/03/31/Flutter%E5%AD%A6%E4%B9%A0/Flutter%E5%AD%A6%E4%B9%A004%EF%BC%9ADart%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%81%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://www.bboyzj.cn/2023/03/31/Flutter%E5%AD%A6%E4%B9%A0/Flutter%E5%AD%A6%E4%B9%A004%EF%BC%9ADart%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%81%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</id>
    <published>2023-03-30T16:51:12.000Z</published>
    <updated>2023-03-30T18:07:40.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dart运算符"><a href="#Dart运算符" class="headerlink" title="Dart运算符"></a>Dart运算符</h1><ol><li>算术运算符</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+  -  *   /   ~/（取整）    %（取余）</span><br></pre></td></tr></table></figure></div><p>示例：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void main() &#123;</span><br><span class="line">  int a = 5;</span><br><span class="line">  int b = 2;</span><br><span class="line"></span><br><span class="line">  print(a + b); // 加</span><br><span class="line">  print(a - b); // 减</span><br><span class="line">  print(a * b); // 乘</span><br><span class="line">  print(a / b); // 除</span><br><span class="line">  print(a % b); // 取余</span><br><span class="line">  print(a ~/ b); // 取整</span><br><span class="line"></span><br><span class="line">  var c = a * b;</span><br><span class="line">  print(&quot;-------&quot;)</span><br><span class="line">  print(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">======</span><br><span class="line">7</span><br><span class="line">3</span><br><span class="line">10</span><br><span class="line">2.5</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">-------</span><br><span class="line">10</span><br></pre></td></tr></table></figure></div><ol start="2"><li>关系运算符</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==    !=    &gt;   &lt;   &gt;=    &lt;=</span><br></pre></td></tr></table></figure></div><p>示例：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">void main() &#123;</span><br><span class="line">  //  ==    !=    &gt;   &lt;   &gt;=    &lt;=</span><br><span class="line"></span><br><span class="line">  int a = 5;</span><br><span class="line">  int b = 2;</span><br><span class="line"></span><br><span class="line">  print(a == b); // 判断是否相等</span><br><span class="line">  print(a != b); // 判断是否不等</span><br><span class="line">  print(a &gt; b); // 判断是否大于</span><br><span class="line">  print(a &lt; b); // 判断是否小于</span><br><span class="line">  print(a &gt;= b); // 判断是否大于等于</span><br><span class="line">  print(a &lt;= b); // 判断是否小于等于</span><br><span class="line">  </span><br><span class="line">  if (a &gt; b) &#123;</span><br><span class="line">    print(&quot;a大于b&quot;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    print(&quot;a小于b&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">======</span><br><span class="line">false</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">a大于b</span><br></pre></td></tr></table></figure></div><ol start="3"><li>逻辑运算符</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!   &amp;&amp;    ||</span><br></pre></td></tr></table></figure></div><p>示例：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">void main() &#123;</span><br><span class="line">  //  ! 取反</span><br><span class="line"></span><br><span class="line">  bool flag = true;</span><br><span class="line">  print(!flag); // false</span><br><span class="line"></span><br><span class="line">  //  &amp;&amp; 并且：全部为true时值为true 否则值为 false</span><br><span class="line"></span><br><span class="line">  var a = true;</span><br><span class="line">  var b = false;</span><br><span class="line">  print(a &amp;&amp; b); // false</span><br><span class="line"></span><br><span class="line">  // || 或者：全为false时值为false 否则值为true</span><br><span class="line">  bool c = false;</span><br><span class="line">  bool d = true;</span><br><span class="line">  print(c || d); // true</span><br><span class="line"></span><br><span class="line">  // 如果一个人的年龄是20 或者 sex 女的话我们打印这个人</span><br><span class="line">  int age = 30;</span><br><span class="line">  String sex = &quot;女&quot;;</span><br><span class="line">  if (age == 20 || sex == &quot;女&quot;) &#123;</span><br><span class="line">    print(&quot;$age --- $sex&quot;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    print(&quot;不打印&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  // 30 --- 女</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ol start="4"><li>赋值运算符</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">基础赋值运算符  =   ??=</span><br><span class="line">符合赋值运算符  +=  -=  *=  /=  %=  ~/=</span><br></pre></td></tr></table></figure></div><p>示例：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 1.基础赋值运算符  =   ??=</span><br><span class="line"></span><br><span class="line">  int a = 5;</span><br><span class="line">  print(a); // 5</span><br><span class="line"></span><br><span class="line">  // b ??= 20; 表示如果b为空的话把 20赋值给b</span><br><span class="line">  var b;</span><br><span class="line">  b ??= 20;</span><br><span class="line">  print(b); // 20</span><br><span class="line">  </span><br><span class="line"> // 2.符合赋值运算符  +=  -=  *=  /=  %=  ~/=</span><br><span class="line"></span><br><span class="line">  var a = 10;</span><br><span class="line">  a += 10; // 表示 a = a + 10</span><br><span class="line">  print(a); // 20</span><br></pre></td></tr></table></figure></div><h1 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">void main() &#123;</span><br><span class="line">  // 1.if else    switch case</span><br><span class="line"></span><br><span class="line">  // 判断一个人的成绩 如果大于60显示及格 如果大于70显示良好 如果大于90显示优秀</span><br><span class="line">  var score = 75;</span><br><span class="line">  if (score &gt; 90) &#123;</span><br><span class="line">    print(&quot;优秀&quot;);</span><br><span class="line">  &#125; else if (score &gt; 70) &#123;</span><br><span class="line">    print(&quot;良好&quot;);</span><br><span class="line">  &#125; else if (score &gt; 60) &#123;</span><br><span class="line">    print(&quot;及格&quot;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    print(&quot;不及格&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 判断性别</span><br><span class="line">  var sex = &quot;男&quot;;</span><br><span class="line">  switch (sex) &#123;</span><br><span class="line">    case &quot;男&quot;:</span><br><span class="line">      print(&quot;性别是男&quot;);</span><br><span class="line">      break;</span><br><span class="line">    case &quot;女&quot;:</span><br><span class="line">      print(&quot;性别是女&quot;);</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      print(&quot;传入参数错误&quot;);</span><br><span class="line">      break;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 2.三目运算符</span><br><span class="line"></span><br><span class="line">  bool flag = true;</span><br><span class="line">  String c = flag ? &quot;我是ture&quot; : &quot;我是false&quot;;</span><br><span class="line">  print(c);</span><br><span class="line"></span><br><span class="line">  //  3.?? 运算符</span><br><span class="line">  var a;</span><br><span class="line">  var b = a ?? 10;</span><br><span class="line">  print(b); // 10</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><ul><li>Number与String类型之间的转换</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 1.Number与String类型之间的转换</span><br><span class="line">// Number类型转换成String类型 toString()</span><br><span class="line"></span><br><span class="line">double a = 3.14;</span><br><span class="line">String b = a.toString();</span><br><span class="line">;print(b);</span><br></pre></td></tr></table></figure></div><ul><li>String类型转换成Number类型 parse()</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// String类型转换成Number类型 parse()</span><br><span class="line">String str = &quot;123.1&quot;;</span><br><span class="line">var myNum = double.parse(str);</span><br><span class="line">print(myNum is double); // 123.1</span><br><span class="line"></span><br><span class="line">// 如果是空</span><br><span class="line">String str1 = &quot;&quot;;</span><br><span class="line">try &#123;</span><br><span class="line">    // 防止报错</span><br><span class="line">    var num = double.parse(str1);</span><br><span class="line">    print(num);</span><br><span class="line">    print(num is double);</span><br><span class="line">&#125; catch (err) &#123;</span><br><span class="line">    print(0); // 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>其他类型转换成booleans类型</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 3.其他类型转换成booleans类型</span><br><span class="line"></span><br><span class="line">// isEmpty：判断字符串是否为空</span><br><span class="line">var str2 = &quot;xxx&quot;;</span><br><span class="line">if (str2.isEmpty) &#123;</span><br><span class="line">print(&quot;str2空&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">print(&quot;str2不为空&quot;); // str2不为空</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var num1;</span><br><span class="line">if (num1 == null) &#123;</span><br><span class="line">print(&quot;空&quot;); // 空</span><br><span class="line">&#125; else &#123;</span><br><span class="line">print(&quot;非空&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var num2 = 0 / 0;</span><br><span class="line">print(num2); // NaN</span><br><span class="line">if (num2.isNaN) &#123;</span><br><span class="line">print(&quot;NaN&quot;); // NaN</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dart运算符&quot;&gt;&lt;a href=&quot;#Dart运算符&quot; class=&quot;headerlink&quot; title=&quot;Dart运算符&quot;&gt;&lt;/a&gt;Dart运算符&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;算术运算符&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight-conta</summary>
      
    
    
    
    <category term="Flutter-学习篇" scheme="https://www.bboyzj.cn/categories/Flutter-%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    
    
    <category term="Flutter" scheme="https://www.bboyzj.cn/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Swift学习27：MZRefresh</title>
    <link href="https://www.bboyzj.cn/2023/03/28/Swift%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6/Swift%E5%AD%A6%E4%B9%A027%EF%BC%9AMZRefresh/"/>
    <id>https://www.bboyzj.cn/2023/03/28/Swift%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6/Swift%E5%AD%A6%E4%B9%A027%EF%BC%9AMZRefresh/</id>
    <published>2023-03-28T05:38:45.000Z</published>
    <updated>2023-03-28T12:24:59.588Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Swift</code> 下拉刷新、上拉加载组件，简单易用，适用于 <code>UIScrollView、UITableView、UICollectionView</code> 等继承自 <code>UIScrollView</code> 的组件</p><h1 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h1><p>使用 Cocoapods 引入</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &#x27;MZRefresh&#x27;</span><br></pre></td></tr></table></figure></div><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>这里以 UITableView 为例</p><ul><li>添加刷新组件</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 添加下拉刷新组件</span><br><span class="line">self.tableV.setRefreshHeader(MZRefreshNormalHeader(beginRefresh: &#123;</span><br><span class="line">    // 请求数据，请求到数据后记得停止刷新动画</span><br><span class="line">    self.loadData()</span><br><span class="line">&#125;))</span><br><span class="line">    </span><br><span class="line">// 添加上拉加载组件</span><br><span class="line">self.tableV.setRefreshFooter(MZRefreshNormalFooter(beginRefresh: &#123;</span><br><span class="line">    // 请求数据，请求到数据后记得停止刷新动画</span><br><span class="line">    self.loadMore()</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">// 加载数据</span><br><span class="line">func loadData() &#123;</span><br><span class="line">    print(&quot;下拉刷新&quot;)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">func loadMore() &#123;</span><br><span class="line">    print(&quot;上拉加载&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>手动下拉刷新或加载更多</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 手动触发下拉刷新</span><br><span class="line">self.tableV.startHeaderRefreshing(animated: true)</span><br><span class="line">// 手动触发上拉加载</span><br><span class="line">self.tableV.startFooterRefreshing(animated: true)</span><br></pre></td></tr></table></figure></div><ul><li>停止下拉刷新或加载更多</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 停止下拉刷新动画</span><br><span class="line">self.tableV.stopHeaderRefreshing()</span><br><span class="line">// 停止上拉加载动画</span><br><span class="line">self.tableV.stopFooterRefreshing()</span><br></pre></td></tr></table></figure></div><h1 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h1><ul><li>通过 <code>MZRefreshConfig</code> 类管理部分组件属性</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 管理部分组件属性</span><br><span class="line">// 刷新状态文字颜色</span><br><span class="line">MZRefreshConfig.shareInstance.setRefreshStatusColor(.blue)</span><br><span class="line">// 刷新状态文字大小</span><br><span class="line">MZRefreshConfig.shareInstance.setRefreshStatusFont(.systemFont(ofSize: 18))</span><br><span class="line">// 刷新时间文字颜色</span><br><span class="line">MZRefreshConfig.shareInstance.setRefreshTimeColor(.green)</span><br><span class="line">// 刷新时间文字大小</span><br><span class="line">MZRefreshConfig.shareInstance.setRefreshTimeFont(.systemFont(ofSize: 12))</span><br></pre></td></tr></table></figure></div><h1 id="MZRefreshNormalHeader-amp-MZRefreshNormalFooter"><a href="#MZRefreshNormalHeader-amp-MZRefreshNormalFooter" class="headerlink" title="MZRefreshNormalHeader &amp; MZRefreshNormalFooter"></a>MZRefreshNormalHeader &amp; MZRefreshNormalFooter</h1><ul><li>下拉刷新组件</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> type 刷新动画类型</span><br><span class="line"> color 刷新动画颜色</span><br><span class="line"> showTime 是否显示上次刷新时间</span><br><span class="line"> beginRefresh 刷新回调</span><br><span class="line"> */</span><br><span class="line">MZRefreshNormalHeader(type: .lineSpinFadeLoader, color: .brown, showTime: true) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>上拉加载组件</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> type 刷新动画类型</span><br><span class="line"> color 刷新动画颜色</span><br><span class="line"> beginRefresh 刷新回调</span><br><span class="line"> */</span><br><span class="line">MZRefreshNormalFooter(type: .lineScalePulseOut, color: .brown, beginRefresh: &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>刷新动画类型</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303282007690.png"                                     ></p><h1 id="MZRefreshGifHeader-amp-MZRefreshGifFooter"><a href="#MZRefreshGifHeader-amp-MZRefreshGifFooter" class="headerlink" title="MZRefreshGifHeader &amp; MZRefreshGifFooter"></a>MZRefreshGifHeader &amp; MZRefreshGifFooter</h1><ul><li>下拉刷新组件</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> 下拉刷新组件</span><br><span class="line"> images               gif分解图片数组</span><br><span class="line"> size                 gif图片显示大小</span><br><span class="line"> animationDuration    是否显示上次下拉刷新时间</span><br><span class="line"> showTime             gif动画时间</span><br><span class="line"> beginRefresh         刷新回调</span><br><span class="line"> */</span><br><span class="line">MZRefreshGifHeader(images: animationImages, size: 60, animationDuration: 1.0, showTime: true, beginRefresh: &#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">images               gif图片Data</span><br><span class="line">size                 gif图片显示大小</span><br><span class="line">animationDuration    是否显示上次下拉刷新时间</span><br><span class="line">showTime             gif动画时间</span><br><span class="line">beginRefresh         刷新回调</span><br><span class="line">*/</span><br><span class="line">MZRefreshGifHeader(gifImage: data, size: 40, animationDuration: 1.0, showTime: true, beginRefresh: &#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><ul><li>上拉加载组件</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> 上拉加载组件</span><br><span class="line"> images               gif分解图片数组</span><br><span class="line"> size                 gif图片显示大小</span><br><span class="line"> animationDuration    是否显示上次下拉刷新时间</span><br><span class="line"> beginRefresh         刷新回调</span><br><span class="line"> */</span><br><span class="line">MZRefreshGifFooter(images: animationImages, size: 60, animationDuration: 1.0, beginRefresh: &#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> 上拉加载组件</span><br><span class="line"> gifImage             gif图片Data</span><br><span class="line"> size                 gif图片显示大小</span><br><span class="line"> animationDuration    是否显示上次下拉刷新时间</span><br><span class="line"> beginRefresh         刷新回调</span><br><span class="line"> */</span><br><span class="line">MZRefreshGifFooter(gifImage: data, size: 40, animationDuration: 0.0, beginRefresh: &#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><ul><li>gif图片Data获取方式</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let path = Bundle.main.path(forResource: &quot;1&quot;, ofType: &quot;gif&quot;)!</span><br><span class="line">let data = try! Data(contentsOf: URL(fileURLWithPath: path))</span><br></pre></td></tr></table></figure></div><h1 id="MZRefreshOnlyGifHeader"><a href="#MZRefreshOnlyGifHeader" class="headerlink" title="MZRefreshOnlyGifHeader"></a>MZRefreshOnlyGifHeader</h1><ul><li>下拉刷新组件</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> 下拉刷新组件</span><br><span class="line"> images               gif分解图片数组</span><br><span class="line"> size                 gif图片显示大小</span><br><span class="line"> refreshOffSet        开始刷新所需的偏移量</span><br><span class="line"> animationDuration    gif动画时间</span><br><span class="line"> readyImage           释放刷新图片</span><br><span class="line"> beginRefresh         刷新回调</span><br><span class="line"> */</span><br><span class="line">MZRefreshOnlyGifHeader(images: animationImages, size: 80, refreshOffSet: 80, animationDuration: 1.0, readyImage: nil, beginRefresh: &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> 下拉刷新组件</span><br><span class="line"> gifImage             gif图片Data</span><br><span class="line"> size                 gif图片显示大小</span><br><span class="line"> refreshOffSet        开始刷新所需的偏移量</span><br><span class="line"> animationDuration    gif动画时间</span><br><span class="line"> readyImage           释放刷新图片</span><br><span class="line"> beginRefresh         刷新回调</span><br><span class="line"> */</span><br><span class="line">MZRefreshOnlyGifHeader(gifImage: data, size: 80, refreshOffSet: 80, animationDuration: 1.0, readyImage: nil, beginRefresh: &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h1 id="stopRefreshingWithNoMoreData"><a href="#stopRefreshingWithNoMoreData" class="headerlink" title="stopRefreshingWithNoMoreData"></a>stopRefreshingWithNoMoreData</h1><ul><li>设置 <code>NoMoreData</code> 组件</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let footer = UILabel(frame: CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width, height: 40))</span><br><span class="line">footer.font = .systemFont(ofSize: 14)</span><br><span class="line">footer.textAlignment = .center</span><br><span class="line">footer.textColor = .black</span><br><span class="line">footer.text = &quot;—— 生活的强者，往往都能坚持到底 ——&quot;</span><br><span class="line">footer.textColor = .brown</span><br><span class="line">self.tableV.setRefreshNoMoreDataView(footer)</span><br></pre></td></tr></table></figure></div><ul><li>没有更多数据加载，取消上拉加载功能</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 停止下拉刷新动画，并显示没有更多数据</span><br><span class="line">self.tableV.stopHeaderRefreshingWithNoMoreData()</span><br><span class="line"></span><br><span class="line">// 停止上拉加载动画，并显示没有更多数据</span><br><span class="line">self.tableV.stopFooterRefreshingWithNoMoreData()</span><br></pre></td></tr></table></figure></div><h1 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h1><ul><li>下拉刷新</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过 MZRefreshHeaderComponent 协议实现下拉刷新组件自定义，可参考MZRefreshNormalHeader、MZRefreshOnlyGifHeader等组件实现</span><br></pre></td></tr></table></figure></div><ul><li>上拉加载</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过 MZRefreshFooterComponent 协议实现下拉刷新组件自定义，可参考MZRefreshNormalFooter、MZRefreshGifFooter等组件实现</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Swift&lt;/code&gt; 下拉刷新、上拉加载组件，简单易用，适用于 &lt;code&gt;UIScrollView、UITableView</summary>
      
    
    
    
    <category term="Swift" scheme="https://www.bboyzj.cn/categories/Swift/"/>
    
    
    <category term="Swift-常用" scheme="https://www.bboyzj.cn/tags/Swift-%E5%B8%B8%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Swift学习26：UITableView</title>
    <link href="https://www.bboyzj.cn/2023/03/28/Swift/Swift%E5%AD%A6%E4%B9%A026%EF%BC%9AUITableView/"/>
    <id>https://www.bboyzj.cn/2023/03/28/Swift/Swift%E5%AD%A6%E4%B9%A026%EF%BC%9AUITableView/</id>
    <published>2023-03-28T00:34:36.000Z</published>
    <updated>2023-03-28T05:30:36.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><p><code>UITableView</code> 是我们开发中最常见的列表，<code>UITableView</code> 继承自 </p></li><li><p><code>UIScrollView``UIScrollView</code> 可以在任意方向滑动，<code>UITableView</code> 只能在垂直方向滑动</p></li><li><p><code>UITableView</code> 的内容由 <code>UITableViewCell</code> 来显示的</p></li><li><p><code>UITableViewCell</code> 可以使用系统自带样式，也可以自定义</p></li></ul><h1 id="创建-UITableView"><a href="#创建-UITableView" class="headerlink" title="创建 UITableView"></a>创建 <code>UITableView</code></h1><ul><li>我们在实际开发中通常是用 <code>延迟加载</code> 的方式来创建，如下：</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 懒加载：延迟加载 - 第一次使用的时候才加载</span><br><span class="line">lazy var tableV: UITableView = &#123;</span><br><span class="line">    let tableV = UITableView(frame: CGRect(x: 0, y: 0, width: UIScreen.main.bounds.size.width, height: UIScreen.main.bounds.size.height), style: .plain)</span><br><span class="line">    tableV.backgroundColor = UIColor.red</span><br><span class="line">    return tableV</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure></div><blockquote><p>注：<br>style 有两种样式：<code>plain</code> 和 <code>group</code><br>区别：<br>plain：<br>1、plain类型有多个header时，header停留（自带效果）<br>2、plain类型section之间没有间距<br>group：<br>1、类型有多个header时，header不停留<br>2、plain类型section之间有间距</p></blockquote><ul><li>将其添加到指定页面上：例如 <code>VC</code></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 添加tableV到vc的view上</span><br><span class="line">self.view.addSubview(self.tableV)</span><br></pre></td></tr></table></figure></div><h1 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h1><ul><li>可以设置代理</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 懒加载：延迟加载 - 第一次使用的时候才加载</span><br><span class="line">lazy var tableV: UITableView = &#123;</span><br><span class="line">    let tableV = UITableView(frame: CGRect(x: 0, y: 0, width: UIScreen.main.bounds.size.width, height: UIScreen.main.bounds.size.height), style: .plain)</span><br><span class="line">    tableV.backgroundColor = UIColor.red</span><br><span class="line">    // 设置代理</span><br><span class="line">    tableV.delegate = self</span><br><span class="line">    tableV.dataSource = self</span><br><span class="line">    return tableV</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure></div><ul><li>遵守代理</li></ul><p>可以通过 <code>extension</code> 去遵守代理</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">extension ViewController: UITableViewDataSource,UITableViewDelegate &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>实现代理回调方法，丰富页面</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">extension ViewController: UITableViewDataSource,UITableViewDelegate &#123;</span><br><span class="line">    // 组的个数</span><br><span class="line">    func numberOfSections(in tableView: UITableView) -&gt; Int &#123;</span><br><span class="line">        return 1</span><br><span class="line">    &#125;</span><br><span class="line">    // 每组的row数</span><br><span class="line">    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int &#123;</span><br><span class="line">        return 10</span><br><span class="line">    &#125;</span><br><span class="line">    // 每个row的cell</span><br><span class="line">    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell &#123;</span><br><span class="line">        // 系统的cell</span><br><span class="line">        let cellId = &quot;testCellId&quot;</span><br><span class="line">        var cell = tableV.dequeueReusableCell(withIdentifier: cellId)</span><br><span class="line">        if cell == nil &#123;</span><br><span class="line">            cell = UITableViewCell(style: .default, reuseIdentifier: cellId)</span><br><span class="line">        &#125;</span><br><span class="line">        cell?.textLabel?.text = &quot;标题&quot;</span><br><span class="line">        cell?.detailTextLabel?.text = &quot;内容&quot;</span><br><span class="line">        cell?.imageView?.image = UIImage(named: &quot;test&quot;)</span><br><span class="line">        </span><br><span class="line">        return cell!</span><br><span class="line">    &#125;</span><br><span class="line">    // cell的高度</span><br><span class="line">    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -&gt; CGFloat &#123;</span><br><span class="line">        return 70</span><br><span class="line">    &#125;</span><br><span class="line">    // 选中cell执行的方法</span><br><span class="line">    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) &#123;</span><br><span class="line">        print(indexPath.row)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><blockquote><p>注：系统样式的cell有三种样式：default,value1,value2,subtitle</p></blockquote><ul><li>default</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/BboyZJ.github.io/assets/16799658025019.jpg"                                     ></p><ul><li>value1</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/BboyZJ.github.io/assets/16799657416469.jpg"                                     ></p><ul><li>value2</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/BboyZJ.github.io/assets/16799656595223.jpg"                                     ></p><ul><li>subtitle</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/BboyZJ.github.io/assets/16799659584081.jpg"                                     ></p><h1 id="自定义cell"><a href="#自定义cell" class="headerlink" title="自定义cell"></a>自定义cell</h1><ul><li>创建一个 BaseTableViewCell 基类</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line"></span><br><span class="line">class BaseTableViewCell: UITableViewCell &#123;</span><br><span class="line">    // 基础</span><br><span class="line">    class func BaseTableViewCell(tableView:UITableView,indexPath:NSIndexPath) -&gt; UITableViewCell&#123;</span><br><span class="line">        let ID = NSStringFromClass(self);</span><br><span class="line">        let cls = NSClassFromString(ID) as! UITableViewCell.Type;</span><br><span class="line">        let cell = tableView.dequeueReusableCell(withIdentifier: ID) ?? cls.init(style: .default, reuseIdentifier: ID)</span><br><span class="line">        return cell</span><br><span class="line">    &#125;</span><br><span class="line">    /*</span><br><span class="line">     子类默认不继承父类的初始化器，实际上是通过 重写 父类的初始化器实现的，用 override 关键字</span><br><span class="line">     子类调用父类的初始化区，用 super</span><br><span class="line">     */</span><br><span class="line">    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) &#123;</span><br><span class="line">        super.init(style: style, reuseIdentifier: reuseIdentifier)</span><br><span class="line">        self.prepareUI()</span><br><span class="line">    &#125;</span><br><span class="line">    // UI</span><br><span class="line">    func prepareUI() &#123;</span><br><span class="line">        self.contentView.backgroundColor = kColorRandom();</span><br><span class="line">    &#125;</span><br><span class="line">    // 必要初始化器：可失败</span><br><span class="line">    required init?(coder: NSCoder) &#123;</span><br><span class="line">        fatalError(&quot;init(coder:) has not been implemented&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    // 反初始化器</span><br><span class="line">    deinit &#123;</span><br><span class="line">        print(&quot;deinit&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ul><li>创建自定义cell</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line"></span><br><span class="line">class CustomTableViewCell: BaseTableViewCell &#123;</span><br><span class="line">    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) &#123;</span><br><span class="line">        super.init(style: style, reuseIdentifier: reuseIdentifier)</span><br><span class="line">        self.prepareUI()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    override func prepareUI() &#123;</span><br><span class="line">        super.prepareUI();</span><br><span class="line">        self.contentView.backgroundColor = .white;</span><br><span class="line">        </span><br><span class="line">        initUI();</span><br><span class="line">        initConstraint();</span><br><span class="line">    &#125;</span><br><span class="line">    func initUI() &#123;</span><br><span class="line">        self.contentView.addSubview(bgV);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    func initConstraint() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    required init?(coder: NSCoder) &#123;</span><br><span class="line">        fatalError(&quot;init(coder:) has not been implemented&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ul><li>修改代理回调方法给cell赋值</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let cell = CustomTableViewCell.BaseTableViewCell(tableView: tableView, indexPath: indexPath as NSIndexPath)</span><br><span class="line">        </span><br><span class="line">return cell</span><br></pre></td></tr></table></figure></div><h1 id="cell-的插入和删除"><a href="#cell-的插入和删除" class="headerlink" title="cell 的插入和删除"></a>cell 的插入和删除</h1><ul><li>插入和删除涉及到三个代理方法 和 编辑模式的方法</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// editing: 是否开启编辑状态 animated: 是否有动画效果</span><br><span class="line">setEditing(_ editing:, animated:)</span><br></pre></td></tr></table></figure></div><ul><li>删除的实现</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 编辑模式：insert 添加操作、delete删除操作、none 没有任何操作</span><br><span class="line">func tableView(_ tableView: UITableView, editingStyleForRowAt indexPath: IndexPath) -&gt; UITableViewCell.EditingStyle &#123;</span><br><span class="line">    return .delete</span><br><span class="line">&#125;</span><br><span class="line">// 执行编辑操作：调用此方法</span><br><span class="line">func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) &#123;</span><br><span class="line">    if editingStyle == .insert &#123;</span><br><span class="line">        // 添加</span><br><span class="line">        dataArr.insert(&quot;\(indexPath.row)&quot;, at: indexPath.row)</span><br><span class="line">        // 添加操作</span><br><span class="line">        tableView.insertRows(at: [indexPath], with: .right)</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        // 删除</span><br><span class="line">        dataArr.remove(at: indexPath.row)</span><br><span class="line">        // 删除</span><br><span class="line">        print(dataArr)</span><br><span class="line">        tableView.deleteRows(at: [indexPath], with: .left)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 修改删除的文字</span><br><span class="line">func tableView(_ tableView: UITableView, titleForDeleteConfirmationButtonForRowAt indexPath: IndexPath) -&gt; String? &#123;</span><br><span class="line">    return &quot;删除&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="cell位置移动"><a href="#cell位置移动" class="headerlink" title="cell位置移动"></a>cell位置移动</h1><ul><li>移动功能同样需要开启编辑模式</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// editing: 是否开启编辑状态 animated: 是否有动画效果</span><br><span class="line">setEditing(_ editing:, animated:)</span><br></pre></td></tr></table></figure></div><ul><li>简单实现</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 设置cell是否可移动</span><br><span class="line">func tableView(_ tableView: UITableView, canMoveRowAt indexPath: IndexPath) -&gt; Bool &#123;</span><br><span class="line">    return true</span><br><span class="line">&#125;</span><br><span class="line">// 移动结束后调用此方法</span><br><span class="line">func tableView(_ tableView: UITableView, moveRowAt sourceIndexPath: IndexPath, to destinationIndexPath: IndexPath) &#123;</span><br><span class="line">    let data = dataArr[sourceIndexPath.row]</span><br><span class="line">    dataArr.remove(at: sourceIndexPath.row)</span><br><span class="line">    dataArr.insert(data, at: destinationIndexPath.row)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;UITableView&lt;/code&gt; 是我们开发中最常见的列表，&lt;code&gt;UITableView&lt;/code</summary>
      
    
    
    
    <category term="Swift" scheme="https://www.bboyzj.cn/categories/Swift/"/>
    
    
    <category term="Swift-常用" scheme="https://www.bboyzj.cn/tags/Swift-%E5%B8%B8%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Swift学习25：通知Notification</title>
    <link href="https://www.bboyzj.cn/2023/03/27/Swift/Swift%E5%AD%A6%E4%B9%A025%EF%BC%9A%E9%80%9A%E7%9F%A5Notification/"/>
    <id>https://www.bboyzj.cn/2023/03/27/Swift/Swift%E5%AD%A6%E4%B9%A025%EF%BC%9A%E9%80%9A%E7%9F%A5Notification/</id>
    <published>2023-03-27T03:43:29.000Z</published>
    <updated>2023-03-27T04:03:42.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>通知</code> 通常用于不相邻两个页面之间的 <code>传值</code></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li>初始化通知Notification</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 发送通知</span><br><span class="line">// 发送简单的数据</span><br><span class="line">// NotificationCenter.default.post(name: NSNotification.Name(rawValue:&quot;SimpleNotification&quot;), object: &quot;hello&quot;)</span><br><span class="line">// 发送复杂的数据</span><br><span class="line">let userInfo = [&quot;name&quot;:&quot;ZJ&quot;,&quot;age&quot;:32] as [String:Any]</span><br><span class="line">NotificationCenter.default.post(name: NSNotification.Name(rawValue:&quot;ComplexNotification&quot;), object: nil,userInfo: userInfo)</span><br></pre></td></tr></table></figure></div><ol start="2"><li>接收通知</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 接收通知</span><br><span class="line">NotificationCenter.default.addObserver(self, selector: #selector(handleNotification(noti:)), name: NSNotification.Name(rawValue:&quot;ComplexNotification&quot;), object: nil)</span><br></pre></td></tr></table></figure></div><ol start="3"><li>接收到通知执行的操作</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 接收到通知</span><br><span class="line">@objc func handleNotification(noti:NSNotification)  &#123;</span><br><span class="line">    print(noti.userInfo as Any)</span><br><span class="line">    print(noti.userInfo![&quot;name&quot;] as! String)</span><br><span class="line">    print(noti.userInfo![&quot;age&quot;] as! Int)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=======</span><br><span class="line">Optional([AnyHashable(&quot;name&quot;): &quot;ZJ&quot;, AnyHashable(&quot;age&quot;): 32])</span><br><span class="line">ZJ</span><br><span class="line">32</span><br></pre></td></tr></table></figure></div><ol start="4"><li>移除通知</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deinit &#123;</span><br><span class="line">    NotificationCenter.default.removeObserver(self)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;通知&lt;/code&gt; 通常用于不相邻两个页面之间的 &lt;code&gt;传值&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;使用&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="Swift" scheme="https://www.bboyzj.cn/categories/Swift/"/>
    
    
    <category term="Swift-常用" scheme="https://www.bboyzj.cn/tags/Swift-%E5%B8%B8%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Swift学习24：反初始化器deinit</title>
    <link href="https://www.bboyzj.cn/2023/03/26/Swift/Swift%E5%AD%A6%E4%B9%A024%EF%BC%9A%E5%8F%8D%E5%88%9D%E5%A7%8B%E5%8C%96%E5%99%A8deinit/"/>
    <id>https://www.bboyzj.cn/2023/03/26/Swift/Swift%E5%AD%A6%E4%B9%A024%EF%BC%9A%E5%8F%8D%E5%88%9D%E5%A7%8B%E5%8C%96%E5%99%A8deinit/</id>
    <published>2023-03-26T10:42:37.000Z</published>
    <updated>2023-03-26T11:30:56.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><p>Swift 的析构过程，在类的实例被释放前，析构函数被立即调用，析构函数只使用于类的类型。</p></li><li><p><code>析构器</code> 用 <code>deinit</code> 关键字来表示，也叫反初始化器，不带任何参数</p></li><li><p><code>构造器</code> 用 <code>init</code> 关键字来表示，也叫 <code>初始化器</code>，可以带参数</p></li></ul><h1 id="deinit-析构过程"><a href="#deinit-析构过程" class="headerlink" title="deinit 析构过程"></a>deinit 析构过程</h1><ul><li><p><code>Swift</code> 是通过 <code>自动引用计数(ARC)</code> 处理实例的内存管理，自动释放不再需要的实例以释放资源</p></li><li><p><code>析构器在实例释放发生前自动调用，你不能主动调用析构器</code></p></li><li><p>通常当实例被释放时不需要手动去清理。但是，当使用自己的资源时，可能需要进行一些额外的清理</p></li></ul><p>例如：自定义的类打开一个文件并写入一些数据，可能需要在类实例被释放之前关闭该文件</p><h1 id="deinit-语法"><a href="#deinit-语法" class="headerlink" title="deinit 语法"></a>deinit 语法</h1><p>在类的定义中，<code>每个类最多只能有一个析构函数，析构函数不带有任何参数</code>，在语法上不带圆括号</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deinit &#123;</span><br><span class="line">    // 执行析构过程</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><p>描述了一个简单的游戏，这里定义了两种新类型，分别是 <code>Bank</code> 和 <code>Player</code>。</p><p><code>Bank</code> 类管理一种虚拟硬币，确保流通的硬币数量永远不可能超过 <code>10,000</code>。在游戏中有且只能有一个 <code>Bank</code> 存在，因此 <code>Bank</code> 用类来实现，并使用类型属性和类型方法来存储和管理其当前状态。(比单例的设计要好，单例的内存不会被释放)</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Bank &#123;</span><br><span class="line">    // 类型属性：硬币数量</span><br><span class="line">    static var coinsInBank = 10_000;</span><br><span class="line">    </span><br><span class="line">    // 类型方法：分发硬币之前检查是否有足够的硬币</span><br><span class="line">    static func distribute(coins numberOfCoinsRequest: Int) -&gt; Int &#123;</span><br><span class="line">        // 可分发的硬币数量</span><br><span class="line">        let numberOfCoinToVend = min(numberOfCoinsRequest, coinsInBank);</span><br><span class="line">        // 银行剩余硬币数量</span><br><span class="line">        coinsInBank -= numberOfCoinToVend;</span><br><span class="line">        // 返回银行可分发的硬币数量</span><br><span class="line">        return numberOfCoinToVend;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 类型属性：将 Bank 实例接收到的硬币数目加回硬币存储中</span><br><span class="line">    static func receive(coins: Int) &#123;</span><br><span class="line">        coinsInBank += coins;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>Player</code> 类描述了游戏中的一个玩家。每一个玩家在任意时间都有一定数量的硬币存储在他们的钱包中。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class Player &#123;</span><br><span class="line">    // 玩家的钱包</span><br><span class="line">    var coinsInPurse: Int</span><br><span class="line">    </span><br><span class="line">    // 初始化从 Bank 对象获取指定数量的硬币</span><br><span class="line">    init(coins: Int) &#123;</span><br><span class="line">        coinsInPurse = Bank.distribute(coins: coins)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 从 Bank 对象 赢取 一定数量的硬币，把它们添加到玩家的钱包</span><br><span class="line">    func win(coins: Int) &#123;</span><br><span class="line">        coinsInPurse += Bank.distribute(coins: coins)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 析构器被自动调用</span><br><span class="line">    deinit &#123;</span><br><span class="line">        // 查询 Player 的硬币</span><br><span class="line">        print(&quot;Bank回收之前，Player的硬币数量：\(coinsInPurse)&quot;)</span><br><span class="line">        // 查询 Bank 的硬币</span><br><span class="line">        print(&quot;Bank回收之前，Bank的硬币数量：\(Bank.coinsInBank)&quot;)</span><br><span class="line">        </span><br><span class="line">        // 玩家钱包中的硬币返回给银行</span><br><span class="line">        Bank.receive(coins: coinsInPurse)</span><br><span class="line">        coinsInPurse = 0;</span><br><span class="line">        </span><br><span class="line">        // 查询 Player 的硬币</span><br><span class="line">        print(&quot;Bank回收之后，Player的硬币数量：\(coinsInPurse)&quot;)</span><br><span class="line">        // 查询 Bank 的硬币</span><br><span class="line">        print(&quot;Bank回收之后，Bank的硬币数量：\(Bank.coinsInBank)&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>假设玩家从银行初次获取 3000 硬币，后又赢取 1000 硬币</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class ViewController: UIViewController &#123;</span><br><span class="line">    </span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        // 实例化 Player 从 Bank 获取 3000 硬币</span><br><span class="line">        let player = Player(coins: 3000)</span><br><span class="line">        // Player 从 Bank 赢取 100 硬币</span><br><span class="line">        player.win(coins: 1000)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>当玩家的硬币由于某些原因被回收后，查看打印结果</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Bank回收之前，Player的硬币数量：4000</span><br><span class="line">Bank回收之前，Bank的硬币数量：6000</span><br><span class="line">Bank回收之后，Player的硬币数量：0</span><br><span class="line">Bank回收之后，Bank的硬币数量：10000</span><br></pre></td></tr></table></figure></div><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p>析构过程调用的方法是 <code>deinit &#123;&#125;</code>。类似 <code>OC</code> 的 <code>dealloc</code></p></li><li><p><code>deinit</code> 通过 <code>ARC</code> 自动处理，不需要手动操作，也会自动调用父类的 <code>deinit</code></p></li><li><p><code>deinit</code> 里处理对象将要被释放时的一些操作</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Swift 的析构过程，在类的实例被释放前，析构函数被立即调用，析构函数只使用于类的类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    <category term="Swift" scheme="https://www.bboyzj.cn/categories/Swift/"/>
    
    
    <category term="Swift-常用" scheme="https://www.bboyzj.cn/tags/Swift-%E5%B8%B8%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>性能优化02.3：Ping主线程</title>
    <link href="https://www.bboyzj.cn/2023/03/23/OC%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9602.3%EF%BC%9APing%E4%B8%BB%E7%BA%BF%E7%A8%8B/"/>
    <id>https://www.bboyzj.cn/2023/03/23/OC%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9602.3%EF%BC%9APing%E4%B8%BB%E7%BA%BF%E7%A8%8B/</id>
    <published>2023-03-23T02:07:43.000Z</published>
    <updated>2023-03-30T03:22:14.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>Ping主线程的核心思想是向主线程发送一个信号，一定时间内收到了主线程的回复，即表示当前主线程流畅运行。没有收到主线程的回复，即表示当前主线程在做耗时运算，发生了卡顿。</p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p>目前昆虫线上使用的就是这套方案。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">self.semaphore = dispatch_semaphore_create(0);</span><br><span class="line">- (void)main &#123; </span><br><span class="line">    //判断是否需要上报  </span><br><span class="line">    __weak typeof(self) weakSelf = self; </span><br><span class="line">    void (^ verifyReport)(void) = ^() &#123;   </span><br><span class="line">    __strong typeof(weakSelf) strongSelf = weakSelf;    </span><br><span class="line">    if (strongSelf.reportInfo.length &gt; 0) &#123;     </span><br><span class="line">       if (strongSelf.handler) &#123;     </span><br><span class="line">            double responseTimeValue = floor([[NSDate date] timeIntervalSince1970] * 1000); </span><br><span class="line">            double duration = responseTimeValue - strongSelf.startTimeValue;     </span><br><span class="line">            if (DEBUG) &#123;      </span><br><span class="line">                NSLog(@&quot;卡了%f,堆栈为--%@&quot;, duration, strongSelf.reportInfo);    </span><br><span class="line">            &#125;          </span><br><span class="line">            strongSelf.handler(@&#123;@&quot;title&quot;: [InsectUtil dateFormatNow].length &gt; 0 ? [InsectUtil dateFormatNow] : @&quot;&quot;,                    </span><br><span class="line">            @&quot;duration&quot;: [NSString stringWithFormat:@&quot;%.2f&quot;,duration],@&quot;content&quot;: strongSelf.reportInfo       </span><br><span class="line">            &#125;);   </span><br><span class="line">        &#125;          </span><br><span class="line">        strongSelf.reportInfo = @&quot;&quot;;     </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;    </span><br><span class="line">    </span><br><span class="line">while (!self.cancelled) &#123;    </span><br><span class="line">    if (_isApplicationInActive) &#123;       </span><br><span class="line">        self.mainThreadBlock = YES;       </span><br><span class="line">        self.reportInfo = @&quot;&quot;;        </span><br><span class="line">        self.startTimeValue = floor([[NSDate date] timeIntervalSince1970] * 1000);    </span><br><span class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;          </span><br><span class="line">            self.mainThreadBlock = NO;      </span><br><span class="line">            dispatch_semaphore_signal(self.semaphore);    </span><br><span class="line">        &#125;);        </span><br><span class="line">        [NSThread sleepForTimeInterval:(self.threshold/1000)];    </span><br><span class="line">        if (self.isMainThreadBlock) &#123;         </span><br><span class="line">            self.reportInfo = [InsectBacktraceLogger insect_backtraceOfMainThread];     </span><br><span class="line">        &#125;         </span><br><span class="line">        dispatch_semaphore_wait(self.semaphore, DISPATCH_TIME_FOREVER);     </span><br><span class="line">        // 卡顿超时情况;          </span><br><span class="line">        verifyReport();   </span><br><span class="line">    &#125; else &#123;    </span><br><span class="line">        [NSThread sleepForTimeInterval:(self.threshold/1000)];     </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;&#125; </span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;Ping主线程的核心思想是向主线程发送一个信号，一定时间内收到了主线程的回复，即表示当前主线程流畅运行。没有收到主线程的回复，即表示当前主线</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="性能优化" scheme="https://www.bboyzj.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>性能优化02.2：Runloop监测</title>
    <link href="https://www.bboyzj.cn/2023/03/23/OC%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9602.2%EF%BC%9ARunloop%E7%9B%91%E6%B5%8B/"/>
    <id>https://www.bboyzj.cn/2023/03/23/OC%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9602.2%EF%BC%9ARunloop%E7%9B%91%E6%B5%8B/</id>
    <published>2023-03-23T00:07:53.000Z</published>
    <updated>2023-03-30T03:16:17.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RunLoop-原理"><a href="#RunLoop-原理" class="headerlink" title="RunLoop 原理"></a>RunLoop 原理</h1><ol><li><code>RunLoop</code> 在 <code>iOS</code> 里由 <code>CFRunLoop</code> 实现。简单来说，<code>RunLoop</code> 是用来监听输入源，进行调度处理的。</li></ol><ul><li><p>这里的输入源可以是输入设备、网络、周期性或者延迟时间、异步回调。</p></li><li><p><code>RunLoop</code> 会接收两种类型的输入源：一种是来自另一个线程或者来自不同应用的异步消息；另一种是来自预订时间或者重复间隔的同步事件。</p></li><li><p><code>RunLoop</code> 的目的是，当有事件要去处理时保持线程忙，当没有事件要处理时让线程进入休眠。所以，<code>RunLoop</code> 不光能够运用到监控卡顿上，还可以提高用户的交互体验。通过将那些繁重而不紧急会大量占用 <code>CPU</code> 的任务（比如图片加载），放到空闲的 <code>RunLoop</code> 模式里执行，就可以避开在 <code>UITrackingRunLoopMode</code> 这个 <code>RunLoop</code> 模式时执行</p></li></ul><ol start="2"><li>RunLoop 执行流程</li></ol><ul><li>在RunLoop运行的整个过程中，<code>loop</code> 的状态包括 <code>6</code> 个:</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) &#123;</span><br><span class="line">    kCFRunLoopEntry , // 进入 loop</span><br><span class="line">    kCFRunLoopBeforeTimers , // 触发 Timer 回调</span><br><span class="line">    kCFRunLoopBeforeSources , // 触发 Source0 回调</span><br><span class="line">    kCFRunLoopBeforeWaiting , // 等待 mach_port 消息</span><br><span class="line">    kCFRunLoopAfterWaiting ), // 接收 mach_port 消息</span><br><span class="line">    kCFRunLoopExit , // 退出 loop</span><br><span class="line">    kCFRunLoopAllActivities  // loop 所有状态改变</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Runloop 流程图：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303230822991.png"                                     ></p><blockquote><p>注：<br>1、<code>Source0</code> 被添加到 <code>RunLoop</code> 上时并不会主动唤醒线程，需要手动去唤醒。<code>Source0</code> 负责对触摸事件的处理以及 <code>performSeletor:onThread:</code>。<br>2、<code>Source1</code> 具备唤醒线程的能力，使用的是基于 <code>Port</code> 的 <code>线程间通信</code>。<code>Source1</code> 负责捕获系统事件，并将事件交由 <code>Source0</code> 处理。</p></blockquote><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">RunLoop 顺序：</span><br><span class="line">     1、进入</span><br><span class="line">     </span><br><span class="line">     2、通知Timer</span><br><span class="line">     3、通知Source</span><br><span class="line">     4、处理Block</span><br><span class="line">     5、处理Source0</span><br><span class="line">     6、如果有 Source1 调转到 11</span><br><span class="line">     7、通知 BeforWaiting</span><br><span class="line">     8、休眠 wait：等待线程被唤醒</span><br><span class="line">     9、通知 afterWaiting</span><br><span class="line">     10、处理唤醒线程消息： timer、GCD相关、处理Source1</span><br><span class="line">     11、处理 dispatch 到 main_queue 的 block</span><br><span class="line">     12、根据情况，决定如何操作：回到 2、退出Runloop</span><br><span class="line">     </span><br><span class="line">     13、退出 Runloop</span><br></pre></td></tr></table></figure></div><ul><li><p>理清楚Runloop的 <code>运行机制</code>，就很容易明白处理事件主要有两个时间段 <code>kCFRunLoopBeforeSources</code> 发送之后和 <code>kCFRunLoopAfterWaiting</code> 发送之后。</p></li><li><p><code>dispatch_semaphore_t</code> 是一个信号量机制，信号量到达、或者超时会继续向下进行，否则等待，如果超时则返回的结果必定不为0，信号量到达结果为0。</p></li><li><p>利用这个特性我们判断卡顿出现的条件为 <code>在信号量发送 kCFRunLoopBeforeSources</code> 和<code>kCFRunLoopAfterWaiting</code> 后进行了大量的操作，在一段时间内没有再发送信号量，导致超时。也就是说 <code>主线程通知</code> 状态 <code>长时间的停留在这两个状态上了</code>。转换为代码就是判断有没有超时， <code>超时</code> 了，判断当前停留的状态是不是这两个状态，如果是，就判定为 <code>卡顿</code>。</p></li></ul><ol start="3"><li><p>这样就能解释通为什么要用这两个信号量判断卡顿。这么一个简单的问题，思路转不过来就绕进去了，现在回看感觉这个很简单，也是耗了一天时间。</p></li><li><p>要利用 <code>RunLoop</code> 原理来监控卡顿的话，要关注两个阶段。分别是 <code>kCFRunLoopBeforeSources</code> 和 <code>kCFRunLoopAfterWaiting</code> ，就是要触发 <code>Source0</code> 回调和接收 <code>mach_port</code> 消息两个状态。</p></li></ol><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><ol><li>创建一个 ZJRunloopMonitor 类</li></ol><p>.h 文件</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@interface ZJRunloopMonitor : NSObject</span><br><span class="line">// 单例</span><br><span class="line">+ (instancetype)shareInstance;</span><br><span class="line">// 开始监测</span><br><span class="line">- (void)startMonitor;</span><br><span class="line">// 停止监测</span><br><span class="line">- (void)stopMonitor;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></div><p>.m 文件</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;ZJRunloopMonitor.h&quot;</span><br><span class="line"></span><br><span class="line">@interface ZJRunloopMonitor ()&#123;</span><br><span class="line">    // 信号量</span><br><span class="line">    dispatch_semaphore_t dispatchSemaphore;</span><br><span class="line">    CFRunLoopObserverRef runLoopObserver;</span><br><span class="line">    CFRunLoopActivity runLoopActivity;</span><br><span class="line">    NSInteger timeoutCount;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line">@implementation ZJRunloopMonitor</span><br><span class="line">// 单例</span><br><span class="line">+ (instancetype)shareInstance&#123;</span><br><span class="line">    static ZJRunloopMonitor * instance = nil;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        instance = [[ZJRunloopMonitor alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    return instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark -开始监测</span><br><span class="line">- (void)startMonitor&#123;</span><br><span class="line">    // 如果有监测，则返回</span><br><span class="line">    if (runLoopObserver) &#123;return;&#125;</span><br><span class="line">    </span><br><span class="line">    // 创建 CFRunLoopObserverContext 观察者</span><br><span class="line">    /**</span><br><span class="line">         typedef struct &#123;</span><br><span class="line">         CFIndex    version;</span><br><span class="line">         void * info;</span><br><span class="line">         const void *(*retain)(const void *info);</span><br><span class="line">         void   (*release)(const void *info);</span><br><span class="line">         CFStringRef    (*copyDescription)(const void *info);</span><br><span class="line">         &#125; CFRunLoopObserverContext;</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line">    CFRunLoopObserverContext context = &#123;0,(__bridge void*)self,NULL,NULL,NULL&#125;;</span><br><span class="line">    /**</span><br><span class="line">        CFRunLoopObserverRef CFRunLoopObserverCreate(</span><br><span class="line">        CFAllocatorRef allocator,</span><br><span class="line">        CFOptionFlags activities,</span><br><span class="line">        Boolean repeats,</span><br><span class="line">        CFIndex order,</span><br><span class="line">        CFRunLoopObserverCallBack callout,</span><br><span class="line">        CFRunLoopObserverContext *context</span><br><span class="line">        );</span><br><span class="line">        */</span><br><span class="line">    runLoopObserver = CFRunLoopObserverCreate(kCFAllocatorDefault,</span><br><span class="line">                                              kCFRunLoopAllActivities,</span><br><span class="line">                                              YES,</span><br><span class="line">                                              0,</span><br><span class="line">                                              &amp;runLoopObserverCallBack,</span><br><span class="line">                                              &amp;context);</span><br><span class="line">    // 添加观察者</span><br><span class="line">    CFRunLoopAddObserver(CFRunLoopGetMain(), runLoopObserver, kCFRunLoopCommonModes);</span><br><span class="line">    </span><br><span class="line">    // 向主线程添加 观察者</span><br><span class="line">    CFRunLoopRef mainLoop = CFRunLoopGetMain();</span><br><span class="line">    CFRunLoopAddObserver(mainLoop, runLoopObserver, kCFRunLoopCommonModes);</span><br><span class="line">    </span><br><span class="line">    // 创建子线程开始监控</span><br><span class="line">    dispatch_queue_t monitorQueue = dispatch_queue_create(&quot;com.zj.monitorQueue&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">        </span><br><span class="line">    // 创建同步信号量</span><br><span class="line">    dispatchSemaphore = dispatch_semaphore_create(0);</span><br><span class="line">    </span><br><span class="line">    //创建子线程开始监控</span><br><span class="line">    dispatch_async(monitorQueue, ^&#123;</span><br><span class="line">        // 子线程开启一个持续的loop用来进行监控</span><br><span class="line">        while (YES) &#123;</span><br><span class="line">            // 超时时间设置 2s</span><br><span class="line">            dispatch_time_t outTimer = dispatch_time(DISPATCH_TIME_NOW, 2 * NSEC_PER_SEC);</span><br><span class="line">            </span><br><span class="line">            // 信号量到达、或者 超时会继续向下进行，否则等待</span><br><span class="line">            long result = dispatch_semaphore_wait(self-&gt;dispatchSemaphore, outTimer);</span><br><span class="line">            </span><br><span class="line">            if (result != 0) &#123;</span><br><span class="line">                // 超时，判断最后停留的信号量是哪一个，是否处理为卡顿现象。</span><br><span class="line">                if (!self-&gt;runLoopObserver) &#123;</span><br><span class="line">                    NSLog(@&quot;--NO runLoopObserver---&quot;);</span><br><span class="line">                    self-&gt;timeoutCount = 0;</span><br><span class="line">                    self-&gt;dispatchSemaphore = 0;</span><br><span class="line">                    self-&gt;runLoopActivity = 0;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                //判断当前 监听到的 信号(也就是说上一个信号量超过2秒没有更新，故卡顿)</span><br><span class="line">                if (self-&gt;runLoopActivity == kCFRunLoopBeforeSources ||</span><br><span class="line">                    self-&gt;runLoopActivity == kCFRunLoopAfterWaiting) &#123;</span><br><span class="line">                    // 出现卡顿、进一步处理</span><br><span class="line">                    NSLog(@&quot;--卡顿啦----From 卡顿监控线程&quot;);</span><br><span class="line">                    // log current stack info</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            NSLog(@&quot;--系统运行良好--From 卡顿监控线程&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 停止监测</span><br><span class="line">- (void)stopMonitor&#123;</span><br><span class="line">    if (!runLoopObserver) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    CFRunLoopRemoveObserver(CFRunLoopGetMain(), runLoopObserver, kCFRunLoopCommonModes);</span><br><span class="line">    CFRelease(runLoopObserver);</span><br><span class="line">    runLoopObserver = NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark -监控是否处于 运行状态</span><br><span class="line">// 观察者回调函数</span><br><span class="line">void runLoopObserverCallBack(CFRunLoopObserverRef observer, CFRunLoopActivity activity, void *info) &#123;</span><br><span class="line">    // 每一次监测到Runloop发送通知的时候，都会调用此函数</span><br><span class="line">    // 在此过程修改当前的 RunloopActivity 状态，发送同步信号。</span><br><span class="line">    ZJRunloopMonitor * monitor = (__bridge ZJRunloopMonitor *)info;</span><br><span class="line">    monitor-&gt;runLoopActivity = activity;</span><br><span class="line">    dispatch_semaphore_t semaphore = monitor-&gt;dispatchSemaphore;</span><br><span class="line">    dispatch_semaphore_signal(semaphore);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></div><ol start="2"><li>观察RunLoop 的 <code>common</code> 模式</li></ol><ul><li><p>将创建好的观察者 <code>runLoopObserver</code> 添加到主线程 <code>RunLoop</code> 的 <code>common</code> 模式下观察。<br>然后，创建一个持续的子线程专门用来监控主线程的 <code>RunLoop</code> 状态。</p></li><li><p>一旦发现进入睡眠前的 <code>kCFRunLoopBeforeSources</code> 状态，或者唤醒后的状态 <code>kCFRunLoopAfterWaiting</code>，在设置的时间阈值内一直没有变化，即可判定为 <code>卡顿</code>。</p></li><li><p>代码中触发卡顿的时间阈值 ,设置成了 <code>2</code> 秒。这个 <code>2</code> 秒的阈值合理？我们可以根据 <code>WatchDog</code> 机制来设置。<code>WatchDog</code> 在不同状态下设置的不同时间，如下所示：</p></li></ul><blockquote><p>启动（Launch）：20s；<br>恢复（Resume）：10s；<br>挂起（Suspend）：10s；<br>退出（Quit）：6s；<br>后台（Background）：3min（在 iOS 7 之前，每次申请 10min； 之后改为每次申请 3min，可连续申请，最多申请到 10min）。</p></blockquote><ul><li>接下来，我们就可以 <code>log</code> 出堆栈的信息，从而进一步分析出具体是哪个方法的执行时间过长。</li></ul><h1 id="如何获取卡顿的方法堆栈信息"><a href="#如何获取卡顿的方法堆栈信息" class="headerlink" title="如何获取卡顿的方法堆栈信息"></a>如何获取卡顿的方法堆栈信息</h1><ul><li><p>子线程监控发现卡顿后，还需要记录当前出现卡顿的方法堆栈信息，并适时推送到服务端供开发者分析，从而解决卡顿问题。</p></li><li><p>直接调用系统函数获取堆栈</p></li><li><p>这种方法的优点在于，性能消耗小。但是，它只能够获取简单的信息，也没有办法配合 <code>dSYM</code> 来获取具体是哪行代码出了问题，而且能够获取的信息类型也有限。</p></li><li><p>但因为性能比较好，所以适用于观察大盘统计卡顿情况，而不是想要找到卡顿原因的场景。</p></li></ul><ol><li>直接获取堆栈信息</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;libkern/OSAtomic.h&gt;</span><br><span class="line">#include &lt;execinfo.h&gt;</span><br><span class="line"></span><br><span class="line">//获取函数堆栈信息</span><br><span class="line">+ (NSArray *)backtrace &#123;</span><br><span class="line">    void* callstack[128];</span><br><span class="line">    int frames = backtrace(callstack, 128);//用于获取当前线程的函数调用堆栈，返回实际获取的指针个数</span><br><span class="line">    char **strs = backtrace_symbols(callstack, frames);//从backtrace函数获取的信息转化为一个字符串数组</span><br><span class="line">    int i;</span><br><span class="line">    NSMutableArray *backtrace = [NSMutableArray arrayWithCapacity:frames];</span><br><span class="line">    for (i = 0;</span><br><span class="line">     i &lt; backtrace.count;</span><br><span class="line">     i++)  &#123;</span><br><span class="line">        [backtrace addObject:[NSString stringWithUTF8String:strs[i]]];</span><br><span class="line">    &#125;</span><br><span class="line">    free(strs);</span><br><span class="line">    return backtrace;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="2"><li>三方库</li></ol><p>直接用 <a href="">PLCrashReporter</a> 这个开源的第三方库来获取堆栈信息。这种方法的特点是，能够定位到问题代码的具体位置，而且性能消耗也不大。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 获取数据</span><br><span class="line">NSData *lagData = [[[PLCrashReporter alloc] initWithConfiguration:[[PLCrashReporterConfig alloc] initWithSignalHandlerType:PLCrashReporterSignalHandlerTypeBSD symbolicationStrategy:PLCrashReporterSymbolicationStrategyAll]] generateLiveReport];</span><br><span class="line">// 转换成 PLCrashReport 对象</span><br><span class="line">PLCrashReport *lagReport = [[PLCrashReport alloc] initWithData:lagData error:NULL];</span><br><span class="line">// 进行字符串格式化处理</span><br><span class="line">NSString *lagReportString = [PLCrashReportTextFormatter stringValueForCrashReport:lagReport withTextFormat:PLCrashReportTextFormatiOS];</span><br><span class="line">//将字符串上传服务器</span><br><span class="line">NSLog(@&quot;lag happen, detail below: \n %@&quot;,lagReportString);</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RunLoop-原理&quot;&gt;&lt;a href=&quot;#RunLoop-原理&quot; class=&quot;headerlink&quot; title=&quot;RunLoop 原理&quot;&gt;&lt;/a&gt;RunLoop 原理&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;RunLoop&lt;/code&gt; 在 &lt;code&gt;iOS</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="性能优化" scheme="https://www.bboyzj.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>性能优化02.1：FPS监测</title>
    <link href="https://www.bboyzj.cn/2023/03/23/OC%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9602.1%EF%BC%9AFPS%E7%9B%91%E6%B5%8B/"/>
    <id>https://www.bboyzj.cn/2023/03/23/OC%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9602.1%EF%BC%9AFPS%E7%9B%91%E6%B5%8B/</id>
    <published>2023-03-22T22:53:11.000Z</published>
    <updated>2023-03-30T03:10:48.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="监控-FPS"><a href="#监控-FPS" class="headerlink" title="监控 FPS"></a>监控 FPS</h1><ul><li><p>一般来说，我们约定 <code>60FPS</code> 即为流畅，那么反过来，如果App在运行期间出现了掉帧，即可认为出现了卡顿。</p></li><li><p>监控FPS方案一般是基于 <code>CADisplayLink</code> 实现的。<code>CADisplayLink</code> 是一个和屏幕刷新率保持一致的定时器，一旦 <code>CADisplayLink</code> 以特定的模式注册到 <code>runloop</code> 后，没当屏幕需要刷新时，<code>runloop</code> 就会调用 <code>CADisplayLink</code> 绑定的 <code>target</code> 上的 <code>selector</code>。</p></li><li><p>通过向 <code>runloop</code> 中添加 <code>CADisplayLink</code>，根据回调来计算出当前画面的 <code>帧数</code>。</p></li><li><p><code>FPS</code> 的 <code>好处</code> 就是直观，根据 <code>FPS</code> 是否下降说明页面某处是否有性能问题。</p></li><li><p><code>FPS</code> 的 <code>坏处</code> 就是只知道页面的某处，不能准确定位到具体的 <code>堆栈</code>。</p></li></ul><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><ul><li>创建一个 <code>ZJFPSMonitor</code> 工具类，实现如下代码：</li></ul><p>.h 文件下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line"></span><br><span class="line">@interface ZJFPSMonitor : NSObject</span><br><span class="line">// 返回屏幕刷新率FPS</span><br><span class="line">@property (nonatomic,copy)void(^FPSMonitorBlock)(NSInteger fps);</span><br><span class="line">// 单例</span><br><span class="line">+ (instancetype)shareInstance;</span><br><span class="line">// 开始监测</span><br><span class="line">- (void)startMonitor;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure></div><p>.m 文件下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;ZJFPSMonitor.h&quot;</span><br><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br><span class="line">#import &lt;ZJWeakProxy/ZJWeakProxy.h&gt;</span><br><span class="line"></span><br><span class="line">@interface ZJFPSMonitor ()</span><br><span class="line">@property (nonatomic,strong)CADisplayLink * displayLink;</span><br><span class="line">@property (nonatomic,assign)NSTimeInterval lastUpdateTime; // 上一次更新时间</span><br><span class="line">@property (nonatomic,assign)NSInteger count; // 刷新次数</span><br><span class="line">@property (nonatomic,assign)NSInteger fps; // FPS</span><br><span class="line">@end</span><br><span class="line">@implementation ZJFPSMonitor</span><br><span class="line">// 单例</span><br><span class="line">+ (instancetype)shareInstance&#123;</span><br><span class="line">    static ZJFPSMonitor * instance = nil;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        instance = [[ZJFPSMonitor alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    return instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark -开始监测</span><br><span class="line">- (void)startMonitor&#123;</span><br><span class="line">    if (_displayLink != nil) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    // 线程保活</span><br><span class="line">    [self.displayLink addToRunLoop:[NSRunLoop currentRunLoop] forMode:NSRunLoopCommonModes];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark -计算FPS</span><br><span class="line">- (void)fpsInfoAction:(CADisplayLink *)displayLink&#123;</span><br><span class="line">    if (self.lastUpdateTime == 0) &#123;</span><br><span class="line">        self.lastUpdateTime = displayLink.timestamp;</span><br><span class="line">    &#125;</span><br><span class="line">    // 刷新次数</span><br><span class="line">    self.count ++;</span><br><span class="line">    // 时间间隔</span><br><span class="line">    NSTimeInterval interval = displayLink.timestamp - self.lastUpdateTime;</span><br><span class="line">    // 如果满足更新FPS时间间隔</span><br><span class="line">    if (interval &gt;= 1) &#123;</span><br><span class="line">        // 赋值fps</span><br><span class="line">        self.fps = self.count / interval;</span><br><span class="line">        // 赋值上次更新时间</span><br><span class="line">        self.lastUpdateTime = displayLink.timestamp;</span><br><span class="line">        // 重置数量</span><br><span class="line">        self.count = 0;</span><br><span class="line">        // 返回FPS</span><br><span class="line">        if (self.FPSMonitorBlock) &#123;</span><br><span class="line">            self.FPSMonitorBlock(self.fps);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark -lazy</span><br><span class="line">- (CADisplayLink *)displayLink&#123;</span><br><span class="line">    if (!_displayLink) &#123;</span><br><span class="line">        _displayLink = [CADisplayLink displayLinkWithTarget:[ZJWeakProxy proxyWithTarget:self] selector:@selector(fpsInfoAction:)];</span><br><span class="line">        // 屏幕刷新率</span><br><span class="line">        _displayLink.preferredFramesPerSecond = 60;</span><br><span class="line">    &#125;</span><br><span class="line">    return _displayLink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ul><li>VC 中调用</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;ViewController.h&quot;</span><br><span class="line">#import &quot;ZJFPSMonitor.h&quot;</span><br><span class="line"></span><br><span class="line">@interface ViewController ()</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    // 开始监测FPS</span><br><span class="line">    [ZJFPSMonitor.shareInstance startMonitor];</span><br><span class="line">    ZJFPSMonitor.shareInstance.FPSMonitorBlock = ^(NSInteger fps) &#123;</span><br><span class="line">        NSLog(@&quot;%ld&quot;,fps);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></div><p>查看打印结果：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2023-03-23 06:58:00.945820+0800 FPS[27330:1519462] 60</span><br><span class="line">2023-03-23 06:58:01.962348+0800 FPS[27330:1519462] 60</span><br><span class="line">2023-03-23 06:58:02.979022+0800 FPS[27330:1519462] 60</span><br><span class="line">2023-03-23 06:58:03.995646+0800 FPS[27330:1519462] 60</span><br><span class="line">2023-03-23 06:58:05.012252+0800 FPS[27330:1519462] 60</span><br><span class="line">2023-03-23 06:58:06.028901+0800 FPS[27330:1519462] 60</span><br><span class="line">2023-03-23 06:58:07.045433+0800 FPS[27330:1519462] 60</span><br><span class="line">2023-03-23 06:58:08.062067+0800 FPS[27330:1519462] 60</span><br><span class="line">2023-03-23 06:58:09.078645+0800 FPS[27330:1519462] 60</span><br><span class="line">2023-03-23 06:58:10.095264+0800 FPS[27330:1519462] 60</span><br><span class="line">2023-03-23 06:58:11.111855+0800 FPS[27330:1519462] 60</span><br><span class="line">2023-03-23 06:58:12.128443+0800 FPS[27330:1519462] 60</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;监控-FPS&quot;&gt;&lt;a href=&quot;#监控-FPS&quot; class=&quot;headerlink&quot; title=&quot;监控 FPS&quot;&gt;&lt;/a&gt;监控 FPS&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一般来说，我们约定 &lt;code&gt;60FPS&lt;/code&gt; 即为流畅，那么反过来，如果App</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="性能优化" scheme="https://www.bboyzj.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>OC学习24：多环境配置</title>
    <link href="https://www.bboyzj.cn/2023/03/21/OC%E5%AD%A6%E4%B9%A0/OC%E5%AD%A6%E4%B9%A024%EF%BC%9A%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://www.bboyzj.cn/2023/03/21/OC%E5%AD%A6%E4%B9%A0/OC%E5%AD%A6%E4%B9%A024%EF%BC%9A%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2023-03-21T00:31:38.000Z</published>
    <updated>2023-03-29T05:07:53.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h1><ul><li>Project : 包含了项目所有的代码、资源文件和所有信息。</li><li>Target : 对指定代码和资源文件的具体构建方式。</li><li>Scheme : 对指定的Target的环境配置</li></ul><p>在实际开发中，我们必须要进行网络请求（<code>内网和外网</code>），而网络请求则就要针对不同的环境（<code>开发</code>、<code>测试</code>、<code>生产</code>）有不同的的<code>主机名称（URL_HOST）</code>，那么我们如何获取某个环境下的<code>URL_HOST</code>，那么在这个过程中，我们需要进行配置，而 <code>多环境配置</code> 的方式有三种：</p><ol><li>Target 配置</li><li>Scheme 配置</li><li>xcconfig 配置</li></ol><h1 id="Target-配置"><a href="#Target-配置" class="headerlink" title="Target 配置"></a>Target 配置</h1><ol><li>新建Dev的Target</li></ol><ul><li><p>选中 <code>Target</code> 下 <code>LoginApp</code> -&gt; 右键选中 <code>Duplicate</code> 复制 -&gt; 生成新的 <code>LoginApp copy</code> -&gt; 将其改名为 <code>LoginApp-Dev</code> </p></li><li><p>修改 <code>Bundle Identifier</code> 名为 <code>com.srsf.LoginApp-Dev</code></p></li><li><p>修改新生成的 <code>LoginApp copy-info</code> 名为 <code>LoginApp-Dev-info</code>，plist名称改变同时需要在 <code>Build Settings</code> -&gt; <code>Packaging</code> -&gt; <code>info.list File</code> 下 -&gt; 将 <code>LoginApp copy-info</code> 改成  <code>LoginApp-Dev-info</code>。</p></li></ul><p>如下图：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303210829441.png"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303210837715.png"                                     ></p><p>注：到目前为止，你运行 <code>LoginApp</code> 和 <code>LoginApp-Dev</code> 会生成两个 <code>App</code>。</p><ol start="2"><li>添加自定义宏 <code>macros</code></li></ol><ul><li>选中 <code>LoginApp-Dev</code> -&gt; <code>Builds Settings</code> -&gt; <code>all</code> -&gt; 搜索 <code>macros</code> -&gt; <code>Apple Clang - Preprocessing</code> -&gt; 选中 <code>Debug</code> 右键空白双击 -&gt; 弹出添加 <code>DEV=1</code>；同理，<code>Release</code> 设置 <code>DEV=0</code></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303210859670.png"                                     ></p><ul><li>此时，自定义的宏已经生效了，此时可以在任意地方调用下面的方式进行判断使用</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#if DEV</span><br><span class="line">    #define URL_HOST @&quot;http://192.168.0.1&quot;</span><br><span class="line">#else</span><br><span class="line">    #define URL_HOST @&quot;http://192.168.0.2&quot;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></div><ol start="3"><li>当你切换不同的 <code>Scheme</code> 时，打印不同的 <code>URL_HOST</code></li></ol><p>如果你觉得 <code>Scheme</code> 下名字看的不爽，也可以将 <code>Scheme</code> 下的名字也修改：<code>LoginApp copy</code> 改成 <code>LoginApp-Dev</code></p><ol start="4"><li>总结</li></ol><p><code>Target</code> 配置这种方式，每创建一个 <code>target</code> 都会产生新的 <code>info.plist</code>，每一个都需要去配置 <code>macros</code>，配置比较乱，<code>不推荐</code> 使用。</p><h1 id="Scheme-配置"><a href="#Scheme-配置" class="headerlink" title="Scheme 配置"></a>Scheme 配置</h1><ol><li>首先我们要了解到 <code>Scheme</code> 默认是有两种环境变量 <code>Debug</code> 和 <code>Release</code>，可以在 <code>Edit Scheme</code> -&gt; <code>Run</code> -&gt; <code>info</code> -&gt; <code>Build Configuration</code> 下查看。</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303210909448.png"                                     ></p><ol start="2"><li>其次，与之对应的环境配置在 <code>Project</code> -&gt; <code>LoginApp</code> -&gt; <code>Configurations</code> 下也可以看到</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303210916856.png"                                     ></p><ol start="3"><li>在 <code>Project</code> -&gt; <code>Info</code> -&gt; <code>Configurations</code> 下，我们可以创建一个自己的配置环境 <code>Beta</code>,现在我们有了 <code>三</code> 种配置方式，对应的在 <code>Edit Scheme</code> -&gt; <code>Run</code> -&gt; <code>info</code> -&gt; <code>Build Configuration</code> 下也有三种，同时在 <code>Target</code> -&gt; <code>Build Settings</code> -&gt; <code>Build Active Architecture Only</code> 下也有对应的三种配置方式，说明这是一个 <code>全局</code> 的配置，如下图：</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303210923815.png"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303210924650.png"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303210925812.png"                                     ></p><ol start="3"><li>新建 Scheme</li></ol><ul><li>点击 <code>LoginApp</code> -&gt; manager Schemes -&gt; 点击 + 号 -&gt; 添加 <code>Debug</code> 和 <code>Beta</code> 两种，加上 <code>LoginApp</code> 本身 <code>Release</code> 就是三种，对应上面 <code>三种</code> 配置</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303210927495.png"                                     ></p><ul><li>点击 <code>Edit Scheme</code> 切换 <code>Scheme</code>，并指定 <code>Configurations</code>，如下图</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303210927160.png"                                     ></p><ol start="4"><li>自定义主机名URL_HOST</li></ol><ul><li><code>Target</code> -&gt; <code>Build Settings</code> -&gt; 点击 <code>+</code> 号 -&gt; <code>Add User-Defined Settings</code> -&gt; <code>URL_HOST</code>，此时我们发现其对应的配置也是三个，分别设值如下：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303210930226.png"                                     ></p><ol start="5"><li>将 <code>URL_HOST</code> 添加到 <code>info.plist</code> 文件中，<code>Build Settings</code> 中的 配置可以通过 <code>info.plist</code> 暴露出来，可以直接读出来</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303210933404.png"                                     ></p><ol start="6"><li>在项目中使用</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NSString * path = [NSBundle.mainBundle pathForResource:@&quot;Info&quot; ofType:@&quot;plist&quot;];</span><br><span class="line">NSDictionary * infoDic = [[NSDictionary alloc] initWithContentsOfFile:path];</span><br><span class="line">NSLog(@&quot;%@&quot;,infoDic[@&quot;HOST_URL&quot;]);</span><br></pre></td></tr></table></figure></div><p>切换 <code>Scheme</code> ，打印如下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Debug：http://137.0.0.2</span><br><span class="line">Beta：http://137.0.0.1</span><br><span class="line">LoginApp：http://www.zjboy.com</span><br></pre></td></tr></table></figure></div><ol start="7"><li>同理配置图标的也一样</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303210936202.png"                                     ></p><h1 id="xcconfig-配置"><a href="#xcconfig-配置" class="headerlink" title="xcconfig 配置"></a>xcconfig 配置</h1><ol><li>在实际项目中，我们可能会有多个主机名称 <code>HOST_URL</code>，因此，我们还是需要去配置多个<code>Configurations</code>，下面还是以三个为准</li></ol><ul><li>在 <code>Project</code> -&gt; <code>LoginApp</code> -&gt; <code>Configurations</code> 下，我们可以创建一个自己的配置环境 <code>Beta</code>,现在我们有 了 <code>三</code> 种配置方式，对应的在 <code>Edit Scheme</code> -&gt; <code>Run</code> -&gt; <code>info</code> -&gt; <code>Build Configuration</code> 下也有三种，同时在 <code>Target</code> -&gt; <code>Build Settings</code> -&gt; <code>Build Active Architecture Only</code> 下也有对应的三种配置方式，说明这是一个 <code>全局</code> 的配置，如下图：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211008376.png"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303210936989.png"                                     ></p><ol start="2"><li>在主项目下，创建 <code>Congifg</code> 文件，并在下面创建三个对应环境的 <code>.xxconfig</code> 文件</li></ol><ul><li>在Config文件夹下 -&gt; command + N -&gt; 搜索config</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303210936598.png"                                     ></p><ul><li>输入对应的名称 -&gt; 点击create</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://user-images.githubusercontent.com/25925248/148355970-ade68d43-9816-4697-92d6-b451aa09e20d.jpg"                                     ></p><ul><li>创建成功之后，如下图</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211025332.png"                                     ></p><ol start="2"><li>选择对应Target的进行配置</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211025894.png"                                     ></p><ol start="3"><li>在 <code>xxconfig</code> 文件中写入 <code>HOST_URL</code></li></ol><ul><li><code>Debug</code> 下</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = /</span><br><span class="line">HOST_URL = http:$&#123;A&#125;/127.0.0.1</span><br></pre></td></tr></table></figure></div><ul><li>Beta</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = /</span><br><span class="line">HOST_URL = http:$&#123;A&#125;/127.0.0.2</span><br></pre></td></tr></table></figure></div><ul><li>Release ：</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = /</span><br><span class="line">HOST_URL = http:$&#123;A&#125;/www.bboyzj.cn</span><br></pre></td></tr></table></figure></div><ol start="4"><li>同样，我们需要在 <code>info.plist</code> 文件中暴露，在项目中取出</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303210935125.png"                                     ></p><ol start="5"><li>项目中代码取出</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NSString * path = [NSBundle.mainBundle pathForResource:@&quot;Info&quot; ofType:@&quot;plist&quot;];</span><br><span class="line">    NSDictionary * infoDic = [[NSDictionary alloc] initWithContentsOfFile:path];</span><br><span class="line">    NSLog(@&quot;%@&quot;,infoDic[@&quot;HOST_URL&quot;]);</span><br></pre></td></tr></table></figure></div><p>切换不同的 scheme 的打印结果</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Debug：http://127.0.0.1</span><br><span class="line"></span><br><span class="line">Beta： http://127.0.0.2</span><br><span class="line"></span><br><span class="line">Release：https://www.bboyzj.cn</span><br></pre></td></tr></table></figure></div><h1 id="Pch"><a href="#Pch" class="headerlink" title="Pch"></a>Pch</h1><ul><li>到 Target -&gt; Build Settings -&gt; 设值不同的DEBUG值</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211034254.png"                                     ></p><ul><li>具体是现代吗</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#if (DEBUG == 1)</span><br><span class="line">    #define kBaseUrl @&quot;http://127.0.0.1&quot;</span><br><span class="line">#elif (DEBUG == 2)</span><br><span class="line">    #define kBaseUrl @&quot;http://127.0.0.2&quot;</span><br><span class="line">#else</span><br><span class="line">    #define kBaseUrl @&quot;https://www.bboyzj.cn&quot;</span><br><span class="line">#endif</span><br><span class="line">    NSLog(@&quot;url:%@&quot;,kBaseUrl);</span><br></pre></td></tr></table></figure></div><h1 id="xconfig-其他功能"><a href="#xconfig-其他功能" class="headerlink" title="xconfig 其他功能"></a>xconfig 其他功能</h1><ul><li><code>xconfig</code> 全名是 <code>xcodeConfig</code>，它不仅仅是一个文件，它的本质是控制 <code>Build Settings</code> 里面的选项(比如配置动态库、静态库等)</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// ld 配置到链接器上</span><br><span class="line">// OTHER_LDFLAGS 即 Other Linker Flags 的缩写</span><br><span class="line">OTHER_LDFLAGS = -framework &quot;AFNetworking&quot;</span><br></pre></td></tr></table></figure></div><ul><li>在Debug配置下运行，报错 <code>ld: framework not found AFNetworking</code> ，然后我们找到 <code>Other Linker Flags</code>，可以看到如下</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211035155.png"                                     ></p><ul><li><p>他的原理与 <code>cocoapods</code> 的原理相同</p></li><li><p>想查找 <code>Build Settings</code> 中选项的缩写，这里有一个网站可以去查看 <a class="link"   href="https://xcodebuildsettings.com/" >Build Settings 缩写网站 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></li><li><p>比如搜索一个 <code>header search path</code>，找到其缩写 <code>HEADER_SEARCH_PATHS</code></p></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HEADER_SEARCH_PATHS = \user\zjbboy</span><br></pre></td></tr></table></figure></div><ul><li>你会在 <code>build settings</code> 找到</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211037905.png"                                     ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多环境配置&quot;&gt;&lt;a href=&quot;#多环境配置&quot; class=&quot;headerlink&quot; title=&quot;多环境配置&quot;&gt;&lt;/a&gt;多环境配置&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Project : 包含了项目所有的代码、资源文件和所有信息。&lt;/li&gt;
&lt;li&gt;Target : 对指</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="OC-学习" scheme="https://www.bboyzj.cn/tags/OC-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Swift学习18：多环境切换</title>
    <link href="https://www.bboyzj.cn/2023/03/21/Swift/Swift%E5%AD%A6%E4%B9%A018%EF%BC%9A%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2/"/>
    <id>https://www.bboyzj.cn/2023/03/21/Swift/Swift%E5%AD%A6%E4%B9%A018%EF%BC%9A%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2/</id>
    <published>2023-03-20T23:33:09.000Z</published>
    <updated>2023-03-21T02:43:57.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>swift</code> 多环境配置和 <code>oc</code> 类似，本文主要介绍 <code>Scheme</code> 和 <code>xcconfig</code> 多环境配置</p><h1 id="第一种方式：Scheme"><a href="#第一种方式：Scheme" class="headerlink" title="第一种方式：Scheme"></a>第一种方式：Scheme</h1><ol><li>首先我们要了解到 <code>Scheme</code> 默认是有两种环境变量 <code>Debug</code> 和 <code>Release</code>，可以在 <code>Edit Scheme</code> -&gt; <code>Run</code> -&gt; <code>info</code> -&gt; <code>Build Configuration</code> 下查看。</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211039679.png"                                     ></p><ol start="2"><li>其次，与之对应的环境配置在 <code>Project</code> -&gt; <code>Scheme</code> -&gt; <code>Configurations</code> 下也可以看到：</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211039310.png"                                     ></p><ol start="3"><li>在 <code>Project</code> -&gt; <code>Info</code> -&gt; <code>Configurations</code> 下，我们可以创建一个自己的配置环境 <code>Beta</code>,现在我们有了 <code>三</code> 种配置方式，如下图：</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211039788.png"                                     ></p><ul><li>对应的在 <code>Edit Scheme</code> -&gt; <code>Run</code> -&gt; <code>info</code> -&gt; <code>Build Configuration</code> 下也有三种，如下图：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211040573.png"                                     ></p><ul><li>同时在 <code>Target</code> -&gt; <code>Build Settings</code> -&gt; <code>Build Active Architecture Only</code> 下也有对应的三种配置方式，说明这是一个 <code>全局</code> 的配置，如下图：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211040984.png"                                     ></p><ol start="4"><li>新建 Scheme</li></ol><ul><li>点击 <code>Scheme -&gt; manager Schemes</code> -&gt; 点击 <code>+</code> 号 -&gt; 添加 <code>Debug</code> 和 <code>Beta</code> 两种，加上 <code>Scheme</code> 本身 <code>Release</code> 就是三种，对应上面 <code>三种</code> 配置</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211040044.png"                                     ></p><ul><li>点击 <code>Edit Scheme</code> 切换 <code>Scheme</code>，并指定 <code>Configurations</code>，如下图:</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211041361.png"                                     ></p><ol start="5"><li>自定义主机名 <code>URL_HOST</code></li></ol><ul><li><code>Target</code> -&gt; <code>Build Settings</code> -&gt; 点击 <code>+</code> 号 -&gt; <code>Add User-Defined Settings</code> -&gt; <code>URL_HOST</code>，此时我们发现其对应的配置也是三个，分别设值如下：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211041980.png"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211041457.png"                                     ></p><ol start="6"><li>将 <code>URL_HOST</code> 添加到 <code>info.plist</code> 文件中，<code>Build Settings</code> 中的 配置可以通过 <code>info.plist</code> 暴露出来，可以直接读出来</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211042468.png"                                     ></p><ol start="7"><li>在项目中使用</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let path = Bundle.main.path(forResource: &quot;Info&quot;, ofType: &quot;plist&quot;);</span><br><span class="line">let dic = NSMutableDictionary(contentsOfFile: path!);</span><br><span class="line">print(dic![&quot;URL_HOST&quot;]!);</span><br></pre></td></tr></table></figure></div><p>切换 scheme ，查看不同的打印结果</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://Debug</span><br><span class="line">http://Release</span><br><span class="line">http://Beta</span><br></pre></td></tr></table></figure></div><h1 id="第二种方式：xcconfig-配置"><a href="#第二种方式：xcconfig-配置" class="headerlink" title="第二种方式：xcconfig 配置"></a>第二种方式：xcconfig 配置</h1><ol><li>同样的，我们需要先配置 <code>三种 Connfigurations</code> ，配置方式同上</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211042205.png"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211042608.png"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211042489.png"                                     ></p><ol start="2"><li>在主项目下，创建 <code>Config</code> 文件，并在下面创建三个对应环境的 <code>.xcconfig</code> 文件</li></ol><ul><li>在Config文件夹下 -&gt; <code>command + N</code> -&gt; 搜索config</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211042170.png"                                     ></p><ul><li>输入对应的名称 -&gt; 点击create</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211043434.png"                                     ></p><ul><li>创建成功之后，如下图:</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211043637.png"                                     ></p><ol start="3"><li>选择对应Target的进行配置</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211043410.png"                                     ></p><ol start="4"><li>在 <code>xconfig</code> 文件中写入 <code>URL_HOST</code></li></ol><ul><li><code>Debug</code> 下</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = /</span><br><span class="line">URL_HOST = http:$&#123;A&#125;/Debug</span><br></pre></td></tr></table></figure></div><ul><li>Beta</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = /</span><br><span class="line">URL_HOST = http:$&#123;A&#125;/Beta</span><br></pre></td></tr></table></figure></div><ul><li>Release ：</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = /</span><br><span class="line">URL_HOST = http:$&#123;A&#125;/Release</span><br></pre></td></tr></table></figure></div><ol start="5"><li>同样，我们需要在 <code>info.plist</code> 文件中暴露，在项目中取出</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://bboy-blog.oss-cn-beijing.aliyuncs.com/img/202303211043893.png"                                     ></p><ol start="6"><li>项目中代码取出</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let path = Bundle.main.path(forResource: &quot;Info&quot;, ofType: &quot;plist&quot;);</span><br><span class="line">let dic = NSMutableDictionary(contentsOfFile: path!);</span><br><span class="line">print(dic![&quot;URL_HOST&quot;]!);</span><br></pre></td></tr></table></figure></div><p>切换 scheme ，查看不同的打印结果</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://Debug</span><br><span class="line">http://Release</span><br><span class="line">http://Beta</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;swift&lt;/code&gt; 多环境配置和 &lt;code&gt;oc&lt;/code&gt; 类似，本文主要介绍 &lt;code&gt;Scheme&lt;/code</summary>
      
    
    
    
    <category term="Swift" scheme="https://www.bboyzj.cn/categories/Swift/"/>
    
    
    <category term="Swift-常用" scheme="https://www.bboyzj.cn/tags/Swift-%E5%B8%B8%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Flutter学习03：Dart数据类型</title>
    <link href="https://www.bboyzj.cn/2023/03/21/Flutter%E5%AD%A6%E4%B9%A0/Flutter%E5%AD%A6%E4%B9%A003%EF%BC%9ADart%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://www.bboyzj.cn/2023/03/21/Flutter%E5%AD%A6%E4%B9%A0/Flutter%E5%AD%A6%E4%B9%A003%EF%BC%9ADart%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2023-03-20T21:41:36.000Z</published>
    <updated>2023-03-30T16:49:45.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h1><ul><li><p>Numbers（数值）：</p><ul><li>int</li><li>double</li></ul></li><li><p>Strings（字符串）：</p><ul><li>String</li></ul></li><li><p>Booleans（布尔）：</p><ul><li>bool</li></ul></li><li><p>List（数组）：</p><ul><li>在dart中，数组是列表对象，所以大多数人只是称它们为列表</li></ul></li><li><p>Maps（字典）：</p><ul><li>通常来说，<code>Map</code> 是一个键值对相关的对象。键和值可以是任何类型的对象。</li></ul></li></ul><h1 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h1><ol><li>int 类型</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 1.int：必须是整型</span><br><span class="line">int a = 123;</span><br><span class="line">// a = 12.2; // 报错</span><br><span class="line">print(a);</span><br><span class="line"></span><br><span class="line">====</span><br><span class="line">123</span><br></pre></td></tr></table></figure></div><ol start="2"><li>double 类型</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 2.double：即可以是整型，也可以是浮点型</span><br><span class="line">double b = 23.5;</span><br><span class="line">b = 24;</span><br><span class="line">print(b);</span><br><span class="line"></span><br><span class="line">====</span><br><span class="line">24.0</span><br></pre></td></tr></table></figure></div><ol start="3"><li>运算符</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 3.运算符</span><br><span class="line">/* + - * / */</span><br><span class="line">var c = a + b;</span><br><span class="line">print(c);</span><br><span class="line"></span><br><span class="line">====</span><br><span class="line">147.0</span><br></pre></td></tr></table></figure></div><h1 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h1><ol><li>字符串定义的几种方式</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 第一种方式</span><br><span class="line">var str = &quot;this is str&quot;;</span><br><span class="line">print(str);</span><br><span class="line"></span><br><span class="line">// 第二种方式</span><br><span class="line">String str = &quot;this is str&quot;;</span><br><span class="line">print(str);</span><br><span class="line"></span><br><span class="line">=====</span><br><span class="line">this is str</span><br></pre></td></tr></table></figure></div><ol start="2"><li>可以写多行</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String str1 = &#x27;&#x27;&#x27;this is str1</span><br><span class="line">this is str1</span><br><span class="line">this is str1</span><br><span class="line">this is str1</span><br><span class="line">&#x27;&#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">=======</span><br><span class="line">this is str1</span><br><span class="line">  this is str1</span><br><span class="line">  this is str1</span><br><span class="line">  this is str1</span><br></pre></td></tr></table></figure></div><ol start="3"><li>字符串的拼接</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 2. 字符串的拼接</span><br><span class="line">String str1 = &quot;你好&quot;;</span><br><span class="line">String str2 = &quot;dart&quot;;</span><br><span class="line">print(&quot;$str1 $str2&quot;);</span><br><span class="line">print(str1 + str2);</span><br><span class="line"></span><br><span class="line">=====</span><br><span class="line">你好 dart</span><br><span class="line">你好dart</span><br></pre></td></tr></table></figure></div><h1 id="bool类型"><a href="#bool类型" class="headerlink" title="bool类型"></a>bool类型</h1><ol><li>true 和 false</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 1.bool</span><br><span class="line">bool flag1 = true;</span><br><span class="line">print(flag1);</span><br><span class="line">// true</span><br><span class="line"></span><br><span class="line">bool flag2 = false;</span><br><span class="line">print(flag2);</span><br><span class="line">// false</span><br></pre></td></tr></table></figure></div><ol start="2"><li>条件判断</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 2.条件判断</span><br><span class="line">var flag = true;</span><br><span class="line">if (flag) &#123;</span><br><span class="line">print(&quot;真&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">print(&quot;假&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">======</span><br><span class="line">真</span><br></pre></td></tr></table></figure></div><h1 id="List（数组-x2F-集合）"><a href="#List（数组-x2F-集合）" class="headerlink" title="List（数组&#x2F;集合）"></a>List（数组&#x2F;集合）</h1><ol><li>定义List方式</li></ol><ul><li>第一种定义List方式</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 1.第一种定义List方式</span><br><span class="line">var l1 = [&quot;张三&quot;, 20, true];</span><br><span class="line">print(l1);</span><br><span class="line">print(l1.length);</span><br><span class="line">print(l1[0]);</span><br><span class="line"></span><br><span class="line">=====</span><br><span class="line">[张三, 20, true]</span><br><span class="line">3</span><br><span class="line">张三</span><br></pre></td></tr></table></figure></div><ul><li>第二种定义List方式</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 2.第二种定义List方式 指定类型</span><br><span class="line">var l2 = &lt;String&gt;[&quot;张三&quot;, &quot;李四&quot;];</span><br><span class="line">print(l2);</span><br><span class="line"></span><br><span class="line">====</span><br><span class="line">[张三, 李四]</span><br><span class="line"></span><br><span class="line">var l3 = &lt;int&gt;[1, 2];</span><br><span class="line">print(l3);</span><br><span class="line">====</span><br><span class="line">[1, 2]</span><br></pre></td></tr></table></figure></div><ul><li>第三种定义List方式 增加数据</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 3.第三种定义List方式 增加数据，通过[]创建的集合它的容量可以变化的</span><br><span class="line">var l4 = [];</span><br><span class="line">print(l4);</span><br><span class="line">print(l4.length);</span><br><span class="line">l4.add(&quot;张三&quot;);</span><br><span class="line">l4.add(20);</span><br><span class="line">print(l4);</span><br><span class="line">print(l4.length);</span><br><span class="line"></span><br><span class="line">=====</span><br><span class="line">[]</span><br><span class="line">0</span><br><span class="line">[张三, 20]</span><br><span class="line">2</span><br></pre></td></tr></table></figure></div><ul><li>第四种定义List方式</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 4.第四种定义List方式</span><br><span class="line">// var l5 = new List(); // 在最新版本的dart里面没法使用这个方法了</span><br><span class="line">// 通过List.filled创建的集合长度是固定的</span><br><span class="line">var l5 = List.filled(2, &quot;&quot;); // 创建一个固定长度的集合</span><br><span class="line">print(l5); // [,]</span><br><span class="line">print(l5[0]); </span><br><span class="line"></span><br><span class="line">// 修改数据</span><br><span class="line">l5[0] = &quot;张三&quot;;</span><br><span class="line">l5[1] = &quot;李四&quot;;</span><br><span class="line">print(l5); // [张三,李四]</span><br><span class="line"></span><br><span class="line">// l5.add(&quot;王五&quot;); // 错误写法</span><br><span class="line"></span><br><span class="line">// l5.length = 0; // 修改集合的长度 报错</span><br><span class="line"></span><br><span class="line">// 指定类型</span><br><span class="line">var l7 = List&lt;String&gt;.filled(2, &quot;&quot;);</span><br><span class="line">l7[0] = &quot;String&quot;;</span><br><span class="line">print(l7); // [String, ]</span><br></pre></td></tr></table></figure></div><ul><li>通过[]方式创建的集合可以改变集合的长度</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 通过[]方式创建的集合可以改变集合的长度</span><br><span class="line">var l6 = [&quot;张三&quot;, &quot;李四&quot;];</span><br><span class="line">print(l6);</span><br><span class="line">l6.length = 0; // 可以该表的</span><br><span class="line">print(l6); // []</span><br></pre></td></tr></table></figure></div><h1 id="Maps-字典"><a href="#Maps-字典" class="headerlink" title="Maps 字典"></a>Maps 字典</h1><ul><li>第一种定义 Maps 方式</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 1.第一种定义 Maps 方式</span><br><span class="line">var person = &#123;</span><br><span class="line">&quot;name&quot;: &quot;张三&quot;,</span><br><span class="line">&quot;age&quot;: 20,</span><br><span class="line">&quot;work&quot;: [&quot;程序员&quot;, &quot;外卖员&quot;]</span><br><span class="line">&#125;;</span><br><span class="line">print(person);</span><br><span class="line">print(person[&quot;name&quot;]);</span><br><span class="line">print(person[&quot;age&quot;]);</span><br><span class="line">print(person[&quot;work&quot;]);</span><br><span class="line"></span><br><span class="line">=======</span><br><span class="line">&#123;name: 张三, age: 20, work: [程序员, 外卖员]&#125;</span><br><span class="line">张三</span><br><span class="line">20</span><br><span class="line">[程序员, 外卖员]</span><br></pre></td></tr></table></figure></div><ul><li>第二种定义 Maps 方式</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> // 2.第二种定义 Maps 方式</span><br><span class="line">var p = new Map();</span><br><span class="line">p[&quot;name&quot;] = &quot;李四&quot;;</span><br><span class="line">p[&quot;age&quot;] = 22;</span><br><span class="line">p[&quot;work&quot;] = [&quot;程序员&quot;, &quot;外卖员&quot;];</span><br><span class="line">print(p);</span><br><span class="line"></span><br><span class="line">========</span><br><span class="line">&#123;name: 李四, age: 22, work: [程序员, 外卖员]&#125;</span><br></pre></td></tr></table></figure></div><h1 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h1><ul><li>示例</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;1234&quot;;</span><br><span class="line">if (str is String) &#123;</span><br><span class="line">    print(&quot;是String类型&quot;);</span><br><span class="line">&#125; else if (str is int) &#123;</span><br><span class="line">    print(&quot;是 int 类型&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    print(&quot;其他类型&quot;);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">=====</span><br><span class="line">是String类型</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常用数据类型&quot;&gt;&lt;a href=&quot;#常用数据类型&quot; class=&quot;headerlink&quot; title=&quot;常用数据类型&quot;&gt;&lt;/a&gt;常用数据类型&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Numbers（数值）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int&lt;/li&gt;
&lt;li&gt;double</summary>
      
    
    
    
    <category term="Flutter-学习篇" scheme="https://www.bboyzj.cn/categories/Flutter-%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    
    
    <category term="Flutter" scheme="https://www.bboyzj.cn/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter学习02：Dart入口、打印、注释、常量、变量、命名规则</title>
    <link href="https://www.bboyzj.cn/2023/03/20/Flutter%E5%AD%A6%E4%B9%A0/Flutter%E5%AD%A6%E4%B9%A002%EF%BC%9ADart%E5%85%A5%E5%8F%A3%E3%80%81%E6%89%93%E5%8D%B0%E3%80%81%E6%B3%A8%E9%87%8A%E3%80%81%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E3%80%81%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/"/>
    <id>https://www.bboyzj.cn/2023/03/20/Flutter%E5%AD%A6%E4%B9%A0/Flutter%E5%AD%A6%E4%B9%A002%EF%BC%9ADart%E5%85%A5%E5%8F%A3%E3%80%81%E6%89%93%E5%8D%B0%E3%80%81%E6%B3%A8%E9%87%8A%E3%80%81%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F%E3%80%81%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/</id>
    <published>2023-03-20T09:07:03.000Z</published>
    <updated>2023-03-30T07:43:28.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入口方法"><a href="#入口方法" class="headerlink" title="入口方法"></a>入口方法</h1><p>入口方法有两种方式：</p><ul><li>第一种</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">    print(&#x27;hello dart&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>第二种</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 表示main方法没有返回值</span><br><span class="line">void main() &#123;</span><br><span class="line">    print(&#x27;hello dart&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>注：<br>如果无法输入请按 i：切换为输入<br>如果运行结果不全：请先保存 command + s</p></blockquote><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ul><li>command + &#x2F;</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// main() &#123;</span><br><span class="line">//   print(&quot;hello dart&quot;);</span><br><span class="line">// &#125;</span><br></pre></td></tr></table></figure></div><ul><li>&#x2F;&#x2F;&#x2F;</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/// 这也是一个注释</span><br></pre></td></tr></table></figure></div><ul><li>&#x2F;* 内容 *&#x2F;</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">  // 表示main方法没有返回值</span><br><span class="line">  void main() &#123;</span><br><span class="line">    print(&#x27;hello dart&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></div><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul><li><p>dart 变量是一个强大的脚本类语言，可以不先预定义变量类型，自动会类型推断</p></li><li><p>dart 定义变量可以通过 <code>var</code> 关键字来申明变量</p></li></ul><p>如：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void main() &#123;</span><br><span class="line">  // dart里面有类型校验</span><br><span class="line">    </span><br><span class="line">  // 定义变量-字符串类型</span><br><span class="line">  var str = &quot;this is var&quot;;</span><br><span class="line">  print(str);</span><br><span class="line">  // 也可以用另一种方式</span><br><span class="line">  String str1 = &#x27;this is str&#x27;;</span><br><span class="line">  print(str1);</span><br><span class="line"></span><br><span class="line">  // 定义变量-数字类型</span><br><span class="line">  var myNum = 1234;</span><br><span class="line">  print(myNum);</span><br><span class="line">  // 另一张方式</span><br><span class="line">  int myNum1 = 12345;</span><br><span class="line">  print(myNum1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>注：<code>var</code> 后不要写类型，写了类型 不要写 <code>var</code>，两者都写 <code>var int a = 5;</code> 报错</p></blockquote><h1 id="Dart-的命名规则"><a href="#Dart-的命名规则" class="headerlink" title="Dart 的命名规则"></a>Dart 的命名规则</h1><ul><li>变量名称必须由数字、字母、下划线和美元符$组成</li><li>注意：标识符开头不能是数字</li><li>标识符不能是保留字和关键字</li><li>变量的名字是区分大小写的，如：age和Age是不同的变量</li><li>变量名称建议用名词，方法名建议用动词</li></ul><p>示例：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var str = &#x27;this is var string&#x27;;</span><br><span class="line"></span><br><span class="line">// 错误的写法</span><br><span class="line">// 数字开头</span><br><span class="line">// var 2str = &#x27;error var&#x27;;</span><br><span class="line">// 关键字</span><br><span class="line">// var if = &#x27;12&#x27;;</span><br><span class="line"></span><br><span class="line">// 变量区分大小写</span><br><span class="line">var age = 30;</span><br><span class="line">print(age);</span><br><span class="line"></span><br><span class="line">var Age = 31;</span><br><span class="line">print(Age);</span><br></pre></td></tr></table></figure></div><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><ul><li><p><code>const</code> 值不变 一开始就得赋值</p></li><li><p><code>final</code> 可以开始不赋值 只能赋一次，而final不仅有const的编译时常量特性，最重要的它是运行时</p></li><li><p>永远不改变的量，请使用 <code>const</code> 或 <code>final</code> 修饰，而不是使用var或其他变量类型</p></li><li><p><code>final</code> 和 <code>const</code> 区别：final可以开始不赋值，只能赋一次。而final不仅有const编译时常量的特性，最重要的是它是运行时的常量，并且final是惰性初始化，即在运行时第一次使用前才初始化</p></li></ul><p>示例：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// const修饰常量</span><br><span class="line">  // const PI = 3.1415926;</span><br><span class="line">  // PI = 123.123; // 错误的写法 常量不可以修改</span><br><span class="line"></span><br><span class="line">// final修饰常量</span><br><span class="line">  final PI = 3.1415926;</span><br><span class="line">  // PI = 123.123; // 错误的写法 常量不可以修改</span><br><span class="line"></span><br><span class="line">  final a = new DateTime.now();</span><br><span class="line">  print(a);</span><br><span class="line"></span><br><span class="line">  const a1 = new DateTime.now(); // 错误</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;入口方法&quot;&gt;&lt;a href=&quot;#入口方法&quot; class=&quot;headerlink&quot; title=&quot;入口方法&quot;&gt;&lt;/a&gt;入口方法&lt;/h1&gt;&lt;p&gt;入口方法有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一种&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight-c</summary>
      
    
    
    
    <category term="Flutter-学习篇" scheme="https://www.bboyzj.cn/categories/Flutter-%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    
    
    <category term="Flutter" scheme="https://www.bboyzj.cn/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Swift学习17：Model使用结构体还是类</title>
    <link href="https://www.bboyzj.cn/2023/03/19/Swift/Swift%E5%AD%A6%E4%B9%A017%EF%BC%9AModel%E4%BD%BF%E7%94%A8%E7%BB%93%E6%9E%84%E4%BD%93%E8%BF%98%E6%98%AF%E7%B1%BB/"/>
    <id>https://www.bboyzj.cn/2023/03/19/Swift/Swift%E5%AD%A6%E4%B9%A017%EF%BC%9AModel%E4%BD%BF%E7%94%A8%E7%BB%93%E6%9E%84%E4%BD%93%E8%BF%98%E6%98%AF%E7%B1%BB/</id>
    <published>2023-03-19T14:42:36.000Z</published>
    <updated>2023-03-19T14:43:07.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</summary>
      
    
    
    
    <category term="Swift" scheme="https://www.bboyzj.cn/categories/Swift/"/>
    
    
    <category term="Swift-常用" scheme="https://www.bboyzj.cn/tags/Swift-%E5%B8%B8%E7%94%A8/"/>
    
  </entry>
  
</feed>
