<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张建的博客</title>
  <icon>https://www.gravatar.com/avatar/134cc2bfaf649e446f661778f4112fca</icon>
  <subtitle>成功的道路上只有荆棘，没有坦途</subtitle>
  <link href="https://www.bboyzj.cn/atom.xml" rel="self"/>
  
  <link href="https://www.bboyzj.cn/"/>
  <updated>2023-03-03T16:37:01.597Z</updated>
  <id>https://www.bboyzj.cn/</id>
  
  <author>
    <name>小J</name>
    <email>13718004742@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Swift学习36：对象</title>
    <link href="https://www.bboyzj.cn/2023/03/04/Swift%E5%AD%A6%E4%B9%A036%EF%BC%9A%E5%AF%B9%E8%B1%A1/"/>
    <id>https://www.bboyzj.cn/2023/03/04/Swift%E5%AD%A6%E4%B9%A036%EF%BC%9A%E5%AF%B9%E8%B1%A1/</id>
    <published>2023-03-03T16:37:01.000Z</published>
    <updated>2023-03-03T16:37:01.597Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Swift学习35：函数式编程</title>
    <link href="https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A035%EF%BC%9A%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A035%EF%BC%9A%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</id>
    <published>2023-03-03T14:56:24.000Z</published>
    <updated>2023-03-03T14:56:24.662Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Swift学习34：闭包</title>
    <link href="https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A034%EF%BC%9A%E9%97%AD%E5%8C%85/"/>
    <id>https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A034%EF%BC%9A%E9%97%AD%E5%8C%85/</id>
    <published>2023-03-03T14:56:01.000Z</published>
    <updated>2023-03-03T16:29:27.954Z</updated>
    
    
    
    
    <category term="Swift" scheme="https://www.bboyzj.cn/categories/Swift/"/>
    
    
    <category term="Swift-学习篇" scheme="https://www.bboyzj.cn/tags/Swift-%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>Swift学习33：函数</title>
    <link href="https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A033%EF%BC%9A%E5%87%BD%E6%95%B0/"/>
    <id>https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A033%EF%BC%9A%E5%87%BD%E6%95%B0/</id>
    <published>2023-03-03T14:54:55.000Z</published>
    <updated>2023-03-03T16:26:38.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swift中如何定义和使用函数"><a href="#Swift中如何定义和使用函数" class="headerlink" title="Swift中如何定义和使用函数"></a>Swift中如何定义和使用函数</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p><code>函数是一个独立的代码块，用来执行特定的任务</code>。通过给函数一个名字来定义它的功能，并且在需要的时候，通过这个名字来 <code>调用</code> 函数执行它的任务</p></li><li><p><code>Swift统一的函数语法十分灵活</code>。可以从简单的无形式参数到复杂的每个形式参数都带有局部和外部形式参数名。形式参数提供一个默认值来简化函数的调用，可被当做输入输出形式参数被传递，在函数执行完成时修改传递进来的变量。</p></li><li><p><code>Swift中每一个函数都有类型，由函数的形式参数类型和返回类型组成</code> 。可以像swift中其它类型来使用它。可以将函数当一个形式参数传递到另外一个函数中。也可以在一个函数中返回另一个函数。同时也可以写在其他函数内部在内嵌范围封装有用的功能。</p></li><li><p>函数是 <code>引用类型</code> 的，不是值类型的</p></li></ul><h2 id="定义和调用函数"><a href="#定义和调用函数" class="headerlink" title="定义和调用函数"></a>定义和调用函数</h2><ul><li><p>当你定义一个函数时，可以 选择定义一个或多个形式参数类型，也可以定义返回类型</p></li><li><p>每个函数都有函数名，藐视执行的任务。</p></li><li><p>使用函数可通过 <code>函数名</code> 并且 <code>传入</code> 函数的 <code>实际参数</code> （即形式参数类型的输入值 ）来 <code>调用函数</code>。</p></li><li><p>实际参数顺序必须符合形式参数的列表顺序</p></li></ul><h2 id="无形式参数的函数"><a href="#无形式参数的函数" class="headerlink" title="无形式参数的函数"></a>无形式参数的函数</h2><ul><li><p>函数不要求必须传入一个参数，可以没有形式参数</p></li><li><p>函数定义需要在名字的后面加一个圆括号，即使没有形式参数也得加</p></li><li><p>调用函数的时候也要在函数的名字后面加一个圆括号</p></li></ul><h2 id="多形式参数的函数"><a href="#多形式参数的函数" class="headerlink" title="多形式参数的函数"></a>多形式参数的函数</h2><ul><li>函数可以输入多个形式参数，写在圆括号内，用逗号分割</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func manyPara(a:Int,b:Int) &#123;</span><br><span class="line">    pring(&quot;\(a) \(b)&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="无返回值的函数"><a href="#无返回值的函数" class="headerlink" title="无返回值的函数"></a>无返回值的函数</h2><ul><li><p>函数定义可以没有返回类型，即没有返回箭头 -&gt; 或返回类型</p></li><li><p>严格上，函数还是有一个返回类型的，尽管没有定义返回值，实际上返回一个特殊的类型 <code>void</code>。它是一个空的元组，作用相当于没有元素的元组，写作()</p></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func manyTuple() -&gt; void &#123;</span><br><span class="line">    return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="多返回值的函数"><a href="#多返回值的函数" class="headerlink" title="多返回值的函数"></a>多返回值的函数</h2><ul><li>可以让函数返回多个值作为一个复合的返回值，你可以使用元组类型作为返回类型</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func manyTuple() -&gt; (a:Int,b:String) &#123;</span><br><span class="line">    return (1,&quot;aaa&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="可选元组返回类型"><a href="#可选元组返回类型" class="headerlink" title="可选元组返回类型"></a>可选元组返回类型</h2><ul><li><p>如果在函数返回类型中元组可能 <code>没有值</code>，可以用可选元组说明元组可能是 <code>nil</code></p></li><li><p>写法是可选元组圆括号后面加一个问号 <code>？</code>，例如 (Int,Int)? 或 (String,Int,Bool)?</p></li></ul><p>示例：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 返回元组</span><br><span class="line">func minMax(arr: [Int]) -&gt; (min:Int,max:Int)? &#123;</span><br><span class="line">    if arr.isEmpty &#123;</span><br><span class="line">        return nil</span><br><span class="line">    &#125;</span><br><span class="line">    var minValue = arr[0]</span><br><span class="line">    var maxValue = arr[0]</span><br><span class="line">    for value in arr &#123;</span><br><span class="line">        if value &lt; minValue &#123;</span><br><span class="line">            minValue = value</span><br><span class="line">        &#125;</span><br><span class="line">        if value &gt; maxValue &#123;</span><br><span class="line">            maxValue = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return (minValue,maxValue)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 绑定</span><br><span class="line">if let minMaxValue = minMax(arr: [1,3,4,2,5]) &#123;</span><br><span class="line">    print(&quot;min is \(minMaxValue.min),max is \(minMaxValue.max)&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>编译运行，查看打印结果：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">min is 1,max is 5</span><br></pre></td></tr></table></figure></div><h2 id="隐士返回函数"><a href="#隐士返回函数" class="headerlink" title="隐士返回函数"></a>隐士返回函数</h2><ul><li>如果整个函数体是一个单一的表达式，那么函数隐士返回这个表达式</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func greet(person: String) -&gt; String&#123;</span><br><span class="line">    &quot;Hello,&quot; + person + &quot;!&quot;</span><br><span class="line">&#125;</span><br><span class="line">print(&quot;\(greet(person: &quot;World&quot;))&quot;)</span><br></pre></td></tr></table></figure></div><p>打印结果</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello,World!</span><br></pre></td></tr></table></figure></div><h1 id="Swift形式参数和返回值"><a href="#Swift形式参数和返回值" class="headerlink" title="Swift形式参数和返回值"></a>Swift形式参数和返回值</h1><h2 id="实参标签和形参名"><a href="#实参标签和形参名" class="headerlink" title="实参标签和形参名"></a>实参标签和形参名</h2><ul><li><p>每一个函数的形式参数都包含实际参数标签和形式参数名。</p></li><li><p>形式参数必须有唯一的名字，有助于代码易读</p></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func someFunc(firstParamName:Int,secondParamName:Int)&#123;</span><br><span class="line">    // 形式参数 firstParamName secondParamName</span><br><span class="line">&#125;</span><br><span class="line">someFunc(firstParamName: 1, secondParamName: 2)</span><br></pre></td></tr></table></figure></div><h2 id="指定实际参数标签"><a href="#指定实际参数标签" class="headerlink" title="指定实际参数标签"></a>指定实际参数标签</h2><ul><li><p>形式参数名之前写实际参数标签，用 <code>空格</code> 分割</p></li><li><p>如果你为 <code>形式参数</code> 定义了 <code>实际参数标签</code>，那么在调用函数的时候必须使用 <code>实际参数标签</code></p></li><li><p>实际参数标签能够让函数的调用更加明确，更像自然语言，更可读，更清晰表达你的意图</p></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 实际参数标签 home</span><br><span class="line">func greet(person: String, from home: String) -&gt; String &#123;</span><br><span class="line">    return &quot;Hello \(person)! my home is \(home)&quot;</span><br><span class="line">&#125;</span><br><span class="line">print(greet(person: &quot;ZJ&quot;,from: &quot;BeiJing&quot;))</span><br></pre></td></tr></table></figure></div><p>打印结果：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello ZJ! my home is BeiJing</span><br></pre></td></tr></table></figure></div><h2 id="省略实际参数标签"><a href="#省略实际参数标签" class="headerlink" title="省略实际参数标签"></a>省略实际参数标签</h2><ul><li>可以利用下划线 <code>_</code> 替代显示的实际参数标签</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func greet(_ person: String, _ home: String) -&gt; String &#123;</span><br><span class="line">    return &quot;Hello \(person)! my home is \(home)&quot;</span><br><span class="line">&#125;</span><br><span class="line">print(greet(person: &quot;ZJ&quot;,from: &quot;BeiJing&quot;))</span><br></pre></td></tr></table></figure></div><h2 id="默认形式参数值"><a href="#默认形式参数值" class="headerlink" title="默认形式参数值"></a>默认形式参数值</h2><ul><li><p>可以在形式参数类型后，给类型定义一个默认值</p></li><li><p>如果定义了默认值，你就可以在调用的时候省略这个形式参数</p></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func someFunc(paramDefault: Int = 10) &#123;</span><br><span class="line">    print(&quot;\(paramDefault)&quot;)</span><br><span class="line">&#125;</span><br><span class="line">someFunc(paramDefault: 6)</span><br><span class="line">someFunc()</span><br><span class="line"></span><br><span class="line">===========</span><br><span class="line">6</span><br><span class="line">10</span><br></pre></td></tr></table></figure></div><h2 id="可变形式参数"><a href="#可变形式参数" class="headerlink" title="可变形式参数"></a>可变形式参数</h2><ul><li><p>一个可变的形式参数可以接受零或多个特定类型的值。</p></li><li><p>通过在形式参数类型名后插入三个点符号 … 来书写可变形式参数。</p></li><li><p>传入到可变参数中的值在函数的主体中被当做是对应类型的 <code>数组</code>。</p></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func changeFunc(_ numbers: Double...) -&gt; Double &#123;</span><br><span class="line">    var total: Double = 0</span><br><span class="line">    for number in numbers &#123;</span><br><span class="line">        total += number</span><br><span class="line">    &#125;</span><br><span class="line">    return total / Double(numbers.count)</span><br><span class="line">&#125;</span><br><span class="line">changeFunc(1,2,3,4,5)</span><br><span class="line"></span><br><span class="line">=============</span><br><span class="line">3</span><br></pre></td></tr></table></figure></div><h2 id="输入输出形式参数"><a href="#输入输出形式参数" class="headerlink" title="输入输出形式参数"></a>输入输出形式参数</h2><ul><li><p>可变形式参数只能在函数的内部做改变。如果你想函数能修改一个形式参数的值，而且这些改变在函数结束之后依然生效，那么就需要将形式参数定义为输入输出形式参数</p></li><li><p>输入输出形式参数：在形式参数前边加 <code>inout</code> 关键字。</p></li><li><p>只能把 <code>变量</code> 作为输入输出形式参数的 <code>实际参数</code>，在将变量作为实际参数传入给输入输出形式参数时，在它前边添加一个符号 <code>&amp;</code> 来明确可以被函数修改</p></li><li><p>输入输出形式参数不能有默认值，可变形式参数不能被标记为 <code>inout</code></p></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 输入输出形式参数</span><br><span class="line">func swapTwoInt(_ a: inout Int, _ b: inout Int) &#123;</span><br><span class="line">    let temp = a</span><br><span class="line">    a = b</span><br><span class="line">    b = temp</span><br><span class="line">&#125;</span><br><span class="line">var one = 10</span><br><span class="line">var two = 20</span><br><span class="line">swapTwoInt(&amp;one,&amp;two)</span><br><span class="line">print(&quot;\(one) \(two)&quot;)</span><br><span class="line"></span><br><span class="line">=========</span><br><span class="line">20 10</span><br></pre></td></tr></table></figure></div><h1 id="函数类型和内嵌函数"><a href="#函数类型和内嵌函数" class="headerlink" title="函数类型和内嵌函数"></a>函数类型和内嵌函数</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Swift中如何定义和使用函数&quot;&gt;&lt;a href=&quot;#Swift中如何定义和使用函数&quot; class=&quot;headerlink&quot; title=&quot;Swift中如何定义和使用函数&quot;&gt;&lt;/a&gt;Swift中如何定义和使用函数&lt;/h1&gt;&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="Swift" scheme="https://www.bboyzj.cn/categories/Swift/"/>
    
    
    <category term="Swift-学习篇" scheme="https://www.bboyzj.cn/tags/Swift-%E5%AD%A6%E4%B9%A0%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>Swift学习32：Dictionary字典底层实现探索</title>
    <link href="https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A032%EF%BC%9ADictionary%E5%AD%97%E5%85%B8%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E6%8E%A2%E7%B4%A2/"/>
    <id>https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A032%EF%BC%9ADictionary%E5%AD%97%E5%85%B8%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E6%8E%A2%E7%B4%A2/</id>
    <published>2023-03-03T14:54:19.000Z</published>
    <updated>2023-03-03T14:54:19.622Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Swift学习32：Dictionary字典</title>
    <link href="https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A032%EF%BC%9ADictionary%E5%AD%97%E5%85%B8/"/>
    <id>https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A032%EF%BC%9ADictionary%E5%AD%97%E5%85%B8/</id>
    <published>2023-03-03T14:54:00.000Z</published>
    <updated>2023-03-03T14:54:00.489Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Swift学习31：Set底层实现探究</title>
    <link href="https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A031%EF%BC%9ASet%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E6%8E%A2%E7%A9%B6/"/>
    <id>https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A031%EF%BC%9ASet%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E6%8E%A2%E7%A9%B6/</id>
    <published>2023-03-03T14:53:34.000Z</published>
    <updated>2023-03-03T14:53:34.196Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Swift学习30：Set集合</title>
    <link href="https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A030%EF%BC%9ASet%E9%9B%86%E5%90%88/"/>
    <id>https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A030%EF%BC%9ASet%E9%9B%86%E5%90%88/</id>
    <published>2023-03-03T14:52:43.000Z</published>
    <updated>2023-03-03T14:52:43.195Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Swift学习29：如何用数组来实现栈和队列</title>
    <link href="https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A029%EF%BC%9A%E5%A6%82%E4%BD%95%E7%94%A8%E6%95%B0%E7%BB%84%E6%9D%A5%E5%AE%9E%E7%8E%B0%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <id>https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A029%EF%BC%9A%E5%A6%82%E4%BD%95%E7%94%A8%E6%95%B0%E7%BB%84%E6%9D%A5%E5%AE%9E%E7%8E%B0%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</id>
    <published>2023-03-03T14:51:03.000Z</published>
    <updated>2023-03-03T14:51:03.634Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Swift学习28：数组的底层实现</title>
    <link href="https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A028%EF%BC%9A%E6%95%B0%E7%BB%84%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/"/>
    <id>https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A028%EF%BC%9A%E6%95%B0%E7%BB%84%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-03-03T14:50:24.000Z</published>
    <updated>2023-03-03T14:50:24.173Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Swift学习27：访问和操作数组</title>
    <link href="https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A027%EF%BC%9A%E8%AE%BF%E9%97%AE%E5%92%8C%E6%93%8D%E4%BD%9C%E6%95%B0%E7%BB%84/"/>
    <id>https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A027%EF%BC%9A%E8%AE%BF%E9%97%AE%E5%92%8C%E6%93%8D%E4%BD%9C%E6%95%B0%E7%BB%84/</id>
    <published>2023-03-03T14:49:55.000Z</published>
    <updated>2023-03-03T14:49:55.779Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Swift学习26：创建数组的几种方式</title>
    <link href="https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A026%EF%BC%9A%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://www.bboyzj.cn/2023/03/03/Swift%E5%AD%A6%E4%B9%A026%EF%BC%9A%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2023-03-03T14:49:30.000Z</published>
    <updated>2023-03-03T14:49:30.624Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>OC三方框架01：bugly搜集Crash</title>
    <link href="https://www.bboyzj.cn/2023/03/03/OC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B601%EF%BC%9Abugly%E6%90%9C%E9%9B%86Crash/"/>
    <id>https://www.bboyzj.cn/2023/03/03/OC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B601%EF%BC%9Abugly%E6%90%9C%E9%9B%86Crash/</id>
    <published>2023-03-03T08:17:48.000Z</published>
    <updated>2023-03-03T12:11:09.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bugly-介绍"><a href="#Bugly-介绍" class="headerlink" title="Bugly 介绍"></a>Bugly 介绍</h1><p>为了能够快速并准确的定位用户 <code>App</code> 发生 <code>Crash</code> 的代码位置，<code>Bugly</code> 使用 <code>符号表文件</code> 对发生 <code>Crash</code> 的程序 <code>堆栈</code> 进行 <code>解析和还原</code></p><p>举例：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303031701073.png"                                     ></p><h1 id="Bugly-上传方式"><a href="#Bugly-上传方式" class="headerlink" title="Bugly 上传方式"></a>Bugly 上传方式</h1><ul><li><p><code>Bugly</code> 已不再支持直接上传dSYM文件，需要 <code>下载工具包手动上传</code></p></li><li><p>本文主要介绍 <code>下载工具包手动上传</code></p></li></ul><h1 id="安装java运行环境"><a href="#安装java运行环境" class="headerlink" title="安装java运行环境"></a>安装java运行环境</h1><ul><li>终端查看是否已安装</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zhangjian@zhangjiandeMBP ~ % java -version</span><br><span class="line">java version &quot;1.8.0_291&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_291-b10)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.291-b10, mixed mode)</span><br></pre></td></tr></table></figure></div><p>上面的显示表示已安装</p><ul><li>未安装的情况如下：</li></ul><p>到 <a class="link"   href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" >Java官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 下载 <code>jdk</code>，如下图：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303031621953.png"                                     ></p><p>下载完成之后打开 <code>dmg</code>，安装、一路下一步即可安装成功。</p><p>在终端输入 <code>java -version</code> 可以查看 <code>java</code> 版本，如果输出信息和上面类似，表示安装成功</p><h1 id="获取-dSYM-文件"><a href="#获取-dSYM-文件" class="headerlink" title="获取 dSYM 文件"></a>获取 <code>dSYM</code> 文件</h1><ul><li><p>什么是 <code>dSYM</code> 文件？</p><ul><li><p>在 <code>iOS</code> 平台中，dSYM文件是指 <code>具有调试信息的目标文件</code>，文件名通常为 <code>xxx.app.dSYM</code></p></li><li><p>【注】：为了方便找回 <code>Crash</code> 对应的 <code>dSYM文件</code> 和 <code>还原堆栈</code>，建议每次 <code>构建或发布App版本</code> 时，备份好 <code>dSYM文件</code></p></li></ul></li><li><p>获取 <code>dSYM</code> 方式</p></li></ul><p>我们可以配置 <code>Edit Scheme -&gt; Archives</code> 打包 <code>Debug</code> 和 <code>Release</code> 两种环境，去获取 <code>dSYM文件</code>，本文以 <code>Release</code> 发布环境为例</p><ul><li>配置打包环境 <code>Release</code></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303031812947.png"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303031812648.png"                                     ></p><ul><li>Show in Finder -&gt; 显示包内容，找到 <code>dSYM文件</code></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/BboyZJ.github.io/assets/16778361825767.jpg"                                     ></p><ul><li>最后，在桌面或任意位置，新建一个文件夹如 <code>appdSYM</code> ，将 <code>xxx.app.dSYM</code> 拷贝进来</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303031739055.png"                                     ></p><p>至此，获取 <code>dSYM文件</code> 完成</p><h1 id="工具手动上传符号表"><a href="#工具手动上传符号表" class="headerlink" title="工具手动上传符号表"></a>工具手动上传符号表</h1><ul><li>下载 <code>Bugly</code>  iOS <a class="link"   href="https://bugly.qq.com/v2/downloads" >符号表 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 上传工具，如下图：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303031923224.png"                                     ></p><ul><li>我们需要用到的是 <code>buglySymboliOS.jar</code> 文件，单独放在一个新建的空文件夹如 <code>buglySymboliOS</code> 里面</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303031813454.png"                                     ></p><ul><li>下载后得到 <code>buglyqq-upload-symbol</code> 文件，解压里面 <code>jar包</code>，得到 <code>buglySymboliOS.jar 包</code></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/BboyZJ.github.io/assets/16778418003131.jpg"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/BboyZJ.github.io/assets/16778418971136.jpg"                                     ></p><ul><li>通过终端命令行上传</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar buglyqq-upload-symbol.jar -appid c4f4e4dc67 -appkey cb791b15-dbe1-44d9-bd33-b3fe558b773b -bundleid cn.epod.srsf -version 1.6.2 -platform IOS -inputSymbol /Users/mac/Desktop/appdSYM/中图云书房.app.dSYM</span><br></pre></td></tr></table></figure></div><p>【参数说明】：</p><p>-addid ：在 bugly 上对应的 appid     c4f4e4dc67<br>-appkey ：在 bugly 上对应的 appkey<br>-bundleid ： iOS平台的 bundle id    cn.epod.srsf<br>-version ：版本号  1.6.2<br>-platform ：平台（注意大小写）IOS Android<br>-inputSymbol ：dSYM调试文件 &#x2F;Users&#x2F;mac&#x2F;Desktop&#x2F;appdSYM&#x2F;中图云书房.app.dSYM</p><h1 id="项目中使用"><a href="#项目中使用" class="headerlink" title="项目中使用"></a>项目中使用</h1><ul><li>项目需要集成cocoapods三方依赖管理工具，用cocoapods集成 <code>Bugly</code> SDK</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">platform :ios, &#x27;9.0&#x27;</span><br><span class="line"></span><br><span class="line"># 忽略所有警告</span><br><span class="line">inhibit_all_warnings!</span><br><span class="line"></span><br><span class="line">target &#x27;SRSF&#x27; do</span><br><span class="line">  # Comment the next line if you don&#x27;t want to use dynamic frameworks</span><br><span class="line">  use_frameworks!</span><br><span class="line"></span><br><span class="line">  # Pods for SRSF</span><br><span class="line">  # 官方提示：三方动态库最好最多是6个</span><br><span class="line">  </span><br><span class="line">  # Bugly</span><br><span class="line">  pod &#x27;Bugly&#x27;</span><br><span class="line">  </span><br><span class="line">  target &#x27;SRSFTests&#x27; do</span><br><span class="line">    inherit! :search_paths</span><br><span class="line">    # Pods for testing</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  target &#x27;SRSFUITests&#x27; do</span><br><span class="line">    # Pods for testing</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure></div><ul><li>使用</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark -Bugly</span><br><span class="line">- (void)startBugly&#123;</span><br><span class="line">    BuglyConfig * config = [[BuglyConfig alloc] init];</span><br><span class="line">    config.debugMode = YES; // Debug信息开关</span><br><span class="line">    config.reportLogLevel = BuglyLogLevelWarn; // 设置为BuglyLogLevelWarn，则在崩溃时会上报Warn、Error接口打印的日志</span><br><span class="line">    [Bugly startWithAppId:@&quot;AppId&quot; config:config];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Bugly-介绍&quot;&gt;&lt;a href=&quot;#Bugly-介绍&quot; class=&quot;headerlink&quot; title=&quot;Bugly 介绍&quot;&gt;&lt;/a&gt;Bugly 介绍&lt;/h1&gt;&lt;p&gt;为了能够快速并准确的定位用户 &lt;code&gt;App&lt;/code&gt; 发生 &lt;code&gt;Crash</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="OC-三方框架" scheme="https://www.bboyzj.cn/tags/OC-%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>性能优化02：卡顿检测</title>
    <link href="https://www.bboyzj.cn/2023/03/02/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9602%EF%BC%9A%E5%8D%A1%E9%A1%BF%E6%A3%80%E6%B5%8B/"/>
    <id>https://www.bboyzj.cn/2023/03/02/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9602%EF%BC%9A%E5%8D%A1%E9%A1%BF%E6%A3%80%E6%B5%8B/</id>
    <published>2023-03-02T15:32:46.000Z</published>
    <updated>2023-03-02T15:32:46.851Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>性能优化01：内存泄漏检测</title>
    <link href="https://www.bboyzj.cn/2023/03/02/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9601%EF%BC%9A%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%A3%80%E6%B5%8B/"/>
    <id>https://www.bboyzj.cn/2023/03/02/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%9601%EF%BC%9A%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%A3%80%E6%B5%8B/</id>
    <published>2023-03-02T15:32:21.000Z</published>
    <updated>2023-03-02T15:32:21.654Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>OC学习03：内存管理</title>
    <link href="https://www.bboyzj.cn/2023/03/02/OC%E5%AD%A6%E4%B9%A003%EF%BC%9A%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>https://www.bboyzj.cn/2023/03/02/OC%E5%AD%A6%E4%B9%A003%EF%BC%9A%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</id>
    <published>2023-03-02T10:51:48.000Z</published>
    <updated>2023-03-03T08:09:37.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要介绍 <code>内存的五大区</code> 、<code>函数栈</code> 和 <code>内存管理</code></p><h1 id="内存五大区"><a href="#内存五大区" class="headerlink" title="内存五大区"></a>内存五大区</h1><p>在iOS中，内存主要分为 <code>栈区、堆区、全局区、常量区、代码区</code> 五个区域，如下图所示：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303021853105.png"                                     ></p><h2 id="栈区"><a href="#栈区" class="headerlink" title="栈区"></a>栈区</h2><p><strong>定义</strong></p><ul><li><p>栈是 <code>系统数据结构</code>，其对应的 <code>进程或者线程是唯一的</code></p></li><li><p>栈是 <code>向低地址扩展</code> 的数据结构</p></li><li><p>栈是一块 <code>连续的内存区域</code>，遵循 <code>先进后出（FILO）</code> 原则</p></li><li><p>栈区一般在 <code>运行时</code> 分配</p></li></ul><p><strong>存储</strong></p><p>栈区是由 <code>编译器自动分配并释放</code>的，主要用来存储</p><ul><li><p><code>局部变量</code></p></li><li><p><code>函数的参数</code>，例如函数的隐藏参数（id self, SEL _cmd）</p></li></ul><p><strong>优缺点</strong></p><ul><li><p>优点：因为栈是由 <code>编译器自动分配并释放</code> 的，不会产生内存碎片，所以 <code>快速高效</code></p></li><li><p>确定：栈的 <code>内存大小有限制，数据不灵活</code></p><ul><li><code>iOS主线程大小是1MB</code></li><li>其他线程是 <code>512KB</code></li><li><code>MAC</code> 只有 <code>8MB</code></li></ul></li></ul><p>以上内存大小的说明，在<a class="link"   href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html#//apple_ref/doc/uid/10000057i-CH15-SW7" >Threading Programming Guide <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>中有相关说明，如下图：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303021857274.png"                                     ></p><h2 id="堆区"><a href="#堆区" class="headerlink" title="堆区"></a>堆区</h2><p><strong>定义</strong></p><ul><li><p>堆是 <code>向高地址扩展</code> 的数据结构</p></li><li><p>堆是 <code>不连续的内存区域</code>，类似于 <code>链表结构</code>（便于增删，不便于查询），遵循 <code>先进先出（FIFO）</code>原则</p></li><li><p>堆的 <code>地址空间</code> 在iOS中是是动态的</p></li><li><p>堆区的分配一般是以在 <code>运行时分配</code></p></li></ul><p><strong>存储</strong></p><p>堆区是 <code>由程序员动态分配和释放</code> 的，如果程序员不释放，程序结束后，可能由操作系统回收，主要用于存放：</p><ul><li><p><code>OC</code> 中使用 <code>alloc</code> 、 <code>new</code> 开辟空间创建 <code>对象</code> ，或者 <code>block经过copy后</code> </p></li><li><p><code>C</code> 语言中使用 <code>malloc、calloc、realloc</code> 分配的空间，需要 <code>free</code> 释放</p></li><li><p>一般一个 <code>new/alloc</code> 就要对应一个 <code>release</code>，在 <code>ARC</code> 下编译器会自动在合适位置为 <code>OC</code> 对象添加 <code>release</code> 操作，会在当前 <code>线程Runloop退出或休眠时销毁这些对象</code>。<code>MRC</code> 则需程序员手动释放。</p></li></ul><p><strong>优缺点</strong></p><ul><li><p>优点：灵活方便，数据适应面广泛</p></li><li><p>缺点：需 <code>手动管理、速度慢</code>，容易产生内存碎片</p></li></ul><p>当需要访问堆中数据时，一般需要 <code>先通过对象读取到栈区的指针地址</code>，然后通过 <code>指针地址访问堆区</code></p><h2 id="全局区（静态区，即-bss-amp-data）"><a href="#全局区（静态区，即-bss-amp-data）" class="headerlink" title="全局区（静态区，即.bss &amp; .data）"></a>全局区（静态区，即.bss &amp; .data）</h2><p>全局区是 <code>编译时分配</code> 的内存空间，在程序运行过程中，此内存中的数据一直存在，<code>程序结束后由系统释放</code>，主要存放：</p><ul><li><p><code>未初始化的全局变量和静态变量</code>，即BSS区（.bss）</p></li><li><p><code>已初始化的全局变量和静态变量</code>，即DATA区（.data）</p></li></ul><p>其中，<code>全局变量</code> 是指变量值可以在 <code>运行时被动态修改</code>，而 <code>静态变量</code> 是 <code>static</code> 修饰的变量，包含 <code>静态局部变量</code> 和 <code>静态全局变量</code></p><h2 id="常量区（即-rodata）"><a href="#常量区（即-rodata）" class="headerlink" title="常量区（即.rodata）"></a>常量区（即.rodata）</h2><p>常量区是 <code>编译时分配</code> 的内存空间，在 <code>程序结束后由系统释放</code>，主要存放：</p><ul><li>已经使用了的，且没有指向的 <code>字符串常量</code></li></ul><p>字符串常量因为可能在程序中被多次使用，所以在程序运行之前就会提前分配内存</p><h2 id="代码区（即-text）"><a href="#代码区（即-text）" class="headerlink" title="代码区（即.text）"></a>代码区（即.text）</h2><p>代码区是 <code>由编译时分配</code>，主要用于存放 <code>程序运行时的代码</code>，代码会被编译成 <code>二进制存进内存</code> 的</p><h2 id="内存五大区验证"><a href="#内存五大区验证" class="headerlink" title="内存五大区验证"></a>内存五大区验证</h2><p>运行下面的一段代码，看看变量在内存中是如何分配的：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int a = 10; // 全局区（已初始化的全局变量）</span><br><span class="line">char * b; // 全局区(未初始化的全局变量)</span><br><span class="line">- (void)test&#123;</span><br><span class="line">    NSInteger i = 123; // 栈区（局部变量）</span><br><span class="line">    NSLog(@&quot;i的内存地址：%p&quot;, &amp;i);</span><br><span class="line">    </span><br><span class="line">    NSString *string = @&quot;ZJ&quot;; // 常量区（字符串常量）</span><br><span class="line">    NSLog(@&quot;string的内存地址：%p&quot;, string);</span><br><span class="line">    NSLog(@&quot;&amp;string的内存地址：%p&quot;, &amp;string);</span><br><span class="line">    </span><br><span class="line">    NSObject *obj = [[NSObject alloc] init]; // 堆区（alloc对象）</span><br><span class="line">    NSLog(@&quot;obj的内存地址：%p&quot;, obj);</span><br><span class="line">    NSLog(@&quot;&amp;obj的内存地址：%p&quot;, &amp;obj);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>运行结果如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2022-03-11 14:34:25.438913+0800 内存五大区[70321:4340509] i的内存地址：0x16f6f5a18</span><br><span class="line">2022-03-11 14:34:25.438976+0800 内存五大区[70321:4340509] string的内存地址：0x100710098</span><br><span class="line">2022-03-11 14:34:25.438997+0800 内存五大区[70321:4340509] &amp;string的内存地址：0x16f6f5a10</span><br><span class="line">2022-03-11 14:34:25.439014+0800 内存五大区[70321:4340509] obj的内存地址：0x280fa0bc0</span><br><span class="line">2022-03-11 14:34:25.439031+0800 内存五大区[70321:4340509] &amp;obj的内存地址：0x16f6f5a08</span><br></pre></td></tr></table></figure></div><ul><li><p>对于 <code>局部变量i</code>， 存放在栈区</p></li><li><p>对于 <code>字符串对象string</code>，分别打印了 <code>string得对象地址</code> 和 <code>string对象的指针地址</code></p><ul><li>string的 <code>对象地址</code> 是是存放在 <code>常量区</code></li><li>string <code>对象的指针地址</code>，是存放在 <code>栈区</code></li></ul></li><li><p>对于 <code>alloc创建的对象obj</code>，分别打印了 <code>obj得对象地址</code> 和 <code>obj对象的指针地址</code></p><ul><li>obj的 <code>对象地址</code> 是存放在 <code>堆区</code> </li><li>obj <code>对象的指针地址</code> 是存放在 <code>栈区</code></li></ul></li></ul><h1 id="函数栈"><a href="#函数栈" class="headerlink" title="函数栈"></a>函数栈</h1><ul><li><p><code>函数栈</code> 又称为 <code>栈区</code>，在内存中从高地址往低地址分配，与堆区相对，具体图示请看上面</p></li><li><p><code>栈帧</code> 是指 <code>函数（运行中且未完成）占用的一块独立的连续内存区域</code></p></li><li><p>应用中新创建的 <code>每个线程都有专用的栈空间</code>，栈可以在线程期间自由使用，而线程中有千千万万的函数调用，这些函数 <code>共享</code> 进程的这个 <code>栈空间</code>。<code>每个函数所使用的栈空间是一个栈帧，所有栈帧就组成了这个线程完成的栈</code></p></li><li><p><code>函数调用是发生在栈上</code> 的，每个 <code>函数的相关信息</code>（例如局部变量、调用记录等）都 <code>存储在一个栈帧</code> 中，每执行一次 <code>函数调用</code>，就会生成一个与其相关的栈帧，然后将其 <code>栈帧压入函数栈</code>，而当函数 <code>执行结束</code>，则将此函数对应的 <code>栈帧出栈并释放掉</code></p></li></ul><p>如下图所示，是经典图- <code>ARM的栈帧布局方式</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303021911717.png"                                     ></p><ul><li><p>其中 <code>main stack frame</code> 为调用函数的栈帧</p></li><li><p><code>func1 stack frame</code> 为当前 <code>当前函数（被调用者）的栈帧</code></p></li><li><p><code>栈底</code> 在 <code>高</code> 地址，栈向下增长</p></li><li><p><code>FP</code> 就是 <code>栈基址</code>，它指向函数的 <code>栈帧起始地址</code></p></li><li><p><code>SP</code> 则是函数的 <code>栈指针</code>，它指向 <code>栈顶</code> 的位置</p></li><li><p><code>ARM压栈</code> 的 <code>顺序</code> 很是规则（也比较容易被黑客攻破），依次为 <code>当前函数指针PC</code>、<code>返回指针LR</code>、<code>栈指针SP</code>、<code>栈基址FP</code>、<code>传入参数个数及指针</code>、<code>本地变量</code> 和 <code>临时变量</code>。如果函数准备调用另一个函数，跳转之前临时变量区先要保存另一个函数的参数</p></li><li><p><code>ARM</code> 也可以 <code>用栈基址和栈指针明确标示栈帧的位置</code>，栈指针SP一直移动，ARM的特点是，<code>两个栈空间内的地址（SP+FP）前面，必然有两个代码地址（PC+LP）明确标示着调用函数位置内的某个地址</code></p></li></ul><h2 id="堆栈溢出"><a href="#堆栈溢出" class="headerlink" title="堆栈溢出"></a>堆栈溢出</h2><p>一般情况下应用程序是不需要考虑堆和栈的大小的，但是事实上堆和栈不是无上限的，<code>过多的递归会导致栈溢出</code>，<code>过多的alloc变量会导致堆溢出</code></p><p>所以 <code>预防堆栈溢出</code> 的方法：</p><ul><li><p><code>避免层次过深</code> 的 <code>递归</code> 调用</p></li><li><p><code>不要使用过多的局部变量</code>，控制局部变量的大小</p></li><li><p><code>避免分配</code> 占用空间 <code>太大的对象</code>，并 <code>及时释放</code></p></li><li><p>实在不行，适当的情景下 <code>调用系统API修改线程的堆栈大小</code></p></li></ul><h2 id="栈帧示例"><a href="#栈帧示例" class="headerlink" title="栈帧示例"></a>栈帧示例</h2><p>描述下面代码的栈帧变化</p><p>栈帧程序示例</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int Add(int x,int y) &#123;</span><br><span class="line">    int z = 0;</span><br><span class="line">    z = x + y;</span><br><span class="line">    return z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int a = 10;</span><br><span class="line">    int b = 20;</span><br><span class="line">    int ret = Add(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>程序执行时，栈区中栈帧的变化如下图所示：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303021912743.png"                                     ></p><h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p>在iOS中开发中，我们或多或少都听说过内存管理。iOS的内存管理一般指的是OC对象的内存管理，因为OC对象分配在堆内存，堆内存需要程序员自己去动态分配和回收；基础数据类型(非OC对象)则分配在栈内存中，超过作用域就会由系统检测回收。如果我们在开发过程中，对内存管理得不到位，就有可能造成内存泄露。</p></li><li><p>我们通常讲的内存管理，实际上从发展的角度来说，分为两个阶段：<code>MRC和ARC</code>。</p><ul><li><p>MRC指的是 <code>手动内存管理</code>，在开发过程中需要开发者手动去编写内存管理的代码；</p></li><li><p>ARC指的是 <code>自动内存管理</code>，在此内存管理模式下由LLVM编译器和OC运行时库生成相应内存管理的代码。</p></li></ul></li></ul><h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><ul><li><p>在 <code>OC</code> 中，使用 <code>引用计数</code> 来 <code>进行内存管理</code>。</p></li><li><p>每个对象都有一个与其相对应的引用计数器，当持有一个对象，这个对象的引用计数就会递增；当这个对象的某个持有被释放，这个对象的引用计数就会递减。当这个对象的引用计数变为0，那么这个对象就会被系统回收。</p></li><li><p>当一个对象使用完没有释放，此时其引用计数永远大于1。该对象就会一直占用其分配在堆内存的空间，就会导致内存泄露。内存泄露到一定程度有可能导致内存溢出，进而导致程序崩溃。</p></li></ul><h2 id="MRC"><a href="#MRC" class="headerlink" title="MRC"></a>MRC</h2><ol><li>简介</li></ol><p>全称 Manual Reference Counting，管理通过使用 <code>retain, release</code>, 以及 <code>autorelease</code> 的消息发送来实现。</p><ul><li>retain: 持有（拥有）对象，对象引用数加 1</li><li>release: 释放对象，对象引用数减 1</li><li>autorelease: 通知系统，在 <code>@autoreleasepool</code> 代码块结束时，对对象调用 <code>release</code></li></ul><ol start="2"><li>管理原则</li></ol><ul><li>自己创建的对象，自己获得拥有权</li></ul><p>在苹果规定中，使用 <code>alloc/new/copy/mutableCopy</code> 创建返回的对象归调用者所有，例如以下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* NSMutableArray类对象A */</span><br><span class="line">NSMutableArray *array = [[NSMutableArray alloc] init];    </span><br><span class="line">NSLog(@&quot;%p&quot;, array);</span><br><span class="line">[array release]; // 释放</span><br></pre></td></tr></table></figure></div><p>由于对象 <code>A</code> 由 <code>alloc</code> 生成，符合苹果规定，<code>指针变量array指向并持有对象A</code>，引用计数器会加 1。另外，array在使用完对象A后需要对其进行释放。当调用release后，释放了其对对象A的引用，计数器减1。对象A此时引用计数值为零，所以对象A被回收。不能访问已经被回收的对象，会发生崩溃。</p><ul><li>别人创建的对象，可以通过 <code>retain</code> 来获得拥有权</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 例如已有 fooArray, 通过 array 方法获得其引用</span><br><span class="line">NSArray *bar = [fooArray array];</span><br><span class="line"></span><br><span class="line">// 不可以直接调用 release，因为没有拥有权</span><br><span class="line">// [bar release];</span><br><span class="line"></span><br><span class="line">// 需要先 retain 来获得拥有权，然后才能释放</span><br><span class="line">[bar retain];</span><br><span class="line">[bar release];</span><br></pre></td></tr></table></figure></div><ul><li><p>你所拥有的对象不再需要使用时，必须将其释放</p></li><li><p>不能释放你不拥有的对象</p></li></ul><ol start="3"><li>retain</li></ol><ul><li>retain和属性</li></ul><p>我们可以通过属性来保存对象，如果一个属性为强引用，我们就可以通过属性的实例变量和存取方法来对某个对象进行操作，例如某个属性的setter方法如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (void)setPerson:(Person *)person &#123;</span><br><span class="line"></span><br><span class="line">    [person retain];</span><br><span class="line">    </span><br><span class="line">    [_person release];</span><br><span class="line">    </span><br><span class="line">    _person = person;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>我们通过 <code>retain新值</code>，<code>release旧值</code>，再给实例变量更新值。</p><p>需要注意的一点是：需要先retain新值，再release旧值。因为如果新旧值是同一个对象的话，先release就有可能导致该对象被系统回收，再去retain就没有任何意义了。例如下面这个例子：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;ViewController.h&quot;</span><br><span class="line">#import &quot;Person.h&quot;</span><br><span class="line"></span><br><span class="line">@interface ViewController ()</span><br><span class="line">@property (nonatomic, strong)Person *person;</span><br><span class="line">@end</span><br><span class="line">@implementation ViewController</span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">  </span><br><span class="line">    // 实例变量持有Person类对象(P对象)。这样赋值不会调用set方法</span><br><span class="line">    _person = [[Person alloc] init];</span><br><span class="line">    </span><br><span class="line">    // 调用set方法</span><br><span class="line">    self.person = _person;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setPerson:(Person *)person &#123;</span><br><span class="line">    // release释放对P对象的引用，P对象引用计数值变为零，则P对象被系统回收</span><br><span class="line">    [_person release];</span><br><span class="line"></span><br><span class="line">    // 由于P对象已经被回收，再去retain就容易出问题</span><br><span class="line">    [person retain];</span><br><span class="line">    </span><br><span class="line">    _person = person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>由于P对象被回收，对应其所分配的内存被置于 <code>可用内存池</code> 中。如果该内存未被覆写，那么P对象依然有效；如果内存被覆写，那么实例变量_person就会指向一个被覆写的未知对象的指针，那么实例变量就变成一个 <code>悬挂指针</code>。</p><ul><li>retain和数组</li></ul><p>如果我们把一个对象加入到一个数组中，那么该数组的addObject方法会对该对象调用retain方法。例如以下代码：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// person获得并持有P对象，P对象引用计数为1</span><br><span class="line">Person *person = [[Person alloc] init]; // Person类对象生成的P对象</span><br><span class="line">    </span><br><span class="line">NSMutableArray *array = [NSMutableArray array];</span><br><span class="line">    </span><br><span class="line">// person被加入到数组，对象P引用计数值为2</span><br><span class="line">[array addObject:person];</span><br><span class="line">    </span><br></pre></td></tr></table></figure></div><p>此时，对象P被person和array两个变量同时持有。</p><ol start="4"><li>release</li></ol><ul><li>自己持有的对象自己释放</li></ul><p>当我们持有一个对象，如果在不需要继续使用该对象，我们需要对其进行释放(release)。例如以下代码：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// array获得并持有NSArray类对象</span><br><span class="line">NSArray *array = [[NSArray alloc] init];</span><br><span class="line">    </span><br><span class="line">// 当不再需要使用该对象时，需要释放</span><br><span class="line">[array release];</span><br><span class="line">    </span><br><span class="line">// obj获得但不持有该对象</span><br><span class="line">id obj = [NSArray array];</span><br></pre></td></tr></table></figure></div><ul><li>非自己持有的对象不要释放</li></ul><p>当我们不持有某个对象，却对该对象进行释放，应用程序就会崩溃。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 获得并持有A对象</span><br><span class="line">Person *p = [[Person alloc] init]; // Person类对象A</span><br><span class="line">    </span><br><span class="line">// 对象A引用计数为零，所以对象A被回收</span><br><span class="line">[p release];</span><br><span class="line"></span><br><span class="line">// 释放非自己持有的对象</span><br><span class="line">[p release];</span><br></pre></td></tr></table></figure></div><p>另外，我们也不能访问某个已经被释放的对象，该对象所占的堆空间如果被覆写就会发生崩溃的情况。</p><ol start="5"><li>autorelease</li></ol><p><code>autorelease</code> 指的是自动释放，当一个对象收到 <code>autorelease</code> 的时候，该 <code>对象就会被注册到当前处于栈顶的自动释放池（autorelease pool）</code>。如果没有主动生成自动释放池，则当前自动释放池对应的是主运行循环的自动释放池。在当前线程的RunLoop进入休眠前，就会对被注册到该自动释放池的所有对象进行一次release操作。</p><p>autorelease和release的区别是：</p><ul><li><p>release：是马上释放对某个对象的强引用；</p></li><li><p>autorelease：是延迟释放某个对象的生命周期。</p></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 外部调用</span><br><span class="line">    Person *p = [Person person];</span><br><span class="line">    NSLog(@&quot;%p&quot;, p); //使用无须retain</span><br><span class="line"></span><br><span class="line">    // 持有则需要retain</span><br><span class="line">    [p retain];</span><br><span class="line">    _person = p;</span><br><span class="line">    [_person release];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Person类内部定义</span><br><span class="line">+ (id)person &#123;</span><br><span class="line"></span><br><span class="line">    //创建的Person类对象由person获得并持有</span><br><span class="line">    Person *person = [[Person alloc] init];</span><br><span class="line">   </span><br><span class="line">    // [person release];</span><br><span class="line"></span><br><span class="line">    // 将 person 对象放入自动释放池</span><br><span class="line">    [person autorelease];</span><br><span class="line">    </span><br><span class="line">    return person;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在外部调用，从方法名person知道，创建的对象由p指针变量获得但不持有。在函数内部，person获得并持有了Person类对象，所返回的person对象的引用计数加1。换句话说，调用者需要额外处理这多出来的一个持有操作。另外，我们不能在函数内部调用release，不然对象还没返回就已经被系统回收。这时候使用autorelease就能很好地解决这个问题。</p><p>只要把要返回的对象调用autorelease方法，注册到自动释放池就能延长person对象的生命周期，使其在 autorelease pool销毁(drain)前依然能够存活。</p><p>另外，person对象在返回时调用了 <code>autorelease方法</code>。该对象已经在自动释放池中，我们可以直接使用对象p，无须再通过[p retain]访问；不过，如果要用实例变量持有该对象，则需要对变量p进行一次retain操作，实例变量使用完该对象需要释放该对象。</p><ol start="6"><li>autorelease pool</li></ol><ul><li><code>autorelease pool</code> 和 <code>RunLoop(运行循环)</code></li></ul><p>当应用程序启动，系统默认会 <code>开启一条线程</code>，该线程就是 <code>主线程</code>。主线程也有一个与之对应的自动释放池。</p><p><code>每条线程都包含一个与其对应的自动释放池</code>，当某条线程被终止的时候，对应该线程的自动释放池会被销毁。同时，处于该自动释放池的对象将会进行一次 <code>release</code> 操作。</p><p>，例如我们常见的 <code>ARC</code> 下的 <code>main.h</code> 文件：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>该自动释放池用来释放在主线程下注册到该自动释放池的对象。</p><p>需要注意的是，当我们 <code>开启一条子线程</code>，并且在该线程 <code>开启RunLoop</code> 的时候，需要为其增加一个<code>autorelease pool</code>，这样有助于保证内存的安全。</p><ul><li>autorelease pool和降低内存峰值</li></ul><p>当我们执行一些复杂的操作，特别是如果这些复杂的操作要被循环执行，那么中间会免不了会产生一些临时变量。当被加到主线程自动释放池的对象越来越来多，却没有得到及时释放，就会导致内存溢出。这个时候，我们可以手动添加自动释放池来解决这个问题。如以下例子所示：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt; largeNumber; i++) &#123;</span><br><span class="line">        </span><br><span class="line">    // 创建自动释放池</span><br><span class="line">    NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];</span><br><span class="line">    </span><br><span class="line">    // 产生许多被注册到自动释放池的临时对象</span><br><span class="line">    id obj = [Person personWithComplexOperation];</span><br><span class="line">    </span><br><span class="line">    // 释放池中对象</span><br><span class="line">    [pool drain];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>如上述例子所示，我们执行的循环次数是一个非常大的数字。并且调用personWithComplexOperation方法的过程中会产生许多临时对象，所产生的临时对象有可能会被注册到自动释放池中。我们通过手动生成一个自动释放池，并且在每次循环结束前把该自动释放池的对象执行release操作释放掉，这样就能有效地降低内存的峰值了。</p><h2 id="ARC"><a href="#ARC" class="headerlink" title="ARC"></a>ARC</h2><ol><li>概述</li></ol><ul><li><p>Automatic Reference Counting，<code>自动引用计数</code>，即 <code>ARC</code>，<code>WWDC2011</code> 和 <code>iOS5</code> 所引入的最大的变革和最激动人心的变化。ARC是新的LLVM 3.0编译器的一项特性，使用ARC，可以说举解决了广大iOS开发者所憎恨的手动内存管理的麻烦。</p></li><li><p>此处的 <code>A</code> 就是 <code>automatic</code>。其实 <code>ARC</code> 只是比 <code>MRC</code> 多了一步，就是在 <code>编译时编译器自动帮开发者添加 retain, release 以及 autorelease 的调用</code>，底层的内存管理机制还是和 <code>MRC</code> 一样。</p></li><li><p>在 <code>ARC</code> 模式下，我们通常在对象变量的声明里用 <code>属性标记符</code> 来指引 <code>ARC</code> 机制来管理我们的对象变量，它们是：<code>strong, retain, weak, copy, assign</code>。默认标记是 <code>strong</code></p></li></ul><ol start="2"><li>标记符的区别</li></ol><ul><li>strong: 顾名思义，就是 <code>强引用</code>，对应 <code>MRC</code> 下的 <code>retain</code>，即引用数加 1</li><li>retain: 同 <code>strong</code></li><li>weak: 弱引用，不增加引用数，引用的对象被释放后变为 <code>nil</code></li><li>copy: 对对象进行 <code>copy</code> 后再赋值，因此对象必须遵循 <code>NSCopying</code> 协议。如：</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@property(copy)Foo *foo;</span><br><span class="line">...</span><br><span class="line">self.foo = bar;  // 相当于 self.foo = [bar copy];</span><br></pre></td></tr></table></figure></div><ul><li>assign: 一般用于原始数据类型（primitive type）的赋值。可以用于对象，效果相当于 weak，可是有一个坑是当对象被释放后，assign 属性的变量不会变成 nil，而是成为 <code>野指针</code>（dangling pointer），因此不建议使用在对象上。</li></ul><p>借助以上的属性标记符，我们可以在对象声明的时候集中制定它们的内存管理策略，清晰明了。</p><ol start="3"><li>ARC的判断原则</li></ol><p>ARC判断一个对象是否需要释放不是通过引用计数来进行判断的，而是通过强指针来进行判断的。那么什么是强指针?</p><ul><li><p>强指针</p><ul><li>默认所有对象的指针变量都是强指针</li><li>被__strong修饰的指针</li></ul></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person *p1 = [[Person alloc] init];</span><br><span class="line">__strong  Person *p2 = [[Person alloc] init];</span><br></pre></td></tr></table></figure></div><ul><li><p>弱指针</p><ul><li>被 <code>__weak</code> 修饰的指针</li></ul></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__weak  Person *p = [[Person alloc] init];</span><br></pre></td></tr></table></figure></div><p><strong>ARC如何通过强指针来判断？</strong></p><ul><li>只要还有一个强指针变量指向对象，对象就会保持在内存中</li></ul><ol start="4"><li>ARC的使用</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    // 不用写release, main函数执行完毕后p会被自动释放</span><br><span class="line">    Person *p = [[Person alloc] init];</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ol start="5"><li>ARC的注意点</li></ol><ul><li>不允许调用对象的 <code>release方法</code></li><li>不允许调用 <code>autorelease方法</code></li><li>重写父类的dealloc方法时，不能再调用 <code>[super dealloc]</code>;</li></ul><ol start="6"><li>ARC下单对象内存管理</li></ol><ul><li>局部变量释放对象随之被释放</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">   @autoreleasepool &#123;</span><br><span class="line">        Person *p = [[Person alloc] init];</span><br><span class="line">    &#125; // 执行到这一行局部变量p释放</span><br><span class="line">    // 由于没有强指针指向对象, 所以对象也释放</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ul><li>清空指针对象随之被释放</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">   @autoreleasepool &#123;</span><br><span class="line">        Person *p = [[Person alloc] init];</span><br><span class="line">        p = nil; // 执行到这一行, 由于没有强指针指向对象, 所以对象被释放</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ul><li>默认清空所有指针都是强指针</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">   @autoreleasepool &#123;</span><br><span class="line">        // p1和p2都是强指针</span><br><span class="line">        Person *p1 = [[Person alloc] init];</span><br><span class="line">        __strong Person *p2 = [[Person alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ul><li><p>弱指针需要明确说明</p><ul><li>注意: 千万不要使用弱指针保存新创建的对象</li></ul></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">   @autoreleasepool &#123;</span><br><span class="line">        // p是弱指针, 对象会被立即释放</span><br><span class="line">        __weak Person *p1 = [[Person alloc] init];</span><br><span class="line">        NSLog(@&quot;%@&quot;,p);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>打印结果：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-07-31 18:02:51.021697+0800 iOS-OC之ARC[2134:984503] (null)</span><br></pre></td></tr></table></figure></div><ol start="7"><li>ARC下多对象内存管理</li></ol><p>ARC和MRC一样, 想拥有某个对象必须用强指针保存对象, 但是不需要在dealloc方法中release</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@interface Person : NSObject</span><br><span class="line">// MRC写法</span><br><span class="line">//@property (nonatomic, retain) Dog *dog;</span><br><span class="line"></span><br><span class="line">// ARC写法</span><br><span class="line">@property (nonatomic, strong) Dog *dog;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></div><h2 id="自动释放池"><a href="#自动释放池" class="headerlink" title="自动释放池"></a>自动释放池</h2><ol><li>概述</li></ol><ul><li><p><code>AutoreleasePool</code>（自动释放池）是 <code>OC</code> 中的一种 <code>内存自动回收机制</code>。</p></li><li><p>当向一个对象发送 <code>autorelease</code> 消息时，会将对象加入到自动释放池，这个对象不会立即释放，而是等到 <code>runloop休眠或超出autoreleasepool作用域</code> 之后进行 <code>释放</code>。</p></li></ul><ol start="2"><li>MRC 下使用自动释放池</li></ol><p>在MRC环境中使用自动释放池需要用到 <code>NSAutoreleasePool</code> 对象，其生命周期就相当于C语言变量的作用域。对于所有调用过 autorelease方法的对象，在废弃NSAutoreleasePool对象时，都将调用release实例方法。用源代码表示如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// MRC环境下的测试：</span><br><span class="line">// 第一步：生成并持有释放池NSAutoreleasePool对象;</span><br><span class="line">NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];</span><br><span class="line"></span><br><span class="line">// 第二步：调用对象的autorelease实例方法;</span><br><span class="line">id obj = [[NSObject alloc] init];</span><br><span class="line">[obj autorelease];</span><br><span class="line"></span><br><span class="line">// 第三步：废弃NSAutoreleasePool对象;</span><br><span class="line">[pool drain];   // 向pool管理的所有对象发送消息，相当于[obj release]</span><br><span class="line"></span><br><span class="line">// obj已经释放，再次调用会崩溃(Thread 1: EXC_BAD_ACCESS (code=EXC_I386_GPFLT))</span><br><span class="line">NSLog(@&quot;打印obj：%@&quot;, obj); </span><br></pre></td></tr></table></figure></div><ol start="3"><li><code>ARC</code> 下使用自动释放池</li></ol><p>ARC环境不能使用NSAutoreleasePool类也不能调用autorelease方法，代替它们实现对象自动释放的是 <code>@autoreleasepool块</code>。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// ARC环境下的测试：</span><br><span class="line">@autoreleasepool &#123;</span><br><span class="line">    id obj = [[NSObject alloc] init];</span><br><span class="line">    NSLog(@&quot;打印obj：%@&quot;, obj); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="ARC-下-AutoReleasePool-内部实现"><a href="#ARC-下-AutoReleasePool-内部实现" class="headerlink" title="ARC 下 AutoReleasePool 内部实现"></a>ARC 下 AutoReleasePool 内部实现</h2><h3 id="使用-autoreleasepool"><a href="#使用-autoreleasepool" class="headerlink" title="使用@autoreleasepool{}"></a>使用@autoreleasepool{}</h3><p>我们在main函数中写入自动释放池相关的测试代码如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        NSLog(@&quot;Hello, World!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>为了探究释放池的底层实现，我们在终端使用 clang -rewrite-objc + 文件名命令将上述OC代码转化为 <code>C++</code> 源码：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    /* @autoreleasepool */</span><br><span class="line">    &#123;</span><br><span class="line">        __AtAutoreleasePool __autoreleasepool;</span><br><span class="line">        NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_3f_crl5bnj956d806cp7d3ctqhm0000gn_T_main_d37e0d_mi_0);</span><br><span class="line">     &#125; // 大括号对应释放池的作用域</span><br><span class="line">     </span><br><span class="line">     return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在经过编译器 <code>clang</code> 命令转化后，我们看到的所谓的 <code>@autoreleasePool块</code>，其实对应着<br><code>__AtAutoreleasePool的结构体</code>。</p><h3 id="分析结构体-AtAutoreleasePool-的具体实现"><a href="#分析结构体-AtAutoreleasePool-的具体实现" class="headerlink" title="分析结构体 __AtAutoreleasePool 的具体实现"></a>分析结构体 <code>__AtAutoreleasePool</code> 的具体实现</h3><p>在源码中找到 <code>__AtAutoreleasePool结构体</code> 的实现代码，具体如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">extern &quot;C&quot; __declspec(dllimport) void * objc_autoreleasePoolPush(void);</span><br><span class="line">extern &quot;C&quot; __declspec(dllimport) void objc_autoreleasePoolPop(void *);</span><br><span class="line"></span><br><span class="line">struct __AtAutoreleasePool &#123;</span><br><span class="line">  __AtAutoreleasePool() &#123;atautoreleasepoolobj = objc_autoreleasePoolPush();&#125;</span><br><span class="line">  ~__AtAutoreleasePool() &#123;objc_autoreleasePoolPop(atautoreleasepoolobj);&#125;</span><br><span class="line">  void * atautoreleasepoolobj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>__AtAutoreleasePool结构体包含了：<code>构造函数、析构函数和一个对象</code>；</p><p>构造函数内部调用：<code>objc_autoreleasePoolPush()</code> 方法，返回对象<code>atautoreleasepoolobj</code></p><p>析构函数内部调用：<code>objc_autoreleasePoolPop()</code> 方法，传入对象<code>atautoreleasepoolobj</code></p><ul><li>分析main函数中 __autoreleasepool结构体实例的生命周期是这样的：</li></ul><p>__autoreleasepool是一个自动变量，其构造函数是在程序执行到声明这个对象的位置时调用的，而其析构函数则是在程序执行到离开这个对象的作用域时调用。所以，我们可以将上面main函数的代码简化如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    /* @autoreleasepool */ &#123;</span><br><span class="line">        void *atautoreleasepoolobj = objc_autoreleasePoolPush();</span><br><span class="line">        NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_kb_06b822gn59df4d1zt99361xw0000gn_T_main_d39a79_mi_0);</span><br><span class="line">        objc_autoreleasePoolPop(atautoreleasepoolobj);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li><code>objc_autoreleasePoolPush</code> 与 <code>objc_autoreleasePoolPop</code><br>进一步观察自动释放池构造函数与析构函数的实现，其实它们都只是对<br><code>AutoreleasePoolPage</code> 对应静态方法 <code>push</code> 和 <code>pop</code> 的封装：</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void *objc_autoreleasePoolPush(void) &#123;</span><br><span class="line">    return AutoreleasePoolPage::push();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void objc_autoreleasePoolPop(void *ctxt) &#123;</span><br><span class="line">    AutoreleasePoolPage::pop(ctxt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="理解-AutoreleasePoolPage"><a href="#理解-AutoreleasePoolPage" class="headerlink" title="理解 AutoreleasePoolPage"></a>理解 <code>AutoreleasePoolPage</code></h3><p><code>AutoreleasePoolPage</code> 是一个 <code>C++</code> 中的类，打开Runtime的源码工程，在NSObject.mm文件中可以找到它的定义，摘取其中的关键代码如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class AutoreleasePoolPage &#123;</span><br><span class="line">#   define EMPTY_POOL_PLACEHOLDER ((id*)1)  // 空池占位</span><br><span class="line">#   define POOL_BOUNDARY nil                // 即哨兵对象</span><br><span class="line">    static pthread_key_t const key = AUTORELEASE_POOL_KEY;</span><br><span class="line">    static uint8_t const SCRIBBLE = 0xA3;  // 0xA3A3A3A3 after releasing</span><br><span class="line">    static size_t const SIZE = </span><br><span class="line">#if PROTECT_AUTORELEASEPOOL</span><br><span class="line">        PAGE_MAX_SIZE;  // must be multiple of vm page size</span><br><span class="line">#else</span><br><span class="line">        PAGE_MAX_SIZE;  // size and alignment, power of 2</span><br><span class="line">#endif</span><br><span class="line">    static size_t const COUNT = SIZE / sizeof(id);</span><br><span class="line">    magic_t const magic;                  // 校验AutoreleasePagePoolPage结构是否完整</span><br><span class="line">    id *next;                             // 指向新加入的autorelease对象的下一个位置，初始化时指向begin()</span><br><span class="line">    pthread_t const thread;               // 当前所在线程，AutoreleasePool是和线程一一对应的</span><br><span class="line">    AutoreleasePoolPage * const parent;   // 指向父节点page，第一个结点的parent值为nil</span><br><span class="line">    AutoreleasePoolPage *child;           // 指向子节点page，最后一个结点的child值为nil</span><br><span class="line">    uint32_t const depth;                 // 链表深度，节点个数</span><br><span class="line">    uint32_t hiwat;                       // 数据容纳的一个上限</span><br><span class="line">    //......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p><code>AutoreleasePoolPage</code> 中拥有 <code>parent 和 child 指针</code>，分别指向上一个和下一个 <code>page</code>；当前一个page的空间被占满(每个AutorelePoolPage的大小为4096字节)时，就会新建一个AutorelePoolPage对象并连接到链表中，后来的Autorelease对象也会添加到新的page中；<br>另外，当next&#x3D;&#x3D; begin()时，表示AutoreleasePoolPage为空；当next &#x3D;&#x3D; end()，表示AutoreleasePoolPage已满。</p><ul><li>理解 <code>哨兵对象(POOL_BOUNDARY)的作用</code>，而它的作用事实上也就是为了 <code>起到一个标识的作用</code>。</li></ul><p>每当自动释放池初始化调用 <code>objc_autoreleasePoolPush</code> 方法时，总会通过 <code>AutoreleasePoolPage</code> 的 <code>push</code> 方法，将 <code>POOL_BOUNDARY</code> 放到当前 <code>page</code> 的栈顶，并且返回这个对象 <code>atautoreleasepoolobj</code>；</p><p>而在自动释放池释放调用 <code>objc_autoreleasePoolPop</code> 方法时，又会将 <code>atautoreleasepoolobj对象</code> 以参数传入，这样自动释放池就会向释放池中对象发送release消息，直至找到第一个边界对象为止。</p><h3 id="理解-objc-autoreleasePoolPush-方法"><a href="#理解-objc-autoreleasePoolPush-方法" class="headerlink" title="理解 objc_autoreleasePoolPush 方法"></a>理解 <code>objc_autoreleasePoolPush</code> 方法</h3><p>经过前面的分析，<code>objc_autoreleasePoolPush</code> 最终调用的是 <code>AutoreleasePoolPage</code> 的 <code>push</code> 方法，该方法的具体实现如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">static inline void *push() &#123;</span><br><span class="line">   return autoreleaseFast(POOL_BOUNDARY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static inline id *autoreleaseFast(id obj)</span><br><span class="line">&#123;</span><br><span class="line">   AutoreleasePoolPage *page = hotPage();</span><br><span class="line">   if (page &amp;&amp; !page-&gt;full()) &#123;</span><br><span class="line">       return page-&gt;add(obj);</span><br><span class="line">   &#125; else if (page) &#123;</span><br><span class="line">       return autoreleaseFullPage(obj, page);</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">1.        return autoreleaseNoPage(obj);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 压栈操作：将对象加入AutoreleaseNoPage并移动栈顶的指针</span><br><span class="line">id *add(id obj) &#123;</span><br><span class="line">    id *ret = next;</span><br><span class="line">    *next = obj;</span><br><span class="line">    next++;</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 当前hotPage已满时调用</span><br><span class="line">static id *autoreleaseFullPage(id obj, AutoreleasePoolPage *page) &#123;</span><br><span class="line">    do &#123;</span><br><span class="line">        if (page-&gt;child) page = page-&gt;child;</span><br><span class="line">        else page = new AutoreleasePoolPage(page);</span><br><span class="line">    &#125; while (page-&gt;full());</span><br><span class="line"></span><br><span class="line">    setHotPage(page);</span><br><span class="line">    return page-&gt;add(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 当前hotpage不存在时调用</span><br><span class="line">static id *autoreleaseNoPage(id obj) &#123;</span><br><span class="line">    AutoreleasePoolPage *page = new AutoreleasePoolPage(nil);</span><br><span class="line">    setHotPage(page);</span><br><span class="line"></span><br><span class="line">    if (obj != POOL_SENTINEL) &#123;</span><br><span class="line">        page-&gt;add(POOL_SENTINEL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return page-&gt;add(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>观察上述代码，每次调用 <code>push</code> 其实就是 <code>创建一个新的AutoreleasePoolPage</code>，在对应的AutoreleasePoolPage中插入一个 <code>POOL_BOUNDARY</code> ，并且返回插入的 <code>POOL_BOUNDARY</code> 的内存地址。自动释放池最终都会通过 <code>page-&gt;add(obj)</code> 方法 <code>将对象添加到page中</code>，而这一过程被分为三种情况：</p><pre><code>* 当前page存在且不满，调用 `page-&gt;add(obj)` 方法将 `对象` 添加至page的栈中，即next指向的位置* 当前page存在但是已满，调用 autoreleaseFullPage 初始化一个新的 page，调用page-&gt;add(obj)方法将对象添加至page的栈中* 当前page不存在时，调用 autoreleaseNoPage 创建一个 hotPage，再调用page-&gt;add(obj) 方法将对象添加至page的栈中</code></pre><h3 id="理解-objc-autoreleasePoolPop-方法"><a href="#理解-objc-autoreleasePoolPop-方法" class="headerlink" title="理解 objc_autoreleasePoolPop 方法"></a>理解 <code>objc_autoreleasePoolPop</code> 方法</h3><ul><li><p><code>AutoreleasePool</code> 的释放调用的是 <code>objc_autoreleasePoolPop</code> 方法，此时需要传入  <code>atautoreleasepoolobj</code> 对象作为参数。</p></li><li><p>同理，我们找到 <code>objc_autoreleasePoolPop</code> 最终调用的方法，即 <code>AutoreleasePoolPage</code> 的pop方法，该方法的具体实现如下</p></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">static inline void pop(void *token)   // POOL_BOUNDARY的地址</span><br><span class="line">&#123;</span><br><span class="line">    AutoreleasePoolPage *page;</span><br><span class="line">    id *stop;</span><br><span class="line"></span><br><span class="line">    page = pageForPointer(token);   // 通过POOL_BOUNDARY找到对应的page</span><br><span class="line">    stop = (id *)token;</span><br><span class="line">    if (DebugPoolAllocation  &amp;&amp;  *stop != POOL_SENTINEL) &#123;</span><br><span class="line">        // This check is not valid with DebugPoolAllocation off</span><br><span class="line">        // after an autorelease with a pool page but no pool in place.</span><br><span class="line">        _objc_fatal(&quot;invalid or prematurely-freed autorelease pool %p; &quot;, </span><br><span class="line">                    token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (PrintPoolHiwat) printHiwat();   // 记录最高水位标记</span><br><span class="line"></span><br><span class="line">    page-&gt;releaseUntil(stop);   // 向栈中的对象发送release消息，直到遇到第一个哨兵对象</span><br><span class="line"></span><br><span class="line">    // memory: delete empty children</span><br><span class="line">    // 删除空掉的节点</span><br><span class="line">    if (DebugPoolAllocation  &amp;&amp;  page-&gt;empty()) &#123;</span><br><span class="line">        // special case: delete everything during page-per-pool debugging</span><br><span class="line">        AutoreleasePoolPage *parent = page-&gt;parent;</span><br><span class="line">        page-&gt;kill();</span><br><span class="line">        setHotPage(parent);</span><br><span class="line">    &#125; else if (DebugMissingPools  &amp;&amp;  page-&gt;empty()  &amp;&amp;  !page-&gt;parent) &#123;</span><br><span class="line">        // special case: delete everything for pop(top) </span><br><span class="line">        // when debugging missing autorelease pools</span><br><span class="line">        page-&gt;kill();</span><br><span class="line">        setHotPage(nil);</span><br><span class="line">    &#125; </span><br><span class="line">    else if (page-&gt;child) &#123;</span><br><span class="line">        // hysteresis: keep one empty child if page is more than half full</span><br><span class="line">        if (page-&gt;lessThanHalfFull()) &#123;</span><br><span class="line">            page-&gt;child-&gt;kill();</span><br><span class="line">        &#125;</span><br><span class="line">        else if (page-&gt;child-&gt;child) &#123;</span><br><span class="line">            page-&gt;child-&gt;child-&gt;kill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="【总结】"><a href="#【总结】" class="headerlink" title="【总结】"></a><strong>【总结】</strong></h3><p>【结构】：</p><ul><li><p>自动释放池的压栈和出栈，通过结构体的构造函数和析构函数实现：</p><ul><li><p>压栈：调用 <code>objc_autoreleasePoolPush()</code> 函数，内部调用的是 <code>AutoreleasePoolPage</code> 的 <code>push()</code> 方法，返回 <code>atautoreleasepoolobj</code> 对象</p></li><li><p>出栈：调用  <code>objc_autoreleasePololPop()</code> 函数，内部调用的是 <code>AutoreleasePoolPage</code> 的 <code>pop()</code> 方法，传入 <code>atautoreleasepoolobj</code> 对象</p></li></ul></li></ul><p>【容量】：</p><ul><li>池页大小为4096字节，每一页都包含56字节的成员变量，但一个自动释放池中，只会压栈一个哨兵对象，占8字节</li></ul><p>【原理】：</p><ul><li><p>自动释放池的本质是 <code>__AtAutoreleasePool</code> 结构体，包含构造函数和析构函数</p></li><li><p>结构体声明，触发构造函数，调用 <code>objc_autoreleasePoolPush()</code> 函数，对象压栈</p><ul><li><p>如果存在page，并且没有存满，调用add函数</p><ul><li>将对象压栈</li></ul></li><li><p>如果存在page，但存储已满，调用autoreleaseFullPage函数</p><ul><li>遍历链表，找到最后一个空白的子页面</li><li>对其进行创建新页</li><li>设置为热页面</li><li>添加对象</li></ul></li><li><p>否则，不存在page，调用autoreleaseNoPage函数</p><ul><li>通过父类AutoreleasePoolPageData进行初始化</li><li>begin：获取对象压栈的起始位置</li><li>objc_thread_self：通过tls获取当前线程</li><li>链接双向链表</li><li>设置为热页面</li><li>pushExtraBoundary为YES，哨兵对象压栈</li><li>对象压栈</li></ul></li></ul></li><li><p>结构体出作用域，触发析构函数，调用 <code>objc_autoreleasePoolPop()</code> 函数，对象出栈</p><ul><li>调用popPage函数，传入stop为哨兵对象的位置</li><li>当前页中对象出栈，到stop位置停止</li><li>调用kill函数，销毁当前页面</li></ul></li></ul><h1 id="AutoreleasePool在主线程上的释放时机"><a href="#AutoreleasePool在主线程上的释放时机" class="headerlink" title="AutoreleasePool在主线程上的释放时机"></a>AutoreleasePool在主线程上的释放时机</h1><ul><li>分析主线程RunLoop管理自动释放池并释放对象的详细过程，我们在如下Demo中的主线程中设置断点，并执行lldb命令：po [NSRunLoop currentRunLoop]，具体效果如下：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://user-images.githubusercontent.com/25925248/89028090-42d71580-d35e-11ea-8578-2bdf6240de0a.png"                                     ></p><p>我们看到主线程RunLoop中有两个与自动释放池相关的Observer,对应CFRunLoopActivity的类型如下:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) &#123;</span><br><span class="line">    kCFRunLoopEntry = (1UL &lt;&lt; 0),          //0x1，启动Runloop循环</span><br><span class="line">    kCFRunLoopBeforeTimers = (1UL &lt;&lt; 1),            </span><br><span class="line">    kCFRunLoopBeforeSources = (1UL &lt;&lt; 2),        </span><br><span class="line">    kCFRunLoopBeforeWaiting = (1UL &lt;&lt; 5),  //0xa0，即将进入休眠     </span><br><span class="line">    kCFRunLoopAfterWaiting = (1UL &lt;&lt; 6),   </span><br><span class="line">    kCFRunLoopExit = (1UL &lt;&lt; 7),           //0xa0，退出RunLoop循环  </span><br><span class="line">    kCFRunLoopAllActivities = 0x0FFFFFFFU</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></div><p>结合RunLoop监听的事件类型，分析主线程上自动释放池的使用过程如下：</p><ul><li><p>App启动后，苹果在主线程RunLoop里注册了两个 Observer，其回调都是 _wrapRunLoopWithAutoreleasePoolHandler();</p></li><li><p>第一个Observer监视的事件</p><ul><li><code>Entry(即将进入Loop)</code>，其回调内会调用 <code>_objc_autoreleasePoolPush()</code> 创建自动释放池。</li></ul></li><li><p>第二个Observer监视了两个事件 :</p><ul><li><p><code>BeforeWaiting(准备进入休眠)</code> 时调用 <code>_objc_autoreleasePoolPop()</code> 和<code>_objc_autoreleasePoolPush()</code> 释放旧的池并创建新池；</p></li><li><p>Exit(即将退出Loop) 时调用 <code>_objc_autoreleasePoolPop()</code> 来释放自动释放池。</p></li></ul></li><li><p>在主线程执行的代码，通常是写在诸如事件回调、Timer回调内的。这些回调会被 RunLoop创建好的AutoreleasePool环绕着，所以不会出现内存泄漏，开发者也不必显示创建AutoreleasePool了;</p></li><li><p>之后的时机</p><ul><li><p>程序启动到加载完成后，主线程对应的RunLoop会停下来等待用户交互</p></li><li><p>用户的每一次交互都会启动一次运行循环，来处理用户所有的点击事件、触摸事件。</p></li><li><p>RunLoop检测到事件后，就会创建自动释放池;</p></li><li><p>所有的延迟释放对象都会被添加到这个池子中;</p></li><li><p>在一次完整的运行循环结束之前，会向池中所有对象发送release消息，然后自动释放池被销毁;</p></li></ul></li></ul><h1 id="AutoreleasePool子线程上的释放时机"><a href="#AutoreleasePool子线程上的释放时机" class="headerlink" title="AutoreleasePool子线程上的释放时机"></a>AutoreleasePool子线程上的释放时机</h1><p>子线程默认不开启RunLoop，那么其中的延时对象该如何释放呢？其实这依然要从Thread和AutoreleasePool的关系来考虑：</p><ul><li><p>就是说，每一个线程都会维护自己的 <code>Autoreleasepool栈</code>，所以子线程虽然默认没有开启RunLoop，但是依然存在AutoreleasePool，在 <code>子线程退出</code> 的时候会去释放autorelease对象。</p></li><li><p>前面讲到过，ARC会根据一些情况进行优化，添加__autoreleasing修饰符，其实这就相当于对需要延时释放的对象调用了autorelease方法。从源码分析的角度来看，如果子线程中没有创建AutoreleasePool ，而一旦产生了Autorelease对象，就会调用autoreleaseNoPage方法自动创建hotpage，并将对象加入到其栈中。所以，一般情况下，子线程中即使我们不手动添加自动释放池，也不会产生内存泄漏。</p></li></ul><h1 id="AutoreleasePool需要手动添加的情况"><a href="#AutoreleasePool需要手动添加的情况" class="headerlink" title="AutoreleasePool需要手动添加的情况"></a>AutoreleasePool需要手动添加的情况</h1><ul><li><p>尽管ARC已经做了诸多优化，但是有些情况我们必须手动创建 <code>AutoreleasePool</code>，而其中的延时对象将在当前释放池的作用域结束时释放。苹果文档中说明了三种情况，我们可能会需要手动添加自动释放池：</p><ul><li>编写的不是基于UI框架的程序，例如命令行工具；</li><li>通过循环方式创建大量临时对象；</li><li>使用非Cocoa程序创建的子线程；</li></ul></li></ul><p>而在ARC环境下的实际开发中，我们最常遇到的也是第二种情况，以下面的代码为例：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    for (int i = 0; i &lt; 1000000; i++) &#123;</span><br><span class="line">        NSObject *obj = [[NSObject alloc] init];</span><br><span class="line">        NSLog(@&quot;打印obj：%@&quot;, obj);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><p>上述代码中，obj因为离开作用域所以会被加入最近一次创建的自动释放池中，而这个释放池就是主线程上的RunLoop管理的；因为for循环在当前线程没有执行完毕，Runloop也就没有完成当前这一次的迭代，所以导致大量对象被延时释放。释放池中的对象将会在viewDidAppear方法执行前就被销毁。在此情况下，我们就有必要通过手动干预的方式及时释放不需要的对象，减少内存消耗；优化的代码如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    for (int i = 0; i &lt; 1000000; i++) &#123;</span><br><span class="line">        @autoreleasepool&#123;</span><br><span class="line">             NSObject *obj = [[NSObject alloc] init];</span><br><span class="line">             NSLog(@&quot;打印obj：%@&quot;, obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文主要介绍 &lt;code&gt;内存的五大区&lt;/code&gt; 、&lt;code&gt;函数栈&lt;/code&gt; 和 &lt;code&gt;内存管理&lt;/code&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="OC-学习" scheme="https://www.bboyzj.cn/tags/OC-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>OC学习02：文件导入#include,#import,@class区别</title>
    <link href="https://www.bboyzj.cn/2023/03/02/OC%E5%AD%A6%E4%B9%A002%EF%BC%9A%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5#include,#import,@class%E5%8C%BA%E5%88%AB/"/>
    <id>https://www.bboyzj.cn/2023/03/02/OC%E5%AD%A6%E4%B9%A002%EF%BC%9A%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5#include,#import,@class%E5%8C%BA%E5%88%AB/</id>
    <published>2023-03-02T08:39:08.000Z</published>
    <updated>2023-03-02T10:13:48.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><p><code>#include</code> 、 <code>#import</code> 和 <code>@class</code> 都是用来 <code>包含头文件</code></p></li><li><p><code>C/C++</code> 只能用 <code>#include</code> 包含头文件，没有 <code>#import</code> 和 <code>@class</code></p></li><li><p><code>OC</code> 中 <code>#include</code> 、 <code>#import</code> 和 <code>@class</code> 都可以用</p></li></ul><p>那么问题来了，三种包含头文件方式在 <code>OC</code> 中有什么区别呢？</p><h1 id="include、import"><a href="#include、import" class="headerlink" title="include、import"></a>include、import</h1><ul><li><p>#include 会重复导入头文件，重复导入会报重复定义的错误；#import 不会重复导入头文件，允许交叉编译</p></li><li><p>#include &lt;xxx.h&gt; 或 #import &lt;xxx.h&gt; ：用于导入 <code>系统自带文件</code>，在 <code>系统文件目录下查找</code></p></li><li><p>#include “xxx.h” 或 #import “xxx.h” ：用于导入 <code>用户自定义的文件</code>，查找顺序：<code>用户文件目录 -&gt; 安装文件目录 -&gt; 系统文件目录</code>，所以 “xxx.h” 一般用来导入用户自定义的文件</p></li></ul><h1 id="class"><a href="#class" class="headerlink" title="class"></a>class</h1><ul><li>@class XXXClassName ： 用于声明一个类，用于解决互相引用的问题（A引用B，B引用A）</li></ul><h1 id="include-示例"><a href="#include-示例" class="headerlink" title="include 示例"></a>include 示例</h1><ul><li><code>A文件导入两次B文件</code>：报重复定义错误</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br><span class="line"></span><br><span class="line">// include 不允许重复导入两次</span><br><span class="line">#include &quot;VB.h&quot;</span><br><span class="line">#include &quot;VB.h&quot;</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line"></span><br><span class="line">@interface VA : UIView</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></div><p>command + b 编译报错：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303021812383.png"                                     ></p><ul><li>A引用B，B引用C，A再引用C：同样 <code>报重复定义错误</code>，相当于A引用了两次C</li></ul><h1 id="import-示例"><a href="#import-示例" class="headerlink" title="import 示例"></a>import 示例</h1><ul><li>导入两次A文件，不报错</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 导入两次A文件</span><br><span class="line">#import &quot;A.h&quot;</span><br><span class="line">#import &quot;A.h&quot;</span><br></pre></td></tr></table></figure></div><h1 id="class-使用场景"><a href="#class-使用场景" class="headerlink" title="class 使用场景"></a>class 使用场景</h1><ul><li>A类引用B类，B类引用A：互相引用报错</li></ul><p>A.h文件</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br><span class="line">#import &quot;B.h&quot;</span><br><span class="line">@interface A : UIView</span><br><span class="line">@property (nonatomic,strong)B * b;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></div><p>B.h文件</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br><span class="line">#import &quot;A.h&quot;</span><br><span class="line">@interface B : UIView</span><br><span class="line">@property (nonatomic,strong)A * a;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303021813725.png"                                     ></p><ul><li>可以用 <code>@class</code> 方式进行引用，一个用@class或者两个都用 @class</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//#import &quot;A.h&quot;</span><br><span class="line"></span><br><span class="line">// class声明A</span><br><span class="line">@class A;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;#include&lt;/code&gt; 、 &lt;code&gt;#import&lt;/code&gt; 和 &lt;code&gt;@class&lt;/</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="OC-学习" scheme="https://www.bboyzj.cn/tags/OC-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Blog-05：Picgo+Gitee图床</title>
    <link href="https://www.bboyzj.cn/2023/03/01/Blog-05%EF%BC%9APicgo-Gitee%E5%9B%BE%E5%BA%8A/"/>
    <id>https://www.bboyzj.cn/2023/03/01/Blog-05%EF%BC%9APicgo-Gitee%E5%9B%BE%E5%BA%8A/</id>
    <published>2023-03-01T11:25:22.000Z</published>
    <updated>2023-03-02T16:23:50.879Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近发现上传到 GitHub 上的图片大部分不能使用了，然后上网查了一下，应该是 DNS 的问题，网上也有很多解决方案，有兴趣的可以去网上找找，本文主要介绍 <code>Picgo + Gitee</code> 做图床。</p><h1 id="Picgo-介绍"><a href="#Picgo-介绍" class="headerlink" title="Picgo 介绍"></a>Picgo 介绍</h1><p><code>picgo</code> 是一款功能实用、操作简捷的图床工具，图床工具简单来说就是本地图片上传自动转换成链接的一款工具。</p><p>picgo 本体支持如下图床：</p><ul><li>七牛图床 v1.0</li><li>腾讯云 COS v4\v5 版本 v1.1 &amp; v1.5.0</li><li>又拍云 v1.2.0</li><li>GitHub v1.5.0</li><li>SM.MS V2 v2.3.0-beta.0</li><li>阿里云 OSS v1.6.0</li><li>Imgur v1.6.0</li></ul><p>Tips: 本体不再增加默认的图床支持。你可以自行开发第三方图床插件。</p><h1 id="特色功能"><a href="#特色功能" class="headerlink" title="特色功能"></a>特色功能</h1><ul><li>支持拖拽图片上传</li><li>支持快捷键上传剪贴板里第一张图片</li><li>Windows 和 macOS 支持右键图片文件通过菜单上传 (v2.1.0+)</li><li>上传图片后自动复制链接到剪贴板</li><li>支持自定义复制到剪贴板的链接格式</li><li>支持修改快捷键，默认快速上传快捷键：command+shift+p（macOS） | control+shift+p（Windows\Linux）</li><li>支持插件系统，已有插件支持 <code>Gitee、青云等第三方图床</code></li></ul><p>Tips:</p><ul><li>请确保你安装了 <code>Node.js</code>， 并且版本 &gt;&#x3D; 8。</li><li>默认上传图床为 <code>SM.MS</code>。<code>picgo</code> 上传之后，会自动将上传成功的 URL复制到你的剪贴板，支持5种复制格式。</li><li>Mini窗口只支持Windows（圆形）和Linux（方形），macOS可以使用顶部栏图标。（因为Windows和Linux的任务栏不支持拖拽事件）</li></ul><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li><code>nodejs</code> 环境</li><li><code>picgo</code> 客户端</li><li><code>picgo</code> 的 <code>Gitee</code> 上传插件</li><li><code>git、Gitee</code> 账号和一个公开仓库</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul><li><a class="link"   href="https://nodejs.org/zh-cn/download/" >nodejs官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 安装</li></ul><p>点击链接下载安装 nodejs，安装完成后，查看版本</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mac@bogon ~ % node -v</span><br><span class="line">v18.14.2</span><br><span class="line">mac@bogon ~ % npm -v</span><br><span class="line">mac@bogon ~ % npm -v</span><br><span class="line">9.5.0</span><br></pre></td></tr></table></figure></div><ul><li>安装 <code>picgo</code> 客户端</li></ul><p><a class="link"   href="https://github.com/Molunerfinn/picgo/releases" >picgo安装链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>如果电脑是 <code>Intel</code> 就选 <code>x64</code>，如果电脑是 <code>M1</code> 就选 <code>arm64</code></p><ul><li>安装 git</li></ul><p>Mac 默认是已经安装好了 git</p><h1 id="注册-x2F-登录-Gitee-账号"><a href="#注册-x2F-登录-Gitee-账号" class="headerlink" title="注册&#x2F;登录 Gitee 账号"></a>注册&#x2F;登录 Gitee 账号</h1><ul><li><p><a class="link"   href="https://gitee.com/" >Gitee <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 首页按要求自行注册&#x2F;登录即可</p></li><li><p>新建一个 <code>Gitee</code> 仓库</p></li></ul><p>仓库名：随意，如 Picgo<br>私有<br>创建</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303012136074.png"                                     ></p><ul><li>将仓库 <code>开源</code></li></ul><p>由于创建仓库的时候只能 <code>私有</code>，所以此步配置 <code>开源</code> 操作如下：</p><p>进入仓库 -&gt; 管理 -&gt; 基本信息 -&gt; 开源（空仓库不允许） -&gt; 保存</p><ul><li>生成 Token</li></ul><p><code>Token</code> 用于 <code>picgo</code> 操作 Gitee repository：</p><p>点击头像 -&gt; 设置 -&gt; 私人令牌 -&gt; 生成新令牌 -&gt; 提交</p><p>复制你生成的令牌，只显示一次，再次刷新则看不见了，因此你要保存好</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/BboyZJ.github.io/assets/16776726761906.jpg"                                     ></p><h1 id="配置-picgo"><a href="#配置-picgo" class="headerlink" title="配置 picgo"></a>配置 picgo</h1><ul><li>启动 picgo -&gt; 插件设置 -&gt; 搜索 Gitee -&gt; 点击插件图标 <code>安装</code> 即可，本文使用 <code>gitee 2.0.5</code> 插件来进行演示</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303012133116.jpg"                                     ></p><p>Tips： 插件装完后，重启生效</p><h1 id="配置-Gitee-插件"><a href="#配置-Gitee-插件" class="headerlink" title="配置 Gitee 插件"></a>配置 Gitee 插件</h1><p>进入 <code>图床设置</code> -&gt; gitee， 依次填入相关配置如下所示，填写如下：</p><ul><li><p>repo： 用户名&#x2F;仓库名（必填）， <code>bboy-zhang-jian/picgo</code></p></li><li><p>path: 上传路径，仓库里的图片保存路径（非必填）</p></li><li><p>token: 私人令牌（必填），刚才保存的 <code>token</code></p></li><li><p>message: 提交消息（非必填）</p></li><li><p>path: 上传路径，仓库里的图片保存路径（非必填）</p></li><li><p>customPath: 定制路径（非必填）</p></li><li><p>customUrl: 图片定制URL（非必填）</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303012137612.png"                                     ></p><h1 id="将仓库开源"><a href="#将仓库开源" class="headerlink" title="将仓库开源"></a>将仓库开源</h1><p>头像 -&gt; 仓库 -&gt; 管理 -&gt; 公开 -&gt; 仓库公开须知全部 <code>勾选</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://gitee.com/bboy-zhang-jian/picgo/raw/master/img/202303012138939.png"                                     ></p><h1 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h1><ul><li>将图片拖动到 <code>上传区</code> 里</li><li>快捷键 <code>Ctrl + shift + p</code></li></ul><h1 id="ERROR-Plugin-load-failed-hexo-renderer-scss"><a href="#ERROR-Plugin-load-failed-hexo-renderer-scss" class="headerlink" title="ERROR Plugin load failed: hexo-renderer-scss"></a>ERROR Plugin load failed: hexo-renderer-scss</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mac@bogon Blog % npm install hexo-renderer-scss</span><br></pre></td></tr></table></figure></div><h1 id="出现-Error-Cannot-find-module-‘node-sass’"><a href="#出现-Error-Cannot-find-module-‘node-sass’" class="headerlink" title="出现 Error: Cannot find module ‘node-sass’"></a>出现 Error: Cannot find module ‘node-sass’</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mac@bogon Blog % npm install node-sass</span><br></pre></td></tr></table></figure></div><p>不用管了，版本不一致导致的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;最近发现上传到 GitHub 上的图片大部分不能使用了，然后上网查了一下，应该是 DNS 的问题，网上也有很多解决方案，有兴趣的可以去网上找</summary>
      
    
    
    
    <category term="Blog" scheme="https://www.bboyzj.cn/categories/Blog/"/>
    
    
    <category term="博客搭建" scheme="https://www.bboyzj.cn/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>OC学习01：事件传递链和响应链</title>
    <link href="https://www.bboyzj.cn/2023/03/01/OC%E5%AD%A6%E4%B9%A001%EF%BC%9A%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E9%93%BE%E5%92%8C%E5%93%8D%E5%BA%94%E9%93%BE/"/>
    <id>https://www.bboyzj.cn/2023/03/01/OC%E5%AD%A6%E4%B9%A001%EF%BC%9A%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E9%93%BE%E5%92%8C%E5%93%8D%E5%BA%94%E9%93%BE/</id>
    <published>2023-03-01T09:30:34.000Z</published>
    <updated>2023-03-02T08:54:15.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 <code>iOS</code> 中只有继承 <code>UIResponder</code> 的 <code>对象</code> 才能够接收并处理事件，<code>UIResponder</code> 是所有响应对象的 <code>基类</code>。继承关系如下：</p><ul><li>UIApplication -&gt; UIResponder -&gt; NSObject</li><li>UIViewController -&gt; UIResponder -&gt; NSObject</li><li>UIWindow -&gt; UIViww -&gt; UIResponder -&gt; NSObject</li><li>UIButton -&gt; UIControl -&gt; UIView -&gt; UIResponder -&gt; NSObject</li><li>UIView -&gt; UIResponder -&gt; NSObject</li></ul><h1 id="事件链"><a href="#事件链" class="headerlink" title="事件链"></a>事件链</h1><ul><li><p><code>传递链</code>：由系统向离用户最近的view传递。<br>顺序：Appdelegate -&gt; UIApplication -&gt; UIWindow -&gt; RootViewController -&gt; subViews</p></li><li><p><code>响应链</code>：由离用户最近的view向系统传递。<br>顺序： superViews –&gt; RootViewController –&gt; UIWindow –&gt; UIApplication –&gt; AppDelegate</p></li></ul><h1 id="传递链"><a href="#传递链" class="headerlink" title="传递链"></a>传递链</h1><ul><li>事件传递的两个核心方法</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 返回哪个视图进行事件响应</span><br><span class="line">- (nullable UIView *)hitTest:(CGPoint)point withEvent:(nullable UIEvent *)event;  </span><br><span class="line">// 判断某一个点击的位置是否在视图范围内</span><br><span class="line">- (BOOL)pointInside:(CGPoint)point withEvent:(nullable UIEvent *)event;</span><br></pre></td></tr></table></figure></div><ul><li><p>其中 <code>UIView</code> 不接受事件处理的情况有</p></li><li><p>hidden &#x3D; YES 视图被隐藏</p></li><li><p>userInteractionEnabled &#x3D; NO 不接受响应事件</p></li><li><p>alpha &lt;&#x3D; 0.01,透明视图不接收响应事件</p></li><li><p>子视图超出父视图范围</p></li><li><p>需响应视图被其他视图盖住</p></li><li><p>是否重写了其父视图以及自身的hitTest方法</p></li><li><p>是否重写了其父视图以及自身的pointInside方法</p></li><li><p>流程描述</p><ul><li>当iOS程序发生触摸事件后，系统会利用 <code>Runloop</code> 将事件加入到 <code>UIApplication</code> 的任务队列中</li><li><code>UIApplication</code> 分发触摸事件到 <code>UIWindow</code></li><li>然后 <code>UIWindow</code> 依次向下分发给 <code>UIView</code></li><li><code>UIView</code> 调用 <code>hitTest:withEvent:</code> 方法返回一个最终响应的视图</li><li>在 <code>hitTest:withEvent:</code> 方法中就会去调用 <code>pointInside: withEvent:</code> 去判断当前点击的 <code>point</code> 是否在 <code>UIView</code> 范围内，如果是的话，就会去 <code>逆序遍历</code> 它的子视图来查找最终响应的 <code>子视图</code></li><li>遍历的方式是使用 <code>倒序</code> 的方式来遍历子视图，也就是说最后添加的子视图会最先遍历，在每一个视图中都会去调用它的 <code>hitTest:withEvent:</code> 方法，可以理解为是一个 <code>递归调用</code></li><li>最终会返回一个响应视图，如果返回视图有值，那么这个视图就作为最终响应视图，结束整个事件传递；如果没有值，那么就会将UIView作为响应者</li></ul></li></ul><h1 id="响应链"><a href="#响应链" class="headerlink" title="响应链"></a>响应链</h1><p>响应者链的事件传递过程</p><ul><li>如果 <code>view</code> 的控制器存在，就传递给控制器处理；如果控制器不存在，则传递给它的 <code>父视图</code></li><li>在视图层次结构的最顶层，如果也不能处理收到的事件，则将事件传递给 <code>UIWindow</code> 对象进行处理</li><li>如果 <code>UIWindow</code> 对象也不处理，则将事件传递给 <code>UIApplication</code> 对象</li><li>如果 <code>UIApplication</code> 也不能处理该事件，则将该事件丢弃</li></ul><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><ul><li>实现一个按钮的点击范围扩大效果</li></ul><p>思路：自定义一个按钮，重写 <code>poinstInSide</code> 方法，增大内边距，返回一个新的bounds</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;ZJBtn.h&quot;</span><br><span class="line">@implementation ZJBtn</span><br><span class="line">- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event&#123;</span><br><span class="line">    // 当前btn大小</span><br><span class="line">    CGRect btnBounds = self.bounds;</span><br><span class="line">    // 扩大按钮的点击范围，增大内边距</span><br><span class="line">    btnBounds = CGRectInset(btnBounds, -50, -50);</span><br><span class="line">    // 若点击的点在新的bounds里，返回YES</span><br><span class="line">    return CGRectContainsPoint(btnBounds, point);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></div><ul><li>子视图超过父视图部分仍然能响应</li></ul><p>思路：正常情况下子视图超出部分是不能响应事件的，需重写 <code>hitTest:withEvent</code> 方法，指定 <code>子视图</code> 可点击</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;VA.h&quot;</span><br><span class="line"></span><br><span class="line">@interface VA ()</span><br><span class="line">@property (nonatomic,strong)UIButton * btn;</span><br><span class="line">@end</span><br><span class="line">@implementation VA</span><br><span class="line">- (instancetype)initWithFrame:(CGRect)frame&#123;</span><br><span class="line">    self = [super initWithFrame:frame];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        [self addSubview:self.btn];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)clickBtn&#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;,__func__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (UIButton *)btn&#123;</span><br><span class="line">    if (!_btn) &#123;</span><br><span class="line">        _btn = [[UIButton alloc] initWithFrame:CGRectMake(-50, 20, self.frame.size.width + 100, 100)];</span><br><span class="line">        _btn.backgroundColor = [UIColor blueColor];</span><br><span class="line">        [_btn addTarget:self action:@selector(clickBtn) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    &#125;</span><br><span class="line">    return _btn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> 子视图超过父视图部分，需要点击超出范围的部分也有相应</span><br><span class="line"> */</span><br><span class="line">- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event&#123;</span><br><span class="line">    // 判断btn能否接收事件</span><br><span class="line">    if (self.btn.userInteractionEnabled == NO || self.btn.hidden == YES || self.btn.alpha &lt;= 0.01) &#123;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    // 把当前点转换成btn坐标系上的点</span><br><span class="line">    CGPoint btnP = [self convertPoint:point toView:self.btn];</span><br><span class="line">    // 当触摸点在btn上时，才让按钮相应事件</span><br><span class="line">    if ([self.btn pointInside:btnP withEvent:event]) &#123;</span><br><span class="line">        NSLog(@&quot;%@&quot;,NSStringFromCGPoint(btnP));</span><br><span class="line">        return self.btn;</span><br><span class="line">    &#125;</span><br><span class="line">    NSLog(@&quot;父视图相应&quot;);</span><br><span class="line">    return [super hitTest:point withEvent:event];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在 &lt;code&gt;iOS&lt;/code&gt; 中只有继承 &lt;code&gt;UIResponder&lt;/code&gt; 的 &lt;code&gt;对象&lt;/code&gt; 才能</summary>
      
    
    
    
    <category term="OC" scheme="https://www.bboyzj.cn/categories/OC/"/>
    
    
    <category term="OC-学习" scheme="https://www.bboyzj.cn/tags/OC-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>iOS面试题：Swift</title>
    <link href="https://www.bboyzj.cn/2023/03/01/iOS%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9ASwift/"/>
    <id>https://www.bboyzj.cn/2023/03/01/iOS%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9ASwift/</id>
    <published>2023-03-01T08:57:50.000Z</published>
    <updated>2023-03-03T16:27:37.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="swift-和-oc-的区别？"><a href="#swift-和-oc-的区别？" class="headerlink" title="swift 和 oc 的区别？"></a>swift 和 oc 的区别？</h1><ul><li><code>swift</code> 是静态语言，有类型判断。<code>OC</code> 是动态语言。</li><li><code>swift</code> 可以面向 <code>函数、协议、对象</code> 编程；oc以面向 <code>对象</code> 编程为主，可以引入 <code>Reactive Cocoa类库</code> 来进行函数式编程</li><li><code>Swift</code> 是 <code>类型安全</code> 的语言。<code>OC</code> 不是类型安全的语言。</li><li><code>Swift</code> 大部分都是 <code>值类型</code>，少部分是 <code>引用类型</code>。OC 有的是 <code>值类型</code>，有的是 <code>指针类型</code>。</li></ul><h1 id="swift类型？Swiift-值类型-和-引用类型的区别？特点？"><a href="#swift类型？Swiift-值类型-和-引用类型的区别？特点？" class="headerlink" title="swift类型？Swiift 值类型 和 引用类型的区别？特点？"></a>swift类型？Swiift 值类型 和 引用类型的区别？特点？</h1><ul><li><p>swift的类型分为 <code>值类型</code> 和 <code>引用类型</code>。</p><ul><li><p>值类型：在swift中定义的很多类型都是值类型：如 <code>struct、enum、Int、Float、Bool、String、Array、Dictionary、String</code> 等都是 <code>值类型</code>。</p></li><li><p>引用类型： <code>class类型、closure闭包、函数</code> 为引用类型</p></li></ul></li><li><p>区别</p><ul><li><p>值类型：传递和赋值时是一个 <code>副本</code>，使用过程中不会影响 <code>源数据</code></p></li><li><p>引用类型：传递和赋值是 <code>本身（内存地址）</code>，使用过程中会影响源数据</p></li></ul></li></ul><h1 id="常用的关键字"><a href="#常用的关键字" class="headerlink" title="常用的关键字"></a>常用的关键字</h1><ul><li><p>final：</p><ul><li>只能用于 <code>类</code> 中，修饰的 <code>方法、属性</code>，不能被重写</li><li><code>final</code> 修饰的类，不能被继承</li></ul></li><li><p>inout：输入输出形式参数</p><ul><li><code>将函数的参数由 值类型 转为 引用类型</code></li></ul></li><li><p>mutating：</p><ul><li>涉及到修改自身内存用</li></ul></li><li><p>#available</p><ul><li>用来判断平台和操作系统</li></ul></li><li><p>@available</p><ul><li>用于修饰 方法、属性、协议、扩展，用来表达它的可用性</li></ul></li></ul><h1 id="闭包的类型"><a href="#闭包的类型" class="headerlink" title="闭包的类型"></a>闭包的类型</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;swift-和-oc-的区别？&quot;&gt;&lt;a href=&quot;#swift-和-oc-的区别？&quot; class=&quot;headerlink&quot; title=&quot;swift 和 oc 的区别？&quot;&gt;&lt;/a&gt;swift 和 oc 的区别？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;swift&lt;</summary>
      
    
    
    
    <category term="Swift" scheme="https://www.bboyzj.cn/categories/Swift/"/>
    
    
    <category term="Swift-面试题" scheme="https://www.bboyzj.cn/tags/Swift-%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
